-- Reference list made for Elden ring by Vawser.
-- Adjusted for Sekiro by Igor, using Meowmaritus functions and command lists.
-- Script used for variable assigning made by LurkyDismal
------------------------
-- reference list https://github.com/vawser/ER-Documentation/blob/main/Info%20-%20HKS.txt
-- sekiro functions (env) https://gist.github.com/Meowmaritus/5a9b4bd0ab4e3bd8b929f6bd956f11bc
-- sekiro commands (act) https://gist.github.com/Meowmaritus/ee346c03a95dcd061d121c2689960102
TRUE = 1
FALSE = 0
INVALID = -1
AI_STATE_DEFAULT = 0
AI_STATE_CAUTION_BATTLE = 1
AI_STATE_BATTLE = 2
AI_STATE_CAUTION_NO_BATTLE = 3
STATE_NORMAL = 0
STATE_THROW_ATK = 1
STATE_THROW_DEF = 2
STATE_FALL = 3
STATE_DEATH = 4
STATE_JUMP = 5
AI_RECOGNITION_INVALID = -1
AI_RECOGNITION_NONE = 0
AI_RECOGNITION_CAUTION = 1
AI_RECOGNITION_FIND = 2
AI_RECOGNITION_BATTLE = 3
AI_RECOGNITION_FOR_THROW__INVALID = -1
AI_RECOGNITION_FOR_THROW__NONE = 0
AI_RECOGNITION_FOR_THROW__CAUTION = 1
AI_RECOGNITION_FOR_THROW__FIND_INCLUDE_PC = 2
AI_RECOGNITION_FOR_THROW__FIND_NOT_INCLUDE_PC = 3
AI_RECOGNITION_FOR_THROW__BATTLE_INCLUDE_PC = 4
AI_RECOGNITION_FOR_THROW__BATTLE_NOT_INCLUDE_PC = 5
MOVE_STAND = 0
MOVE_CROUCH = 1
MOVE_FLIGHT = 2
MOVE_TYPE_NONE = 0
MOVE_TYPE_WALK_FRONT = 1
MOVE_TYPE_WALK_BACK = 2
MOVE_TYPE_WALK_LEFT = 3
MOVE_TYPE_WALK_RIGHT = 4
MOVE_TYPE_RUN_FRONT = 5
MOVE_TYPE_RUN_LEFT = 6
MOVE_TYPE_RUN_RIGHT = 7
MOVE_TYPE_PARALLEL = 8
MOVE_TYPE_WALK_UPWARD = 9
MOVE_TYPE_WALK_DOWNWARD = 10
INDEX_TURN_DIRECTION_LEFT90 = 0
INDEX_TURN_DIRECTION_RIGHT90 = 1
INDEX_TURN_DIRECTION_LEFT180 = 2
INDEX_TURN_DIRECTION_RIGHT180 = 3
INDEX_TURN_DIRECTION_LEFT45 = 4
INDEX_TURN_DIRECTION_RIGHT45 = 5
STYLE_DEFAULT = 0
STYLE_GUARD = 1
STYLE_GENERAL_STANCE = 2
STYLE_GUARD_BOUND = 3
GUARD_DIR_INVALID = -1
GUARD_DIR_RIGHT = 1
GUARD_DIR_LEFT = 2
THROW_INVALID = 255
THROW_DEFAULT = 0
THROW_STATE_NONE = 0
GUARD_LEVEL_NONE = 0
GUARD_LEVEL_SMALL = 1
GUARD_LEVEL_LARGE = 3
GUARD_LEVEL_EXLARGE = 4
GUARD_LEVEL_ADD = 5
guard_damage_table = {{GUARD_LEVEL_NONE, GUARD_LEVEL_NONE, GUARD_LEVEL_NONE, GUARD_LEVEL_NONE, GUARD_LEVEL_NONE}, {GUARD_LEVEL_NONE, GUARD_LEVEL_SMALL, GUARD_LEVEL_SMALL, GUARD_LEVEL_SMALL, GUARD_LEVEL_SMALL}, {GUARD_LEVEL_NONE, GUARD_LEVEL_LARGE, GUARD_LEVEL_SMALL, GUARD_LEVEL_SMALL, GUARD_LEVEL_SMALL}, {GUARD_LEVEL_NONE, GUARD_LEVEL_LARGE, GUARD_LEVEL_LARGE, GUARD_LEVEL_LARGE, GUARD_LEVEL_LARGE}, {GUARD_LEVEL_NONE, GUARD_LEVEL_EXLARGE, GUARD_LEVEL_LARGE, GUARD_LEVEL_LARGE, GUARD_LEVEL_LARGE}, {GUARD_LEVEL_NONE, GUARD_LEVEL_SMALL, GUARD_LEVEL_SMALL, GUARD_LEVEL_SMALL, GUARD_LEVEL_LARGE}, {GUARD_LEVEL_NONE, GUARD_LEVEL_LARGE, GUARD_LEVEL_LARGE, GUARD_LEVEL_LARGE, GUARD_LEVEL_LARGE}, {GUARD_LEVEL_NONE, GUARD_LEVEL_LARGE, GUARD_LEVEL_LARGE, GUARD_LEVEL_LARGE, GUARD_LEVEL_LARGE}, {GUARD_LEVEL_NONE, GUARD_LEVEL_ADD, GUARD_LEVEL_ADD, GUARD_LEVEL_ADD, GUARD_LEVEL_ADD}, {GUARD_LEVEL_NONE, GUARD_LEVEL_LARGE, GUARD_LEVEL_LARGE, GUARD_LEVEL_LARGE, GUARD_LEVEL_LARGE}, {GUARD_LEVEL_NONE, GUARD_LEVEL_EXLARGE, GUARD_LEVEL_EXLARGE, GUARD_LEVEL_EXLARGE, GUARD_LEVEL_LARGE}, {GUARD_LEVEL_NONE, GUARD_LEVEL_LARGE, GUARD_LEVEL_LARGE, GUARD_LEVEL_LARGE, GUARD_LEVEL_LARGE}}
DAMAGE_LEVEL_NONE = 0
DAMAGE_LEVEL_SMALL = 1
DAMAGE_LEVEL_MIDDLE = 2
DAMAGE_LEVEL_LARGE = 3
DAMAGE_LEVEL_BLOW = 4
DAMAGE_LEVEL_PUSH = 5
DAMAGE_LEVEL_FLING = 6
DAMAGE_LEVEL_SMALL_BLOW = 7
DAMAGE_LEVEL_MINIMUM = 8
DAMAGE_LEVEL_UPPER = 9
DAMAGE_LEVEL_EX_BLAST = 10
DAMAGE_LEVEL_BREATH = 11
DAMAGE_FLAG_INVALID = -1
DAMAGE_FLAG_MINIMUM = 0
DAMAGE_FLAG_SMALL = 1
DAMAGE_FLAG_MIDDlE = 2
DAMAGE_FLAG_LARGE = 3
DAMAGE_FLAG_SMALL_BLOW = 4
DAMAGE_FLAG_LARGE_BLOW = 5
DAMAGE_FLAG_FLING = 6
DAMAGE_FLAG_UPPER = 7
DAMAGE_FLAG_PUSH = 8
DAMAGE_FLAG_BREATH = 9
DAMAGE_FLAG_WEAK = 10
DAMAGE_FLAG_GUARD_SMALL = 11
DAMAGE_FLAG_GUARD_LARGE = 12
DAMAGE_FLAG_GUARD_EXLARGE = 13
DAMAGE_FLAG_GUARD_BREAK = 14
DAMAGE_TYPE_DEATH = 2
DAMAGE_TYPE_GUARD = 3
DAMAGE_TYPE_DEATHIDLE = 8
DAMAGE_TYPE_WEAK_FRAME = 10
DAMAGE_TYPE_DROWN_DEATH = 13
DAMAGE_TYPE_GUARD_BREAK = 1001
DAMAGE_TYPE_GUARDED_BOUND_ENEMY1 = 1008
DAMAGE_TYPE_GUARDED_BOUND_ENEMY2 = 1009
DAMAGE_TYPE_GUARDED_BOUND_ENEMY3 = 1010
DAMAGE_TYPE_WALL_ENEMY1 = 1014
DAMAGE_TYPE_WALL_ENEMY2 = 1015
DAMAGE_TYPE_WALL_ENEMY3 = 1016
DAMAGE_TYPE_GUARDED_NO_BOUND_ENEMY1 = 1019
DAMAGE_TYPE_GUARDED_NO_BOUND_ENEMY2 = 1020
DAMAGE_TYPE_GUARDED_NO_BOUND_ENEMY3 = 1021
DAMAGE_TYPE_DAMAGE_BREAK = 1027
DAMAGE_TYPE_GUARD_ATTAKER_STAM_ZERO = 1028
DAMAGE_TYPE_RECEIVE_ATTACK_PARRY = 1030
DAMAGE_TYPE_RECEIVE_ATTACK_PARRY_STAM_ZERO = 1032
DAMAGE_TYPE_GUARDED_STAM_ZERO = 1033
DAMAGE_TYPE_NONE = 99999
SP_DAMAGE_NONE = 0
SP_DAMAGE_SPIN = 4
SP_DAMAGE_PUSH = 5
SP_DAMAGE_LARGE_START = 10
SP_DAMAGE_BURNING = 11
SP_DAMAGE_FIRE_FEAR = 12
SP_DAMAGE_HIDE_ACTION = 13
SP_DAMAGE_BACK_REALITY = 14
SP_DAMAGE_POISON_REACTION = 15
SP_DAMAGE_FIRE = 16
SP_DAMAGE_WIRE = 17
SP_DAMAGE_LIGHTNING = 18
SP_DAMAGE_FINGER_WHISTLE = 19
SP_DAMAGE_LARGE_END = 99
SP_DAMAGE_SMALL_START = 100
SP_DAMAGE_THROW_NEAR_REACTION = 101
SP_DAMAGE_THROW_FAR_REACTION = 102
SP_DAMAGE_ASSASSINATION_BLOOD = 103
SP_DAMAGE_BURST = 104
SP_DAMAGE_ASH_BAG = 105
SP_DAMAGE_SMALL_END = 199
DAMAGE_ELEMENT_DEFAULT = 0
DAMAGE_ELEMENT_NONE = 1
DAMAGE_ELEMENT_FIRE = 2
DAMAGE_ELEMENT_GHOST = 3
DAMAGE_ELEMENT_LIGHTNING = 6
DAMAGE_PHYSICAL_DEFAULT = 0
DAMAGE_PHYSICAL_SLASH = 1
DAMAGE_PHYSICAL_LIGHT_KNOCK = 2
DAMAGE_PHYSICAL_STING = 3
DAMAGE_PHYSICAL_NO_ABILITY = 4
DAMAGE_PHYSICAL_HEAVY_KNOCK = 6
DAMAGE_PHYSICAL_ANTI_GROUND = 7
DAMAGE_PHYSICAL_ANTI_AIR = 8
DAMAGE_PHYSICAL_LIGHT_SHOT = 9
DAMAGE_PHYSICAL_BURST = 10
DIRECTION_LEFT = 0
DIRECTION_RIGHT = 1
DIRECTION_FORWARD = 2
DIRECTION_BACK = 3
DIRECTION_FB_FORWARD = 0
DIRECTION_FB_BACK = 1
STATUS_SPECIAL_POISON = 0
STATUS_BURNING = 2
THROWABLE_STATE_ATK_COMMON_THROWABLE = 0
THROWABLE_STATE_ATK_PC_STAND = 1
THROWABLE_STATE_ATK_PC_CROUCH = 2
THROWABLE_STATE_ATK_PC_NORMAL_FALL = 3
THROWABLE_STATE_ATK_PC_COVER_LOOK_L = 4
THROWABLE_STATE_ATK_PC_COVER_LOOK_R = 5
THROWABLE_STATE_ATK_PC_HANG = 6
THROWABLE_STATE_ATK_ENE_BASE = 101
THROWABLE_STATE_ATK_COMMON_IMPOSSIBLE = 255
THROWABLE_STATE_DEF_COMMON_THROWABLE = 0
THROWABLE_STATE_DEF_PC_BASE = 1
THROWABLE_STATE_DEF_ENE_LAND_NORMAL_CAUTION = 101
THROWABLE_STATE_DEF_ENE_LAND_FOUND_BATTLE = 102
THROWABLE_STATE_DEF_ENE_LAND_COLLAPSE = 103
THROWABLE_STATE_DEF_ENE_LAND_SP_NINSATSU_ENABLE = 104
THROWABLE_STATE_DEF_ENE_LAND_JUMP_NINSATSU_ENABLE = 105
THROWABLE_STATE_DEF_ENE_IN_AIR = 106
THROWABLE_STATE_DEF_ENE_IN_AIR_NINSATU_ENABLE = 107
THROWABLE_STATE_DEF_ENE_HEADWATER = 109
THROWABLE_STATE_DEF_ENE_UNDERWATER = 110
THROWABLE_STATE_DEF_COMMON_IMPOSSIBLE = 255
DAMAGE_TRANSITION_RANK__NONE = -1
DAMAGE_TRANSITION_RANK__0 = 0
DAMAGE_TRANSITION_RANK__1 = 1
DAMAGE_TRANSITION_RANK__2 = 2
DAMAGE_TRANSITION_RANK__3 = 3
DAMAGE_TRANSITION_RANK__4 = 4
REJECTED_BY__DAMAGE_TRANSITION_RANK = 10
FRONT_ADD = 0
BACK_ADD = 1
LEFT_ADD = 2
RIGHT_ADD = 3
FRONTUP_ADD = 4
FRONTDOWN_ADD = 5
TRUNK_COLLAPSE_FRONT = 0
TRUNK_COLLAPSE_BACK = 1
ATTACK_DIR_FRONT = 0
ATTACK_DIR_UP = 1
ATTACK_DIR_DOWN = 2
ATTACK_DIR_LEFT = 3
ATTACK_DIR_RIGHT = 4
DEATH_TYPE_DEFAULT = 0
DEATH_TYPE_WEAK = 2
DEATH_TYPE_BLAST = 3
DEATH_TYPE_FLING = 4
DEATH_TYPE_UPPER = 5
DEATH_TYPE_LAND_DEFAULT = 6
DEATH_TYPE_THROW_DEF = 7
DEATH_TYPE_LADDER = 8
DEATH_TYPE_LAND_UPWARD = 9
DEATH_TYPE_LAND_DOWNWARD = 10
DEATH_TYPE_LAND_THROW_DEF_FRONT = 11
DEATH_TYPE_LAND_THROW_DEF_BACK = 12
DEATH_TYPE_LAND_THROW_DEF_ANTI_AIR = 13
DEATH_TYPE_FIRE = 20
DEATH_TYPE_LIGHTNING = 21
DEATH_TYPE_LIGHT_SHOT = 22
DEATH_TYPE_SLASH = 23
DEATH_TYPE_LIGHT_KNOCK = 24
DEATH_TYPE_STING = 25
DEATH_TYPE_HEAVY_KNOCK = 26
DEATH_TYPE_ANTI_GROUND = 27
DEATH_TYPE_ANTI_AIR = 28
DEATH_TYPE_GHOST = 29
LAND_NOT_FALL = -1
LAND_DEFAULT = 0
LAND_UPWARD = 1
LAND_DOWNWARD = 2
LAND_LADDER = 3
LAND_THROWDEF_FRONT = 4
LAND_THROWDEF_BACK = 5
LAND_THROWDEF_ANTIAIR = 6
LAND_TRUNK = 7
LAND_JUMPMOVE = 10
LAND_JUMPATTACK0 = 20
LAND_JUMPATTACK1 = 21
LAND_JUMPATTACK2 = 22
LAND_JUMPATTACK3 = 23
LAND_JUMPATTACK4 = 24
LAND_JUMPATTACK5 = 25
LAND_JUMPATTACK6 = 26
LAND_JUMPATTACK7 = 27
LAND_JUMPATTACK8 = 28
LAND_JUMPATTACK9 = 29
FALL_DEFAULT = 0
FALL_UPWARD = 1
FALL_DOWNWARD = 2
FALL_TRUNK = 3
FALL_UPWARD_LOOP = 4
FALL_DOWNWARD_LOOP = 5
FALL_TRUNK_LOOP = 6
BOUND_NON = 0
BOUND_RIGHT = 1
BOUND_LEFT = 2
BOUND_ADD01 = 11
BOUND_ADD02 = 12
BOUND_ADD03 = 13
BOUND_ADD04 = 14
BOUND_INVALID = 255
FLIGHT_WALKUPWARD = 5004
FLIGHT_WALKDOWNWARD = 5005
LADDER_REQUEST_UP = 7210
LADDER_REQUEST_DOWN = 7220
ACTION_TYPE_GUARD = 9910
ACTION_TYPE_GENERAL_STANCE = 9920
ANIME_ID_INVALID = -1
ANIME_ID_IDLE_DEFAULT = 0
ANIME_ID_IDLE_CAUTION_NO_BATTLE = 100000
ANIME_ID_IDLE_CAUTION_BATTLE = 200000
ANIME_ID_IDLE_BATTLE = 400000
ANIME_ID_IDLE_GURD = 500000
ANIME_ID_IDLE_GENERAL_STANCE = 600000
ANIME_ID_TRANS_TO_DEFAULT_FROM_DEFAULT = 1000
ANIME_ID_TRANS_TO_CAUTION_NO_BATTLE_SMALL_FROM_DEFAULT = 1010
ANIME_ID_TRANS_TO_CAUTION_NO_BATTLE_BIG_FROM_DEFAULT = 1011
ANIME_ID_TRANS_TO_CAUTION_BATTLE_FROM_DEFAULT = 1020
ANIME_ID_TRANS_TO_BATTLE_FROM_DEFAULT = 1040
ANIME_ID_TRANS_TO_DEFAULT_FROM_CAUTION_NO_BATTLE = 101000
ANIME_ID_TRANS_TO_BATTLE_FROM_CAUTION_NO_BATTLE = 101040
ANIME_ID_TRANS_TO_DEFAULT_FROM_CAUTION_BATTLE = 201000
ANIME_ID_TRANS_TO_BATTLE_FROM_CAUTION_BATTLE = 201040
ANIME_ID_TRANS_TO_DEFAULT_FROM_BATTLE = 401000
ANIME_ID_TRANS_TO_CAUTION_BATTLE_FROM_BATTLE = 401020
ANIME_ID_TRANS_TO_BATTLE_FROM_BATTLE = 401040
ANIME_ID_ONE_SHOT_IDLE_UNIQUE_BEGIN = 200
ANIME_ID_ONE_SHOT_IDLE_UNIQUE_END = 240
ANIME_ID_LOOP_IDLE_UNIQUE_BEGIN = 400
ANIME_ID_LOOP_IDLE_UNIQUE_END = 492
ANIME_ID_SEARCH_DEFAULT_BEGIN = 600
ANIME_ID_SEARCH_DEFAULT_END = 620
ANIME_ID_LISTEN_SOUND_BEGIN = 700
ANIME_ID_LISTEN_SOUND_END = 720
ANIME_ID_SEARCH_BATTLE_BEGIN = 400600
ANIME_ID_SEARCH_BATTLE_END = 400620
ANIME_ID_IDLE_UNIQUE_CAUTION_BEGIN = 200200
ANIME_ID_IDLE_UNIQUE_CAUTION_END = 200240
ANIME_ID_IDLE_UNIQUE_BATTLE_BEGIN = 400200
ANIME_ID_IDLE_UNIQUE_BATTLE_END = 400240
ANIME_ID_ATTACK_BEGIN = 3000
ANIME_ID_ATTACK_END = 3109
ANIME_ID_JUMP_ATTACK_BEGIN = 3200
ANIME_ID_JUMP_ATTACK_LOOP = 3201
ANIME_ID_JUMP_ATTACK_END = 3299
ANIME_ID_WALK_DEFAULT = 5000
ANIME_ID_RUN_DEFAULT = 5010
ANIME_ID_WALK_CAUTION_NO_BATTLE = 105000
ANIME_ID_RUN_CAUTION_NO_BATTLE = 105010
ANIME_ID_WALK_CAUTION_BATTLE = 205000
ANIME_ID_RUN_CAUTION_BATTLE = 205010
ANIME_ID_WALK_BATTLE = 405000
ANIME_ID_RUN_BATTLE = 405010
ANIME_ID_WALK_GUARD = 505000
ANIME_ID_RUN_GUARD = 505010
ANIME_ID_WALK_GENERAL_STANCE = 605000
ANIME_ID_RUN_GENERAL_STANCE = 605010
ANIME_ID_STEP_BEGIN = 5200
ANIME_ID_STEP_END = 5213
ANIME_ID_TURN = 5400
ANIME_ID_FALL_START_DEFAULT = 7000
ANIME_ID_FALL_START_UPWARD = 7100
ANIME_ID_FALL_START_DOWNWARD = 7200
ANIME_ID_FALL_START_TRUNK = 7600
ANIME_ID_FALLING_UPWARD = 7110
ANIME_ID_FALLING_DOWNWARD = 7210
ANIME_ID_FALLING_TRUNK = 7610
ANIME_ID_DEATH_LAND_DEFAULT = 7021
ANIME_ID_LAND_HEAVY = 7022
ANIME_ID_DEATH_LAND_UPWARD = 7121
ANIME_ID_DEATH_LAND_DOWNWARD = 7221
ANIME_ID_DEATH_LAND_THROW_DEF_BACK = 7321
ANIME_ID_DEATH_LAND_THROW_DEF_FRONT = 7421
ANIME_ID_DEATH_LAND_THROW_DEF_ANTI_AIR = 7521
ANIME_ID_TRUNK_COLLAPSE_LAND = 7620
ANIME_ID_DAMAGE_SMALL = 8000
ANIME_ID_DAMAGE_MIDDLE = 8010
ANIME_ID_DAMAGE_LARGE = 8020
ANIME_ID_DAMAGE_PUSH = 8050
ANIME_ID_DAMAGE_WEAK = 8060
ANIME_ID_DAMAGE_FLING = 8100
ANIME_ID_DAMAGE_UPPER = 8110
ANIME_ID_DAMAGE_BLOW = 8120
ANIME_ID_DAMAGE_LARGE_BLOW = 8130
ANIME_ID_DAMAGE_AERIAL_FRONT = 8140
ANIME_ID_DAMAGE_AERIAL_BACK = 8141
ANIME_ID_DAMAGE_LARGE_BLOW_AERIAL = 8150
ANIME_ID_SPECIAL_DAMAGE_RANDOM = 8200
ANIME_ID_SPECIAL_DAMAGE_LIGHTNING_START = 8210
ANIME_ID_SPECIAL_DAMAGE_LIGHTNING_LOOP = 8220
ANIME_ID_TRUNK_COLLAPSE_LIGHTNING_START = 8240
ANIME_ID_TRUNK_COLLAPSE_LIGHTNING_LOOP = 8250
ANIME_ID_TRUNK_COLLAPSE_FRONT = 8300
ANIME_ID_TRUNK_COLLAPSE_BACK = 8301
ANIME_ID_TRUNK_COLLAPSE_LARGE = 8310
ANIME_ID_TRUNK_COLLAPSE_AERIAL = 8320
ANIME_ID_TRUNK_COLLAPSE_BURST = 8330
ANIME_ID_JUSTGUARD_RIGHT_TO_LEFT = 8400
ANIME_ID_JUSTGUARD_LEFT_TO_RIGHT = 8401
ANIME_ID_SPECIALJUSTGUARD_RIGHT_TO_LEFT = 8402
ANIME_ID_SPECIALJUSTGUARD_LEFT_TO_RIGHT = 8403
ANIME_ID_SPECIALJUSTGUARD2_RIGHT_TO_LEFT = 8404
ANIME_ID_SPECIALJUSTGUARD2_LEFT_TO_RIGHT = 8405
ANIME_ID_SMALL_GUARD_RIGHT_TO_LEFT = 8500
ANIME_ID_SMALL_GUARD_LEFT_TO_RIGHT = 8501
ANIME_ID_SPECIALGUARD_RIGHT_TO_LEFT = 8502
ANIME_ID_SPECIALGUARD_LEFT_TO_RIGHT = 8503
ANIME_ID_SPECIALGUARD2_RIGHT_TO_LEFT = 8504
ANIME_ID_SPECIALGUARD2_LEFT_TO_RIGHT = 8505
ANIME_ID_LARGE_GUARD_RIGHT_TO_LEFT = 8510
ANIME_ID_LARGE_GUARD_LEFT_TO_RIGHT = 8511
ANIME_ID_KICK_GUARD_RIGHT_TO_LEFT = 8520
ANIME_ID_KICK_GUARD_LEFT_TO_RIGHT = 8521
ANIME_ID_GUARD_BREAK_LEFT = 8550
ANIME_ID_GUARD_BREAK_RIGHT = 8551
ANIME_ID_ATTACK_BOUND_RIGHT = 8600
ANIME_ID_ATTACK_BOUND_LEFT = 8601
ANIME_ID_ATTACK_BOUND_RIGHT_SPECIAL1 = 8602
ANIME_ID_ATTACK_BOUND_LEFT_SPECIAL1 = 8603
ANIME_ID_ATTACK_BOUND_RIGHT_SPECIAL2 = 8604
ANIME_ID_ATTACK_BOUND_LEFT_SPECIAL2 = 8605
ANIME_ID_EMPTY_STAMINA_ATTACK_BOUND_RIGHT = 8650
ANIME_ID_EMPTY_STAMINA_ATTACK_BOUND_LEFT = 8651
ANIME_ID_EMPTY_STAMINA_ATTACK_BOUND_AERIAL_RIGHT = 8660
ANIME_ID_EMPTY_STAMINA_ATTACK_BOUND_AERIAL_LEFT = 8661
ANIME_ID_ATTACK_NO_BOUND_RIGHT = 8700
ANIME_ID_ATTACK_NO_BOUND_LEFT = 8701
ANIME_ID_ATTACK_NO_BOUND_RIGHT_SPECIAL1 = 8702
ANIME_ID_ATTACK_NO_BOUND_LEFT_SPECIAL1 = 8703
ANIME_ID_ATTACK_NO_BOUND_RIGHT_SPECIAL2 = 8704
ANIME_ID_ATTACK_NO_BOUND_LEFT_SPECIAL2 = 8705
ANIME_ID_FIRE_REACTION = 8900
ANIME_ID_BLEND_DAMAGE_SMALL_FRONT = 9000
ANIME_ID_BLEND_DAMAGE_MIDDLE_FRONT = 9010
ANIME_ID_BLEND_DAMAGE_LARGE_FRONT = 9020
ANIME_ID_BLEND_DAMAGE_FIRE = 9200
ANIME_ID_ADD_BLEND_FRONT = 9500
ANIME_ID_ADD_BLEND_BACK = 9501
ANIME_ID_ADD_BLEND_LEFT = 9502
ANIME_ID_ADD_BLEND_RIGHT = 9503
ANIME_ID_PART_DAMAGE = 9510
ANIME_ID_PARRY_BOUND_ADD01 = 9600
ANIME_ID_GUARD_BOUND_ADD01 = 9700
ANIME_ID_NO_ADD = 9999
ANIME_ID_DEATH_VARIATION = 10000
ANIME_ID_DEATH_DEFAULT = 10000
ANIME_ID_DEATH_DEFAULT2 = 10010
ANIME_ID_DEATH_WEAK = 10060
ANIME_ID_DEATH_FLING = 10100
ANIME_ID_DEATH_UPPER = 10110
ANIME_ID_DEATH_BLAST = 10120
ANIME_ID_DEATH_UNIQUE_CASE = 10160
ANIME_ID_DEATH_FIRE = 10200
ANIME_ID_DEATH_LIGHTNING = 10210
ANIME_ID_DEATH_GHOST = 10220
ANIME_ID_DEATH_SLASH = 10230
ANIME_ID_DEATH_LIGHT_KNOCK = 10240
ANIME_ID_DEATH_STING = 10250
ANIME_ID_DEATH_HEAVY_KNOCK = 10260
ANIME_ID_DEATH_ANTI_GROUND = 10270
ANIME_ID_DEATH_ANTI_AIR = 10280
ANIME_ID_DEATH_LIGHT_SHOT = 10290
ANIME_ID_DEATH_HIDE = 10350
ANIME_ID_DEATH_BACK_REALITY = 10360
ANIME_ID_DEATH_SPECIAL_POISON = 10370
ANIME_ID_DEATH_AERIAL_FRONT = 10400
ANIME_ID_DEATH_AERIAL_BACK = 10401
ANIME_ID_DEATH_AERIAL_BLOW = 10410
ANIME_ID_RESURRECTION_IDLE_UPWARD = 10500
ANIME_ID_RESURRECTION_IDLE_DOWNWARD = 10510
ANIME_ID_RESURRECTION_START_UPWARD = 10600
ANIME_ID_RESURRECTION_START_DOWNWARD = 10610
ANIME_ID_THROW_DEF_BREAK = 12000
ANIME_ID_DEATH_THROW_BREAK = 12001
ANIME_ID_THROW_DEF_BREAK_FINISH = 12090
ANIME_ID_THROW_DEF_PARRY = 12100
ANIME_ID_THROW_DEF_PARRY_FIRST = 12110
ANIME_ID_DEATH_THROW_PARRY = 12111
ANIME_ID_THROW_DEF_PARRY_FINISH = 12190
ANIME_ID_THROW_DEF_BACK = 12200
ANIME_ID_DEATH_THROW_BACK = 12201
ANIME_ID_THROW_DEF_BACK_BLOOD_SMOKE = 12210
ANIME_ID_DEATH_THROW_BACK_BLOOD_SMOKE = 12211
ANIME_ID_THROW_DEF_BACK_MARIONETTE = 12220
ANIME_ID_THROW_DEF_BACK_ENCHANT = 12230
ANIME_ID_DEATH_THROW_BACK_ENCHANT = 12231
ANIME_ID_THROW_DEF_FALL = 12300
ANIME_ID_THROW_DEF_FALL_FIRST = 12310
ANIME_ID_DEATH_THROW_FALL = 12311
ANIME_ID_THROW_DEF_FALL_SECOND = 12320
ANIME_ID_THROW_DEF_NO_LIMIT_FALL = 12400
ANIME_ID_THROW_DEF_NO_LIMIT_FALL_FIRST = 12410
ANIME_ID_DEATH_THROW_NO_LIMIT_FALL = 12411
ANIME_ID_THROW_DEF_CROUCH_BACK = 12500
ANIME_ID_DEATH_THROW_CROUCH_BACK = 12501
ANIME_ID_THROW_DEF_WALL_PASTE_LEFT = 12600
ANIME_ID_DEATH_THROW_WALL_PASTE_LEFT = 12601
ANIME_ID_THROW_DEF_WALL_PASTE_RIGHT = 12700
ANIME_ID_DEATH_THROW_WALL_PASTE_RIGHT = 12701
ANIME_ID_THROW_DEF_HANG_BACK = 12800
ANIME_ID_THROW_DEF_SPECIAL = 12900
ANIME_ID_DEATH_THROW_SPECIAL = 12901
ANIME_ID_THROW_DEF_SPECIAL_B = 12950
ANIME_ID_DEATH_THROW_SPECIAL_B = 12951
ANIME_ID_THROW_DEF_HANG_FRONT = 13000
ANIME_ID_THROW_DEF_BREAKTHROUGH = 13100
ANIME_ID_THROW_DEF_BREAKTHROUGH_ATK = 13110
ANIME_ID_DEATH_THROW_BREAKTHROUGH_ATK = 13111
ANIME_ID_THROW_DEF_BREAKTHROUGH_JMP = 13120
ANIME_ID_THROW_DEF_BREAK_BACK = 13200
ANIME_ID_DEATH_THROW_BREAK_BACK = 13201
ANIME_ID_THROW_DEF_BREAK_BACK_ASSASSINATION = 13210
ANIME_ID_DEATH_THROW_BREAK_BACK_ASSASSINATION = 13211
ANIME_ID_THROW_DEF_BREAK_BACK_MARIONETTE = 13220
ANIME_ID_THROW_DEF_BREAK_BACK_ENCHANT = 13230
ANIME_ID_DEATH_THROW_BREAK_BACK_ENCHANT = 13231
ANIME_ID_THROW_DEF_BREAK_BACK_FINISH = 13290
ANIME_ID_THROW_DEF_ANTI_AIR = 13300
ANIME_ID_THROW_DEF_ANTI_AIR_FIRST = 13310
ANIME_ID_THROW_DEF_BREAK_FALL = 13400
ANIME_ID_THROW_DEF_BREAK_FALL_FIRST = 13410
ANIME_ID_DEATH_THROW_BREAK_FALL = 13411
ANIME_ID_THROW_DEF_KICK_BREAK = 13500
ANIME_ID_THROW_DEF_KICK_BREAK_FIRST = 13510
ANIME_ID_DEATH_THROW_KICK_BREAK = 13511
ANIME_ID_THROW_DEF_BREAK_WIRE = 13600
ANIME_ID_THROW_DEF_BREAK_WIRE_FIRST = 13610
ANIME_ID_DEATH_THROW_BREAK_WIRE = 13611
ANIME_ID_THROW_DEF_BREAK_WIRE_FINISH = 13690
ANIME_ID_THROW_DEF_FINISH = 13700
ANIME_ID_THROW_DEF_OVERLOOK = 13800
ANIME_ID_THROW_DEF_BREAK_KICK_FINISH = 14300
ANIME_ID_DEATH_START_LADDER = 19600
ANIME_ID_ONE_SHOT_EVENT_BEGIN = 20000
ANIME_ID_ONE_SHOT_EVENT_END = 20039
ANIME_ID_LOOP_EVENT_BEGIN = 21000
ANIME_ID_LOOP_EVENT_END = 21019
ANIME_ID_THROW_NEAR_REACTION = 20100
ANIME_ID_THROW_NEAR_REACTION_END = 20104
ANIME_ID_THROW_FAR_REACTION = 20105
ANIME_ID_THROW_FAR_REACTION_END = 20109
ANIME_ID_ASSASSINATION_BLOOD_REACTION = 20110
ANIME_ID_FIRE_FEAR_REACTION = 20130
ANIME_ID_HIDE_REACTION = 20140
ANIME_ID_BACK_REALITY_REACTION = 20150
ANIME_ID_SPECIAL_POISON_REACTION = 20160
ANIME_ID_FINGER_WHITSTLE_REACTION = 20170
ANIME_ID_GUARD_ATTACK_BEGIN = 503000
ANIME_ID_GUARD_ATTACK_END = 503009
ANIME_ID_GENERAL_STANCE_START_BEGIN = 401060
ANIME_ID_GENERAL_STANCE_START_END = 401064
ANIME_ID_GENERAL_STANCE_END_BEGIN = 601040
ANIME_ID_GENERAL_STANCE_END_END = 601044
ANIME_ID_GENERAL_STANCE_ATTACK_BEGIN = 603000
ANIME_ID_GENERAL_STANCE_ATTACK_END = 603009
ANIME_ID_GENERAL_LIP_SYNC = 41500
ANIME_ID_IDLE_UNIQUE_TO_IDLE = 1700
ANIME_ID_BRING_EST = 4600
EVE_COMMAND_ID__INIT_TO_DEATH = 100
EVE_COMMAND_ID__c1020_INIT_TO_EVENT_DEATH = 102000
EVE_COMMAND_ID__c1300_INIT_TO_EVENT_DEATH = 130000
EVE_COMMAND_ID__c1400_INIT_TO_EVENT_DEATH = 140000
EVE_COMMAND_ID__c5021_INIT_TO_EVENT_DEATH = 502100
EVE_COMMAND_ID__c7420_INIT_TO_EVENT_DEATH = 742000
EVE_COMMAND_ID__c7440_INIT_TO_EVENT_DEATH = 744000
EVE_COMMAND_ID__c7510_INIT_TO_EVENT_DEATH = 751000
EVE_COMMAND_ID__c7520_INIT_TO_EVENT_DEATH_00 = 752000
EVE_COMMAND_ID__c7520_INIT_TO_EVENT_DEATH_01 = 752001
EVE_SLOT_ID__THROW_TRANSITION = 1
EVE_SLOT_ID__DEATH_REPRODUCTION = 2
SP_EFFECT_STAND = 200010
SP_EFFECT_CROUCH = 200011
SP_EFFECT_FLIGHT = 200012
SP_EFFECT_REF_SPECIAL_POISON_DOT = 500
SP_EFFECT_REF_AI_DEFAULT = 1000000
SP_EFFECT_REF_AI_CAUTION_NO_BATTLE = 1000001
SP_EFFECT_REF_AI_CAUTION_BATTLE = 1000002
SP_EFFECT_REF_AI_BATTLE = 1000003
SP_EFFECT_REF_STAND = 1000010
SP_EFFECT_REF_CROUCH = 1000011
SP_EFFECT_REF_FLIGHT = 1000012
SP_EFFECT_REF_WEAPON_0 = 1000020
SP_EFFECT_REF_WEAPON_1 = 1000021
SP_EFFECT_REF_WEAPON_2 = 1000022
SP_EFFECT_REF_WEAPON_3 = 1000023
SP_EFFECT_REF_WEAPON_4 = 1000024
SP_EFFECT_REF_NO_FIRE_REACTION = 1000030
SP_EFFECT_REF_SPECIAL_POISON = 1000031
SP_EFFECT_REF_WOMAN_POISON = 1000032
SP_EFFECT_REF_FINGER_WHISTLE = 1000035
SP_EFFECT_REF_NO_FINGER_WHISTLE_REACTION = 1000036
SP_EFFECT_REF_FIRE_ACTION_ENABLE = 1000040
SP_EFFECT_REF_LIGHTNING_DAMAGE_ENABLE = 1000041
SP_EFFECT_REF_HIDE_ACTION = 1000042
SP_EFFECT_REF_BACK_REALITY = 1000043
SP_EFFECT_REF_NO_BURST_REACTION = 1000044
SP_EFFECT_REF_NO_ASH_BAG_REACTION = 1000045
SP_EFFECT_REF_LIGHTNING_DAMAGE = 1000050
SP_EFFECT_REF_LIGHTNING_LOOP_LIFE = 1000051
SP_EFFECT_REF_BURST_ENABLE = 1000055
SP_EFFECT_REF_BURST_ATTACK_NONCRETICAL = 1000056
SP_EFFECT_REF_BURST_ATTACK_CRETICAL = 1000057
SP_EFFECT_REF_ASH_BAG_ATTACK = 1000058
SP_EFFECT_REF_AERIAL_DAMAGE = 1000060
SP_EFFECT_REF_AERIAL_DAMAGE_TO_DIRECT_LOOP = 1000065
SP_EFFECT_REF_LANDING_DECISION = 1000070
SP_EFFECT_REF_NO_SPIN = 1000071
SP_EFFECT_REF_NO_QUICK_TURN = 1000072
SP_EFFECT_REF_NOT_FACE_ATTACKER = 1000080
SP_EFFECT_REF_BREAK_FACE_FRONT = 1000081
SP_EFFECT_REF_ENEMY_JUST_GUARD = 1000090
SP_EFFECT_REF_SPECIAL_GUARD = 1000100
SP_EFFECT_REF_SPECIAL_GUARD2 = 1000101
SP_EFFECT_REF_GUARD_TO_ADD_DAMAGE = 1000105
SP_EFFECT_REF_NO_DEAD = 1000110
SP_EFFECT_REF_NOT_TO_DEATH_ANIME = 1000111
SP_EFFECT_REF_RESURRECTION = 1000120
SP_EFFECT_REF_EXPLOSION = 1000121
SP_EFFECT_REF_RESURRECTION_ZOMBIE = 1000122
SP_EFFECT_REF_RESURRECTION_IDLE_DOWNWARD = 1000123
SP_EFFECT_REF_RESURRECTION_IDLE_UPWARD = 1000124
SP_EFFECT_REF_RESURRECTION_START = 1000125
SP_EFFECT_REF_NOT_RESURRECTION = 1000126
SP_EFFECT_REF_BURNING = 1000130
SP_EFFECT_REF_HEADWATER = 1000140
SP_EFFECT_REF_UNDERWATER = 1000141
SP_EFFECT_REF_BOTTOMWATER = 1000142
SP_EFFECT_REF_NO_FALL_PREVENTION_ASSIST = 1000150
SP_EFFECT_REF_SAME_THRWO_DEF = 1000160
SP_EFFECT_REF_SAME_THRWO_DEF_DEATH = 1000161
SP_EFFECT_REF_DISABLE_THROWN = 1000170
SP_EFFECT_REF_TO_DEATH_UNIQUE_CASE = 1000180
SP_EFFECT_REF_TO_DEATH_IDLE_UNIQUE_CASE = 1000190
SP_EFFECT_REF_JUMP_BEFORE = 1000210
SP_EFFECT_REF_WOMAN = 1000220
SP_EFFECT_REF_NO_ALL_REACTION = 1000230
SP_EFFECT_REF_NO_FIRE_FIAR_REACTION = 1000240
SP_EFFECT_REF_REACTION_SAFE_TIME = 1000250
SP_EFFECT_REF_NO_LIGHTNING_DAMAGE = 1000260
SP_EFFECT_REF_ENABLE_NOMAL_BACK_AND_SIDE_WALK = 1000300
SP_EFFECT_REF_DELAY_BGM_REQUEST = 1000350
SP_EFFECT_REF_ENABLE_WIRE_DAMAGE0 = 1000400
SP_EFFECT_REF_ENABLE_WIRE_DAMAGE1 = 1000401
SP_EFFECT_REF_ENABLE_WIRE_DAMAGE2 = 1000402
SP_EFFECT_REF_ENABLE_WIRE_DAMAGE3 = 1000403
SP_EFFECT_REF_ENABLE_WIRE_DAMAGE4 = 1000404
SP_EFFECT_REF_WIRE_ATTACK = 1000410
SP_EFFECT_REF_ASSASSINATION_BLOOD = 1000500
SP_EFFECT_REF_ENABLE_ROLLING = 1000420
SP_EFFECT_REF_DISABLE_ROLLING = 1000421
SP_EFFECT_REF_TO_DEATH_EVENT20000 = 1020000
SP_EFFECT_REF_1180_FALL_DISABLE_SIDE_WALK = 1118000
SP_EFFECT_REF_1130_FALL_START_DOWNWARD = 1113000
SP_EFFECT_REF_1130_FALL_START_UPWARD = 1113001
SP_EFFECT_REF_1130_NEAR_CLIFF = 1113020
SP_EFFECT_REF_1130_PERMISSION_FALL_FRONT = 1113030
SP_EFFECT_REF_1130_PERMISSION_FALL_BACK = 1113031
SP_EFFECT_REF_1400_IDENTIFY = 1140000
SP_EFFECT_REF_1470_IDENTIFY = 1147000
SP_EFFECT_REF_1500_UG_DAMAGE = 1150000
SP_EFFECT_REF_1510_SWITCH_GENERATE = 1151000
SP_EFFECT_REF_1550_SHIELD_TYPE = 1155000
SP_EFFECT_REF_5010_EVENT_TRANSITION = 1501000
SP_EFFECT_REF_5080_NO_BACK_MOVE = 1508000
SP_EFFECT_NO_DEAD = 143
SP_EFFECT_TYPE_DISABLE_EST = 154
TALK_REF_DISABLE_TALK = 0
TALK_REF_ENABLE_STEAL_INFO = 1000000
TALK_REF_BATTLE_STATE = 1000010
DOWNSIDE = 0
UPSIDE = 1
ENEMY = 0
PLAYER = 1
CONFLICT_DIST_CHR = 0.30000001192092896
CONFLICT_DIST_START = 1.5
CONFLICT_DIST_COAST = 3
LADDER_COMMAND_INVALID = -1
LADDER_COMMAND_UP = 0
LADDER_COMMAND_DOWN = 1
LADDER_ACTION_INVALID = -1
LADDER_ACTION_START_BOTTOM = 0
LADDER_ACTION_START_TOP = 1
LADDER_ACTION_UP_RIGHT = 2
LADDER_ACTION_UP_LEFT = 3
LADDER_ACTION_DOWN_RIGHT = 4
LADDER_ACTION_DOWN_LEFT = 5
LADDER_ACTION_END_TOP = 6
LADDER_ACTION_END_BOTTOM = 7
LADDER_ACTION_IDLE_RIGHT = 8
LADDER_ACTION_IDLE_LEFT = 9
LADDER_ACTION_ATTACK_UP_RIGHT = 10
LADDER_ACTION_ATTACK_UP_LEFT = 11
LADDER_ACTION_ATTACK_DOWN_RIGHT = 12
LADDER_ACTION_ATTACK_DOWN_LEFT = 13
LADDER_ACTION_COAST_START_RIGHT = 14
LADDER_ACTION_COAST_RIGHT = 15
LADDER_ACTION_COAST_STOP_RIGHT = 16
LADDER_ACTION_COAST_START_LEFT = 17
LADDER_ACTION_COAST_LEFT = 18
LADDER_ACTION_COAST_STOP_LEFT = 19
LADDER_ACTION_COAST_LANDING = 20
LADDER_ACTION_SMALL_DAMAGE = 21
LADDER_ACTION_LARGE_DAMAGE = 22
LADDER_HAND_LEFT = 0
LADDER_HAND_RIGHT = 1
LADDER_ATTACK_STAMINA_THRESHOLD = 50
LADDER_DAMAGE_STAMINA_THREAHOLD = 80
LADDER_ATTACK_STAMINA_CONSUME = -25
LADDER_SMALL_DAMAGE_STAMINA_CONSUME = -50
LADDER_LARGE_DAMAGE_STAMINA_CONSUME = -70
HEIGHT_TRANS_TO_LAND = 2
HEIGHT_TRANS_TO_HEAVY_LAND = 5
HEIGHT_FORCE_DEATH = 60
BEH_IDENTIFIER_THROW_NEAR_REACTION = 1
BEH_IDENTIFIER_THROW_FAR_REACTION = 2
BEH_IDENTIFIER_ASSASSINATION_BLOOD = 3
BEH_IDENTIFIER_BURST = 4
BEH_IDENTIFIER_FIRE_FEAR = 5
BEH_IDENTIFIER_BACK_REALITY = 6
BEH_IDENTIFIER_SPIN = 7
BEH_IDENTIFIER_KICK = 8
BEH_IDENTIFIER_ROLLING = 9
TALK_BEH_IDENTIFIER__NOT_TALKING = -1
TALK_BEH_IDENTIFIER__TALK_PLAY_00 = 0
TALK_BEH_IDENTIFIER__TALK_PLAY_01 = 1
TALK_BEH_IDENTIFIER__TALK_PLAY_02 = 2
TALK_BEH_IDENTIFIER__TALK_PLAY_03 = 3
TALK_BEH_IDENTIFIER__TALK_PLAY_04 = 4
TALK_BEH_IDENTIFIER__TALK_PLAY_05 = 5
TALK_BEH_IDENTIFIER__TALK_PLAY_06 = 6
TALK_BEH_IDENTIFIER__TALK_PLAY_07 = 7
TALK_BEH_IDENTIFIER__TALK_PLAY_08 = 8
TALK_BEH_IDENTIFIER__TALK_PLAY_09 = 9
TALK_BEH_IDENTIFIER__TALK_PLAY_10 = 10
TALK_BEH_IDENTIFIER__TALK_PLAY_11 = 11
TALK_BEH_IDENTIFIER__TALK_PLAY_12 = 12
TALK_BEH_IDENTIFIER__TALK_PLAY_13 = 13
TALK_BEH_IDENTIFIER__TALK_PLAY_14 = 14
TALK_BEH_IDENTIFIER__TALK_PLAY_15 = 15
TALK_BEH_IDENTIFIER__CONTINUE = 99
TALK_BEH_IDENTIFIER__NOT_PLAY = 100
move_table_battle = {{ANIME_ID_WALK_BATTLE, "W_WalkFrontBattle"}, {ANIME_ID_WALK_BATTLE + 1, "W_WalkBackBattle"}, {ANIME_ID_WALK_BATTLE + 2, "W_WalkLeftBattle"}, {ANIME_ID_WALK_BATTLE + 3, "W_WalkRightBattle"}, {ANIME_ID_RUN_BATTLE, "W_RunFrontBattle"}}
move_table_default = {{ANIME_ID_WALK_DEFAULT, "W_WalkFrontDefault"}, {ANIME_ID_WALK_DEFAULT + 1, "W_WalkBackDefault"}, {ANIME_ID_WALK_DEFAULT + 2, "W_WalkLeftDefault"}, {ANIME_ID_WALK_DEFAULT + 3, "W_WalkRightDefault"}, {ANIME_ID_RUN_DEFAULT, "W_RunFrontDefault"}}
move_table_guard = {{ANIME_ID_WALK_GUARD, "W_GuardWalkFront"}, {ANIME_ID_WALK_GUARD + 1, "W_GuardWalkBack"}, {ANIME_ID_WALK_GUARD + 2, "W_GuardWalkLeft"}, {ANIME_ID_WALK_GUARD + 3, "W_GuardWalkRight"}, {ANIME_ID_RUN_GUARD, "W_GuardRun"}}
move_table_general_stance = {{ANIME_ID_WALK_GENERAL_STANCE, "W_GeneralStanceWalkFront"}, {ANIME_ID_WALK_GENERAL_STANCE + 1, "W_GeneralStanceWalkBack"}, {ANIME_ID_WALK_GENERAL_STANCE + 2, "W_GeneralStanceWalkLeft"}, {ANIME_ID_WALK_GENERAL_STANCE + 3, "W_GeneralStancekRight"}, {ANIME_ID_RUN_GENERAL_STANCE, "W_GeneralStanceRunFront"}}
g_FrameCount = 0
g_DebugCounter = -1
g_PrevValue = 0
g_PrevValue2 = 0
g_NowPlayAnimeID = -1
g_AnimeFrameCount = -1
g_WeponType = 0
------------------------
-- Conditions 
-- env( <condition>, <args> )
-- *<args> are optional
------------------------
GetWeaponSwitchRequest = 104
GetCommandIDFromEvent = 105
GetAIActionType = 106
GetAIChainType = 107
GetChainEvadeRequest = 108
IsItemUseMenuOpen = 113
IsMagicUseMenuOpening = 114
IsItemUseMenuOpened = 115
IsMagicUseMenuOpened = 116
GetAIChainStepType = 118
GetTransitionToSpecialStayAnimID = 119
GetAIAtkCancelType = 120
GetWeaponCancelType = 121 -- args: <hand index>
IsWeaponCancelPossible = 122
GetAIDefenseCancelType = 123
GetAIVersusBackstabCancelType = 124
GetAIImmediateActionType = 125
IsFalling = 200
IsLanding = 201
GetReceivedDamageType = 202
IsNormalDmgPassThroughDuringThrow = 205
IsThrown = 206
GetWeaponSwitchState = 207
IsEquipmentSwitchPossible = 209
IsAnimCancelPossibleInAtkRelease = 210
GetLockRangeState = 212
GetLockAngleState = 213
IsChangeToDeflectAtk = 216
IsChangeToAfterParrySuccess = 217
IsHeavyAtkComboPossible = 220
GetReceivedDamageDirection = 222
GetFallHeight = 224
GetEquipWeaponCategory = 225 -- args: <hand index>
IsHoldingBow = 226
GetMagicAnimType = 227
GetItemAnimType = 231
IsMagicUseable = 232 -- args: <hand index>, <unknown index>
IsItemUseable = 233
IsPrecisionShoot = 234
IsFireDamaged = 235
GetDamageLevel = 236
GetGuardLevelAction = 237
IsNewLeftHandAtkFromStay = 238
IsParryFromIdle = 239
IsGuardFromIdle = 240
IsNewLeftHandAtkFromAtkCancel = 241
IsParryFromAtkCancel = 242
IsGuardFromAtkCancel = 243
IsTiedUp = 244
IsOutOfAmmo = 245 -- args: <slot index>
IsUseCatLanding = 246
GetHoverMoveState = 247
IsTrulyLanding = 248
IsRightHandMagic = 249
IsChangeToSpecialStayAnim = 250
GetSpecialStayAnimID = 251
AcquireSpecialDamageAnimationID = 252
IsRunTurnAnimPlaying = 253
IsGenerateAction = 254
GetSpecialStayCancelAnimID = 255
HasReceivedAnyDamage = 256
GetMoveAnimParamID = 257
GetGuardLevel = 258
IsRequestTurnAnimStart = 259
IsTurningWithAnim = 260
IsTargetFlying = 261
IsAbilityInsufficient = 262 -- args: <hand index>
GetEquipWeightRatioForFalling = 263
GetFlightMotionState = 264
GetIsWeakPoint = 265
GetLadderActionState = 267
IsCoopWait = 269
IsCoop = 270
IsSpecialTransitionPossible = 271
GetThrowAnimID = 273
IsOpponentDeadFromThrow = 274
HasThrowEnded = 275
IsThrowSelfDeath = 276
IsThrowSuccess = 277
GetGuardMotionCategory = 278 -- args: <hand index>
IsBeingThrown = 279
IsSelfThrow = 280
IsThrowDeathState = 281
GetNewLockState = 282
IsOnLadder = 283
GetPhysicalAttribute = 284
GetSpecialAttribute = 285
GetSpecialStayDeathAnimID = 286
HasReceivedAnyDamage_AnimEnd = 287
IsStop = 290
IsSomeoneOnLadder = 291 -- args: <check distance>, <unknown index>
IsSomeoneUnderLadder = 292 -- args: <check distance>, <unknown index>
GetLadderHandState = 293
DoesLadderHaveCharacters = 294 -- args: <check distance>, <unknown index>, <unknown index>
IsLadderRightHandStayState = 295
IsDescendingToFloor = 296
IsInputDirectionMatch = 297
IsSpecialTransition2Possible = 298
IsVersusHolyDamage = 299
IsGeneralAnimCancelPossible = 300
GetEventEzStateFlag = 301 -- args: <EzState command id>
IsLadderEventEnd = 302
IsReachBottomOfLadder = 303
IsReachTopOfLadder = 304
GetStateChangeType = 305 -- args: <state change id>
IsOnLastRungOfLadder = 306
IsAnimEndBySkillCancel = 313
IsHamariFallDeath = 315 -- args: <unknown index>
IsClient = 316
IsSlope = 317
IsSpecialTurning = 320
GetIntValueForTest = 321
IsObjActInterpolatedMotion = 322
GetObjActTargetDirection = 323
GetObjActRemainingInterpolateTime = 324
IsGap = 325
GetWeaponID = 326 -- args: <hand index>
IsMovingLaterally = 327
IsNet = 328
HasBrokenSA = 329
IsEmergencyQuickTurnAllowed = 330
IsDoubleChantPossible = 331
IsAnimOver = 332
GetDT = 333
GetBehaviorID = 334 -- args: <hand index>
IsTwoHandPossible = 335 -- args: <hand index>
IsPartDamageAdditiveBlendInvalid = 336
IsThrowPosRealign = 337
GetBoltLoadingState = 338 -- args: <slot index>
IsAnimEnd = 339 -- args: <unknown index>
IsTwinSwords = 340 -- args: <hand index>
GetTurnAngleForDelayedTurn = 341
GetThrowDefenseCount = 342
IsEmergencyEvasionPossible = 343 -- args: <unknown index>
HasEnoughArtsPoints = 344 -- args: <button index>, <hand index>
GetEquipWeaponSpecialCategoryNumber = 345 -- args: <hand index>
CheckForEventAnimPlaybackRequest = 346
IsFemale = 347
GetDelayTurnAngleDifference = 348
IsDamageMotionOff = 349
HasReachedStatsForWeapon = 350 -- args: <hand index>
UpperArmControlOuterAngle = 351
UpperArmControlTopAndBottomAngle = 352
CompleteLadderSlideDown = 353
GetLadderRungCount = 354
GetNumberOfRungsBelowOnLadder = 355
GetBowAndArrowSlot = 356
GetWeaponStorageSpotType = 357 -- args: <hand index>
GetStayAnimCategory = 358
IsEquipmentMenuOpen = 360
GetRemainingArrowCount = 361
GetHP = 1000
GetStamina = 1001
IsGhost = 1002
GetRandomInt = 1003
IsCOMPlayer = 1007
GetAITargetAwareState = 1008
IsAIChangeToAwareState = 1009
GetAITargetAwareStatePreviousFrame = 1010
GetTestDamageAnimID = 1100
IsInvincibleDebugMode = 1101
WasGameLaunchedInPGTestMode = 1102
GetGestureRequestNumber = 1104
IsStayState = 1105
ActionRequest = 1106 -- args: <action arm index>
ActionCancelRequest = 1107 -- args: <action arm index>
ActionDuration = 1108 -- args: <action arm index>
HasActionRequest = 1109
MovementRequest = 1110
MovementRequestDuration = 1111
HasThrowRequest = 1112
IsGuardCancelPossible = 1113
DoesAnimExist = 1114 -- args: <anim id>, *<anim id>
GetAIMovementType = 1115
GetSpEffectID = 1116
IsConversationEnd = 1117
IsLocked = 1118
GetAtkDirection = 1119
GetPartGroup = 1120
GetKnockbackDistance = 1121
IsMoveCancelPossible = 2000
GetSpecialMovementType = 2002
GetGeneralTAEFlag = 2003 -- args: <flag>
IsSwingHitTarget = 2004
GetMaxStamina = 2010
GetGeneralMSBParameter = 2011
IsHitWall = 2012
GetMP = 2016
IsCeremonyComplete = 2017
IsCeremonyInterrupt = 2018            
IsWirePossible = 3000
GetHorizontalSpeed = 3002
GetVerticalSpeed = 3003
IsWallDirectionInput = 3007
IsDebugDash = 3008
IsDockingTargetSet = 3009
IsOnEdgeOfDockingTarget = 3011
IsCrouchRequest = 3014
GetDockingEdgeRequest = 3017
GetGuardBounceBehavior = 3018
GetJustGuardBounceBehavior = 3019
IsWallJumpContact = 3020
GetDirectionFromCharacterPoint = 3021
GetAngleDifFromCharacterPoint = 3022
GetHorizontalDistOfCharacterPoint = 3023
GetVerticalDistOfCharacterPoint = 3024
IsSwimContact = 3025
Test_IsInContact = 3026
GetNextWeaponType = 3027
IsTrueDeath = 3028
IsDockingEdgeInvalid = 3029
ActionGuideDisplay = 3030
IsThrowActive = 3031
GetDamageDirection = 3032
ActionUnlocked = 3033
IsActiveActionPossible = 3034
IsUserJumpRequest = 3035
IsSpEffectBehaviorRefID = 3036
IsCrouchReleasePossible = 3037
IsDiveAllowed = 3038
IsDiveToSwimAllowed = 3039
GetMapViewType = 3040
GetStatusActivationTime = 3041
IsWallHangPossible = 3043
IsWallHangGroundPossible = 3044
IsWallHangAirPossible = 3045
GetDockingEdgeVariationID = 3046
IsCornerOfDockingTarget = 3047
IsHangLeftOutterCornerPossible = 3048
IsHangRightOutterCornerPossible = 3049
IsHangAndClimbPossible = 3050
IsObstacleAtDockingStart = 3051
IsObstacleAtDockingEnd = 3052
GetTalkParamBehaviorRefID = 3053
GetTalkEzStateRefID = 3054
GetSaveState = 3055
GetGuardDeflectBehavior = 3056
GetJustGuardDeflectBehavior = 3057
LipSyncRequest = 3058
IsHangLeftInnerCornerPossible = 3059
IsHangRightInnerCornerPossible = 3060
GetSafePositionReturnState = 3061
GetThrowingAIState = 3062
GetVariableChangeValue = 3063
SpEffectActiveBehaviorRefID_Life = 3064
------------------------
-- Commands
-- act( <command>, <args> )
-- *<args> are optional
------------------------
ChangeGeneralAnim = 0
ChangeUpperBodyAnim = 1
ChangeStayAnim = 2
ChangeGeneralAnimCategorized = 3 -- args: <anim category>, <anim id>, <layer index>, <blend>, <isLoop>
ChangeUpperBodyAnimCategorized = 4
ChangeGeneralAnimAdditiveCategorized = 5
ChangeUpperBodyAnimAdditiveCategorized = 6
ChangeGeneralAnimCategorizedMatchPlaybackTime = 7
ChangeUpperBodyAnimCategorizedMatchPlaybackTime = 8
SetAnimIDOffset = 9
SetAdditiveBlendAnimation = 10
SetAdditiveBlendAnimationSlotted = 11
ChangeBlendAnimationCategorized = 12
ChangeUpperAndLowerBodySyncedAnimCategorized = 13
SetActiveActionState = 100
SwitchMotion = 101 -- args: <bool>
SetAllowedThrowAtkType = 102 -- args: <index>
SetAllowedThrowDefenseType = 103 -- args: <index>
SwitchEquippedWeapon = 104
SetReadyForAtkFinish = 105
SetEquipmentChangeable = 106
SetUnableToFall = 107
SendMessageIDToEvents = 108 -- args: <event call>
SetAtkType = 109 -- args: <index>
SetStaminaRecoveryDisabled = 110
SetAIBusyDoingAction = 111
BowTurn = 112
SetBowStance = 113
SetPreciseAimMode = 114
SetSpecialMovement = 115
SetIsWeaponChanging = 116
SetIsItemInUse = 117 -- args: <bool>
SetIsMagicInUse = 118 -- args: <bool>
SetHoverState = 119
RemoveBinoculars = 120
ChangeToSpecialStay = 121
SetIsHeadTurnPossible = 122
OpenMenuWhenUsingItem = 123
OpenMenuWhenUsingMagic = 124
BlowDamageTurn = 125
SetDeathStay = 126 -- args: <bool>
CloseMenuWhenUsingItem = 127
CloseMenuWhenUsingMagic = 128
DisallowAdditiveTurning = 129 -- args: <bool>
ChangeFlightStatus = 130
ShowFixedYAxisDirectionDisplay = 131
WhiffPossibility = 132
SetLadderActionState = 133 -- args: <index>
SetInsufficientStrengthAnimID = 134
ForceCancelThrowAnim = 135
SetThrowState = 136 -- args: <index>
StartSlidingDownLadder = 137
SetIsEventActionPossible = 138 -- args: <bool>
RequestThrowAnimInterrupt = 139
SetHandStateOfLadder = 140
SetDamageAnimType = 141 -- args: <index>
DownwardSlideTurn = 142 -- args: <index>
InterruptAttack = 143
SkyDeathWarp = 144
ClearSlopeInfo = 145
ReceiveStateInput = 146
SetIsEquipmentChangeableFromMenu = 147
SetHavokVariable = 148 -- args: <string>, <value>
AimAtSelfPosition = 149
SetIsItemAnimationPlaying = 150
DoAIReplanningAtCancelTiming = 151
DenyEventAnimPlaybackRequest = 152
InvokeBackstab = 153
WeaponParameterReference = 154 -- args: <hand index>
AINotifyAttackType = 155 -- args: <index>
SetAutoCaptureTarget = 156
ClearAutoCaptureTarget = 157
RequestAIReplanning = 158
TurnTowardAttacker = 159
SetThrowPossibilityState_Attacker = 160 -- args: <index>
SetThrowPossibilityState_Defender = 161 -- args: <index>
MarkOfGreedyPersonSlipDamageDisable = 162
StateIdentifier = 200
AddHP = 1000 -- args: <value>
AdjustStamina = 1001 -- args: <value>
SyncAtInit_Active = 1100
SyncAtInit_Passive = 1101
SetStealthState = 2000
SetMovementScaleMult = 2001 -- args: <value>
AddSpEffect = 2002 -- args: <id>
SetFastStealthThrowEnabled = 2003
SetTurnSpeed = 2004
SetCeremonyState = 2005
SetDamageMotionBlendRatio = 2006 -- args: <value>
SetForceTurnTarget = 2007
ForceTurn = 2008
SpecialTurn = 2009
SetInSpecialGuard = 2010
SetWeaponCancelType = 2011 -- args: <index>
SetIsPreciseShootingPossible = 2012
ChooseBowAndArrowSlot = 2013 -- args: <slot index>
Set4DirectionMovementThreshold = 2014 -- args: <value>, <value>, <value>, <value>
LockonSystemUnableToTurnAngle = 2015 -- args: <angle>, <angle>
ReserveArtsPointsUse = 2016 -- args: <button index>, <hand index>
SetArtsPointFEDisplayState = 2017
LockonFixedAngleCancel = 2018
TurnToLockonTargetImmediately = 2019 -- args: <value>
SetSpecialInterpolation = 2020 -- args: <value>, <bool>
LadderSlideDownCancel = 2021
DisableMagicIDSwitching = 2022
DisableToolIDSwitching = 2023
UseItemDecision = 2024
ExecuteAirControl = 3002
FaceWireClosestPoint = 3003
AddSpEffectToLockOnTarget = 3004
StartDocking = 3005
EndDocking = 3006
DockingReqest = 3007
SuperArmorReset = 3009
Underwater = 3011
SwitchBGMState = 3014
FaceParriedOpponent = 3015
FallPreventionAssist = 3016
WireObstacleJudgment = 3017
WireAction = 3018
LockHomingAction = 3019
AllowAniPlaybackSpeedChange = 3020
AIHomingOnTarget = 3021
SetUserEdgeHoming = 3022
SetMovePrecalculationAniID = 3023
SetCancel = 3024
TurnToDirection = 3025
WallCoverJudgmentStart = 3026
GroundHangJudgmentStart = 3027
AirHangJudgmentStart = 3028
SetTalkAnimState = 3029
ActionGuideDisplay = 3030
UpdateLvl30Disabled = 3031
SuctionDisabled = 3032
SetTurningDisabled = 3033
ActionButtonExecutable = 3034
WireEdgesPrioritize = 3035
DisableFloorAdhesionDuringMove = 3036
OnWater = 3037
DisplayProstheticDisallowed = 3039
DisplaySpecialSwordsDisallowed = 3039
DisplayNinjaArtsDisallowed = 3040
ResetWarpTypeInputAccept = 3041
Test_AddAirHorizontalStickDirMove = 3900
Test_AddAirHorizontalDirMoveAmount = 3901
Test_ResetAirVerticalMoveAmount = 3902
Test_ResetAirMoveAmount = 3903
DebugLogOutput = 9000
Test_SpEffectDelete = 9001
Test_SpEffectTypeSpecifyDelete = 9002
MarkerStart = 9003
MarkerEnd = 9004
Wait = 9100
ResetInputQueue = 9101
SetIsEventAnim = 9102
SetAIAttackState = 9103 -- args: <index>
SetIsTurnAnimInProgress = 9104
SetTurnAnimCorrectionRate = 9105 -- args: <value>

function IncNum(num)
    local str = nil
    if num < 10 then
        str = "Debug0"
    else
        str = "Debug"
    end
    local vec = GetVariable(str .. num)
    vec[0] = vec[0] + 1
    vec[1] = g_FrameCount
    SetVariable(str .. num, vec)
    
end

function DebugPrint(pos, val)
    local str = nil
    if pos < 10 then
        str = "Debug0"
    else
        str = "Debug"
    end
    vector = GetVariable(str .. pos)
    vector[0] = val
    vector[1] = g_FrameCount
    SetVariable(str .. pos, vector)
    
end

function Fire(event)
    SetVariable("IsAffectedSpin", false)
    hkbFireEvent(event)
    
end

function SetVariable(name, val)
    act(SetHavokVariable, name, val)
    
end

function GetVariable(name)
    local f5_local0 = hkbGetVariable(name)
    return f5_local0
    
end

function Replanning()
    act(DoAIReplanningAtCancelTiming)
    
end

function CallActionState(action_type)
    act(SetAIAttackState, action_type)
    
end

function CallActionStateReaction(base_action_type)
    local action_type = base_action_type
    if base_action_type == ANIME_ID_THROW_NEAR_REACTION then
        local offset = GetVariable("IndexThrowNearReaction")
        action_type = action_type + offset
    elseif base_action_type == ANIME_ID_THROW_FAR_REACTION then
        local offset = GetVariable("IndexThrowFarReaction")
        action_type = action_type + offset
    end
    act(SetAIAttackState, action_type)
    
end

function IsExistAnime(id)
    return env(DoesAnimExist, id)
    
end

function IsInvalidDamage(damaged_any, damage_level, damage_type, pre_sp_damage)
    local ret = FALSE
    if damaged_any == FALSE and damage_level <= DAMAGE_LEVEL_NONE and (damage_type == DAMAGE_TYPE_NONE or damage_type == DAMAGE_TYPE_WEAK_FRAME) and pre_sp_damage == SP_DAMAGE_NONE then
        ret = TRUE
    end
    return ret
    
end

function IsDamagedAerial()
    local ret = FALSE
    if env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_AERIAL_DAMAGE) == TRUE or env(IsLanding) == FALSE then
        ret = TRUE
    end
    return ret
    
end

function LandingDecision(land_type)
    if LAND_JUMPATTACK0 <= land_type and land_type <= LAND_JUMPATTACK9 then
        if env(IsTrulyLanding) == TRUE and env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_LANDING_DECISION) ~= TRUE then
            return TRUE
        else
            return FALSE
        end
    elseif env(IsLanding) == TRUE and env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_LANDING_DECISION) ~= TRUE then
        return TRUE
    else
        return FALSE
    end
    
end

function FallPreventionAssist()
    if env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_NO_FALL_PREVENTION_ASSIST) ~= TRUE then
        act(FallPreventionAssist, 1)
    end
    
end

function IdleTransition()
    UpdateAIState()
    if env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_CROUCH) == TRUE then
        Fire("W_IdleDefault")
        return TRUE
    end
    local ai_state = GetVariable("IndexAiState")
    if ai_state == AI_STATE_BATTLE then
        Fire("W_IdleBattle")
        return TRUE
    elseif ai_state == AI_STATE_CAUTION_NO_BATTLE then
        Fire("W_IdleCautionNoBattle")
        return TRUE
    elseif ai_state == AI_STATE_CAUTION_BATTLE then
        Fire("W_IdleCautionBattle")
        return TRUE
    else
        Fire("W_IdleDefault")
        return TRUE
    end
    
end

function UpdateAIState()
    if env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_AI_DEFAULT) == TRUE then
        SetVariable("IndexAiState", AI_STATE_DEFAULT)
    elseif env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_AI_CAUTION_NO_BATTLE) == TRUE then
        SetVariable("IndexAiState", AI_STATE_CAUTION_NO_BATTLE)
    elseif env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_AI_CAUTION_BATTLE) == TRUE then
        SetVariable("IndexAiState", AI_STATE_CAUTION_BATTLE)
    elseif env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_AI_BATTLE) == TRUE then
        SetVariable("IndexAiState", AI_STATE_BATTLE)
    end
    
end

function GetSpDamage()
    local ret = SP_DAMAGE_NONE
    if env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_WIRE_ATTACK) == TRUE and (env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_ENABLE_WIRE_DAMAGE0) == TRUE or env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_ENABLE_WIRE_DAMAGE1) == TRUE or env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_ENABLE_WIRE_DAMAGE2) == TRUE or env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_ENABLE_WIRE_DAMAGE3) == TRUE or env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_ENABLE_WIRE_DAMAGE4) == TRUE) then
        ret = SP_DAMAGE_WIRE
    end
    if env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_NO_ALL_REACTION) == FALSE then
        if env(GetBehaviorID, BEH_IDENTIFIER_THROW_NEAR_REACTION) == TRUE and env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_AI_BATTLE) == TRUE then
            ret = SP_DAMAGE_THROW_NEAR_REACTION
        end
        if env(GetBehaviorID, BEH_IDENTIFIER_THROW_FAR_REACTION) == TRUE and env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_AI_BATTLE) == TRUE then
            ret = SP_DAMAGE_THROW_FAR_REACTION
        end
        if env(GetBehaviorID, BEH_IDENTIFIER_ROLLING) == TRUE and env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_ENABLE_ROLLING) == TRUE and env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_DISABLE_ROLLING) == FALSE then
            ret = SP_DAMAGE_PUSH
        end
        if env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_ASSASSINATION_BLOOD) == TRUE then
            ret = SP_DAMAGE_ASSASSINATION_BLOOD
        end
        if env(GetPhysicalAttribute) == DAMAGE_PHYSICAL_BURST and env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_NO_BURST_REACTION) == FALSE and (env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_BURST_ENABLE) == TRUE and env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_BURST_ATTACK_CRETICAL) == TRUE or env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_BURST_ENABLE) == FALSE and env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_BURST_ATTACK_NONCRETICAL) == TRUE) then
            ret = SP_DAMAGE_BURST
        end
        if env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_ASH_BAG_ATTACK) == TRUE and env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_NO_ASH_BAG_REACTION) == FALSE then
            ret = SP_DAMAGE_ASH_BAG
        end
        if env(GetSpecialAttribute) == DAMAGE_ELEMENT_FIRE and env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_FIRE_ACTION_ENABLE) == TRUE and env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_NO_FIRE_FIAR_REACTION) == FALSE then
            ret = SP_DAMAGE_FIRE
        end
        if (env(GetSpecialAttribute) == DAMAGE_ELEMENT_LIGHTNING or env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_LIGHTNING_DAMAGE) == TRUE) and env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_LIGHTNING_DAMAGE_ENABLE) == TRUE and env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_NO_LIGHTNING_DAMAGE) == FALSE then
            ret = SP_DAMAGE_LIGHTNING
        end
        if env(GetBehaviorID, BEH_IDENTIFIER_FIRE_FEAR) == TRUE and env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_NO_FIRE_FIAR_REACTION) == FALSE and env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_FIRE_ACTION_ENABLE) == TRUE then
            ret = SP_DAMAGE_FIRE_FEAR
        end
        if env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_FINGER_WHISTLE) == TRUE and env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_NO_FINGER_WHISTLE_REACTION) == FALSE then
            ret = SP_DAMAGE_FINGER_WHISTLE
        end
        if env(GetStatusActivationTime, STATUS_BURNING) == TRUE and IsExistAnime(ANIME_ID_FIRE_REACTION) == TRUE and env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_NO_FIRE_REACTION) == FALSE then
            ret = SP_DAMAGE_BURNING
        end
        if env(GetStatusActivationTime, STATUS_SPECIAL_POISON) == TRUE and env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_WOMAN) == TRUE and env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_WOMAN_POISON) == TRUE then
            ret = SP_DAMAGE_POISON_REACTION
        end
        if env(GetBehaviorID, BEH_IDENTIFIER_SPIN) == TRUE and env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_HIDE_ACTION) == TRUE then
            ret = SP_DAMAGE_HIDE_ACTION
        end
        if env(GetBehaviorID, BEH_IDENTIFIER_BACK_REALITY) == TRUE and env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_BACK_REALITY) == TRUE then
            ret = SP_DAMAGE_BACK_REALITY
        end
    end
    return ret
    
end

function SetNowPlayAnimeID(anime_id)
    g_NowPlayAnimeID = anime_id
    
end

function IsEnabledTransitionRank(cur_state_rank, destination_state_rank)
    local ret = FALSE
    if destination_state_rank == DAMAGE_TRANSITION_RANK__0 then
        ret = TRUE
    elseif destination_state_rank == DAMAGE_TRANSITION_RANK__1 then
        if cur_state_rank ~= DAMAGE_TRANSITION_RANK__0 then
            ret = TRUE
        end
    elseif destination_state_rank == DAMAGE_TRANSITION_RANK__2 then
        if cur_state_rank ~= DAMAGE_TRANSITION_RANK__0 and cur_state_rank ~= DAMAGE_TRANSITION_RANK__1 and cur_state_rank ~= DAMAGE_TRANSITION_RANK__2 then
            ret = TRUE
        end
    elseif destination_state_rank == DAMAGE_TRANSITION_RANK__3 then
        if cur_state_rank ~= DAMAGE_TRANSITION_RANK__0 and cur_state_rank ~= DAMAGE_TRANSITION_RANK__1 and cur_state_rank ~= DAMAGE_TRANSITION_RANK__2 then
            ret = TRUE
        end
    elseif destination_state_rank == DAMAGE_TRANSITION_RANK__4 and cur_state_rank ~= DAMAGE_TRANSITION_RANK__0 and cur_state_rank ~= DAMAGE_TRANSITION_RANK__1 and cur_state_rank ~= DAMAGE_TRANSITION_RANK__2 and cur_state_rank ~= DAMAGE_TRANSITION_RANK__3 then
        ret = TRUE
    end
    return ret
    
end

function GetNowPlayAnimeID()
    return g_NowPlayAnimeID
    
end

function ResetNowPlayAnimeID()
    g_NowPlayAnimeID = ANIME_ID_INVALID
    
end

function InitializeAnimeFrameCounter()
    g_AnimeFrameCount = 0
    
end

function UpdateAnimeFrameCounter()
    g_AnimeFrameCount = g_AnimeFrameCount + 1
    
end

function FinalizeAnimeFrameCounter()
    g_AnimeFrameCount = -1
    
end

function GetAnimeFrameCounter()
    return g_AnimeFrameCount
    
end

function IsDead()
    local hp = env(GetHP)
    local damage_type = env(GetReceivedDamageType)
    if damage_type == DAMAGE_TYPE_DEATH or damage_type == DAMAGE_TYPE_DROWN_DEATH or hp <= 0 then
        return TRUE
    end
    if hp <= 1 and env(GetStateChangeType, SP_EFFECT_NO_DEAD) == TRUE and env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_NOT_TO_DEATH_ANIME) == FALSE then
        return TRUE
    end
    return FALSE
    
end

function GetStaminaRatio()
    return env(GetStamina) / env(GetMaxStamina)
    
end

function FaceAttacker(rad)
    if env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_NOT_FACE_ATTACKER) ~= TRUE then
        act(TurnTowardAttacker, rad)
    end
    
end

function GetRandomIndex(base_anim_id, min, max, offset, index_start, index_name, is_selectable_cur_index)
    local msg_array = {}
    local cur_index_val = GetVariable(index_name)
    local is_expect_cur_index = false
    local ret = INVALID
    for anim_offset = min, max, 1 do
        local anim_offset = anim_offset * offset
        local anim_id = base_anim_id + anim_offset
        if IsExistAnime(anim_id) == FALSE then
        elseif is_selectable_cur_index == false and cur_index_val == anim_offset + index_start then
            is_expect_cur_index = true
        else
            table.insert(msg_array, anim_offset + index_start)
        end
    end
    if #msg_array > 0 then
        local rand = math.random(1, #msg_array)
        ret = msg_array[rand]
    elseif is_expect_cur_index then
        ret = cur_index_val
    end
    return ret
    

end

function SetThrowFlag_old(attack, defense)
    
end

function SetThrowInvalid()
    
end

function SetThrowDefInvalid()
    
end

function ResetThrowInvalid()
    
end

function LadderSendCommand(command)
    if command ~= LADDER_COMMAND_INVALID then
        act(SendMessageIDToEvents, command)
    end
    
end

function LadderSetActionState(state)
    act(SetLadderActionState, state)
    
end

function ConvergeValue(target_val, cur_val, max_inc, max_dec)
    local ret = target_val
    if target_val == cur_val then
        return ret
    end
    local dT = GetDeltaTime()
    local gap = math.abs(target_val - cur_val)
    local add_val = 0
    if cur_val < target_val then
        add_val = math.abs(max_inc * dT)
    elseif target_val < cur_val then
        add_val = -1 * math.abs(max_dec * dT)
    end
    if add_val < gap then
        ret = cur_val + add_val
        if add_val > 0 then
            if target_val < ret then
                ret = target_val
            end
        elseif ret < target_val then
            ret = target_val
        end
    end
    return ret
    
end

function GetDeltaTime()
    return env(GetDT) / 1000
    
end

function ExecActiveTransition(is_on_cancel, style, move_type, enable_turn)
    if ExecAIAction(is_on_cancel, style) == TRUE then
        return TRUE
    end
    if enable_turn == TRUE and ExecTurn(is_on_cancel, style) == TRUE then
        return TRUE
    end
    if is_on_cancel == TRUE and env(IsMoveCancelPossible) == FALSE then
        return FALSE
    end
    if env(IsActiveActionPossible) == TRUE then
        SetVariable("PhysicsJumped", false)
        Fire("W_JumpMoveStart")
        act(SetUserEdgeHoming, 0)
        act(UpdateLvl30Disabled)
        return TRUE
    end
    if env(IsCrouchRequest) == TRUE then
        if env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_CROUCH) ~= TRUE then
            Fire("W_StandtoCrouch")
            return TRUE
        end
    elseif env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_CROUCH) == TRUE then
        Fire("W_CrouchtoStand")
        return TRUE
    end
    if ExecMove(move_type, is_on_cancel) == TRUE then
        return TRUE
    end
    return FALSE
    
end

function ExecAIAction(is_on_cancel, style)
    local action_type = env(GetAIActionType)
    if is_on_cancel == TRUE then
        local action_type_combo = env(GetAIChainType)
        local action_type_cancel = env(GetAIAtkCancelType)
        local action_type_step = env(GetAIChainStepType)
        local action_type_endure = env(GetAIDefenseCancelType)
        local action_type_back = env(GetAIVersusBackstabCancelType)
        local action_type_reaction = env(GetAIImmediateActionType)
        if action_type_endure > 0 then
            action_type = action_type_endure
        elseif action_type_back > 0 then
            action_type = action_type_back
        elseif action_type_reaction > 0 then
            action_type = action_type_reaction
        elseif action_type_combo > 0 then
            action_type = action_type_combo
        elseif action_type_cancel > 0 then
            action_type = action_type_cancel
        elseif action_type_step > 0 then
            action_type = action_type_step
        else
            return FALSE
        end
    elseif action_type <= 0 then
        if style == STYLE_DEFAULT or style == STYLE_GUARD_BOUND then
            return FALSE
        else
            if style == STYLE_GUARD then
                Fire("W_GuardEnd")
            elseif style == STYLE_GENERAL_STANCE then
                Fire("W_GeneralStanceEnd601040")
            end
            return TRUE
        end
    end
    if ExecAIStep(action_type) == TRUE then
        return TRUE
    end
    if ExecAIGeneralStance(action_type, style) == TRUE then
        return TRUE
    end
    if ExecAIGuard(action_type, style) == TRUE then
        return TRUE
    end
    if ExecAIAttack(action_type, style) == TRUE then
        UpdateAIState()
        return TRUE
    end
    return FALSE
    
end

function ExecAIAttack(action_type, style)
    if action_type == ANIME_ID_TRANS_TO_DEFAULT_FROM_DEFAULT then
        act(SwitchBGMState)
        Fire("W_TransToDefaultFromDefault")
        CallActionState(ANIME_ID_TRANS_TO_DEFAULT_FROM_DEFAULT)
        return TRUE
    elseif action_type == ANIME_ID_TRANS_TO_CAUTION_NO_BATTLE_SMALL_FROM_DEFAULT then
        act(SwitchBGMState)
        Fire("W_TransToCautionNoBattleSmallFromDefault")
        CallActionState(ANIME_ID_TRANS_TO_CAUTION_NO_BATTLE_SMALL_FROM_DEFAULT)
        return TRUE
    elseif action_type == ANIME_ID_TRANS_TO_CAUTION_NO_BATTLE_BIG_FROM_DEFAULT then
        act(SwitchBGMState)
        Fire("W_TransToCautionNoBattleBigFromDefault")
        CallActionState(ANIME_ID_TRANS_TO_CAUTION_NO_BATTLE_BIG_FROM_DEFAULT)
        return TRUE
    elseif action_type == ANIME_ID_TRANS_TO_CAUTION_BATTLE_FROM_DEFAULT then
        act(SwitchBGMState)
        Fire("W_TransToCautionBattleFromDefault")
        CallActionState(ANIME_ID_TRANS_TO_CAUTION_BATTLE_FROM_DEFAULT)
        return TRUE
    elseif action_type == ANIME_ID_TRANS_TO_DEFAULT_FROM_CAUTION_NO_BATTLE then
        act(SwitchBGMState)
        Fire("W_TransToDefaultFromCautionNoBattle")
        CallActionState(ANIME_ID_TRANS_TO_DEFAULT_FROM_CAUTION_NO_BATTLE)
        return TRUE
    elseif action_type == ANIME_ID_TRANS_TO_BATTLE_FROM_DEFAULT then
        act(SwitchBGMState)
        Fire("W_TransToBattleFromDefault")
        CallActionState(ANIME_ID_TRANS_TO_BATTLE_FROM_DEFAULT)
        return TRUE
    elseif action_type == ANIME_ID_TRANS_TO_BATTLE_FROM_CAUTION_NO_BATTLE then
        act(SwitchBGMState)
        Fire("W_TransToBattleFromCautionNoBattle")
        CallActionState(ANIME_ID_TRANS_TO_BATTLE_FROM_CAUTION_NO_BATTLE)
        return TRUE
    elseif action_type == ANIME_ID_TRANS_TO_DEFAULT_FROM_CAUTION_BATTLE then
        act(SwitchBGMState)
        Fire("W_TransToDefaultFromCautionBattle")
        CallActionState(ANIME_ID_TRANS_TO_DEFAULT_FROM_CAUTION_BATTLE)
        return TRUE
    elseif action_type == ANIME_ID_TRANS_TO_BATTLE_FROM_CAUTION_BATTLE then
        act(SwitchBGMState)
        Fire("W_TransToBattleFromCautionBattle")
        CallActionState(ANIME_ID_TRANS_TO_BATTLE_FROM_CAUTION_BATTLE)
        return TRUE
    elseif action_type == ANIME_ID_TRANS_TO_DEFAULT_FROM_BATTLE then
        act(SwitchBGMState)
        Fire("W_TransToDefaultFromBattle")
        CallActionState(ANIME_ID_TRANS_TO_DEFAULT_FROM_BATTLE)
        return TRUE
    elseif action_type == ANIME_ID_TRANS_TO_CAUTION_BATTLE_FROM_BATTLE then
        act(SwitchBGMState)
        Fire("W_TransToCautionBattleFromBattle")
        CallActionState(ANIME_ID_TRANS_TO_CAUTION_BATTLE_FROM_BATTLE)
        return TRUE
    elseif action_type == ANIME_ID_TRANS_TO_BATTLE_FROM_BATTLE then
        act(SwitchBGMState)
        Fire("W_TransToBattleFromBattle")
        CallActionState(ANIME_ID_TRANS_TO_BATTLE_FROM_BATTLE)
        return TRUE
    end
    if action_type >= ANIME_ID_ATTACK_BEGIN and action_type <= ANIME_ID_ATTACK_END then
        ExecAttack(action_type)
        return TRUE
    end
    if action_type >= ANIME_ID_JUMP_ATTACK_BEGIN and action_type <= ANIME_ID_JUMP_ATTACK_END then
        ExecJumpAttack(action_type)
        return TRUE
    end
    if action_type >= ANIME_ID_ONE_SHOT_IDLE_UNIQUE_BEGIN and action_type <= ANIME_ID_ONE_SHOT_IDLE_UNIQUE_END then
        ExecIdleUniqueDefault(action_type)
        return TRUE
    end
    if action_type >= ANIME_ID_LOOP_IDLE_UNIQUE_BEGIN and action_type <= ANIME_ID_LOOP_IDLE_UNIQUE_END then
        ExecIdleUniqueDefault(action_type)
        return TRUE
    end
    if action_type >= ANIME_ID_IDLE_UNIQUE_CAUTION_BEGIN and action_type <= ANIME_ID_IDLE_UNIQUE_CAUTION_END then
        ExecIdleUniqueCaution(action_type)
        return TRUE
    end
    if action_type >= ANIME_ID_IDLE_UNIQUE_BATTLE_BEGIN and action_type <= ANIME_ID_IDLE_UNIQUE_BATTLE_END then
        ExecIdleUniqueBattle(action_type)
        return TRUE
    end
    if action_type >= ANIME_ID_SEARCH_DEFAULT_BEGIN and action_type <= ANIME_ID_SEARCH_DEFAULT_END then
        ExecSearchDefault(action_type)
        return TRUE
    end
    if action_type >= ANIME_ID_LISTEN_SOUND_BEGIN and action_type <= ANIME_ID_LISTEN_SOUND_END then
        ExecListenSound(action_type)
        return TRUE
    end
    if action_type >= ANIME_ID_SEARCH_BATTLE_BEGIN and action_type <= ANIME_ID_SEARCH_BATTLE_END then
        ExecSearchBattle(action_type)
        return TRUE
    end
    if action_type >= ANIME_ID_ONE_SHOT_EVENT_BEGIN and action_type <= ANIME_ID_ONE_SHOT_EVENT_END then
        ExecEventAction(action_type)
        return TRUE
    end
    if action_type >= ANIME_ID_THROW_NEAR_REACTION and action_type <= ANIME_ID_THROW_NEAR_REACTION_END then
        CallActionStateReaction(ANIME_ID_THROW_NEAR_REACTION)
        local index = action_type % ANIME_ID_THROW_NEAR_REACTION
        SetVariable("IndexThrowNearReaction", index)
        Fire("W_ThrowNearReaction")
        return TRUE
    end
    if action_type >= ANIME_ID_THROW_FAR_REACTION and action_type <= ANIME_ID_THROW_FAR_REACTION_END then
        CallActionStateReaction(ANIME_ID_THROW_FAR_REACTION)
        local index = action_type % ANIME_ID_THROW_FAR_REACTION
        SetVariable("IndexThrowFarReaction", index)
        Fire("W_ThrowFarReaction")
        return TRUE
    end
    return FALSE
    
end

function ExecAIStep(action_type)
    if ANIME_ID_STEP_BEGIN <= action_type and action_type <= ANIME_ID_STEP_END then
        ExecStep(action_type)
        return TRUE
    end
    return FALSE
    
end

function ExecAIGuard(action_type, style)
    if ANIME_ID_GUARD_ATTACK_BEGIN <= action_type and action_type <= ANIME_ID_GUARD_ATTACK_END then
        Fire("W_GuardAttack" .. action_type)
        return TRUE
    end
    if action_type ~= ACTION_TYPE_GUARD then
        return FALSE
    end
    if style == STYLE_GUARD or style == STYLE_GUARD_BOUND then
        return FALSE
    elseif style == STYLE_GENERAL_STANCE then
        Fire("W_GeneralStanceEnd601040")
        return TRUE
    end
    local move_speed_level = GetVariable("MoveSpeedLevel")
    if move_speed_level > 0 then
        local i = GetMoveDir(move_speed_level)
        if i >= MOVE_TYPE_RUN_LEFT then
            return FALSE
        end
        local anim_id = move_table_guard[i][1]
        if IsExistAnime(anim_id) == FALSE then
            return FALSE
        end
    end
    Fire("W_GuardStart")
    return TRUE
    
end

function ExecAIGeneralStance(action_type, style)
    if ANIME_ID_GENERAL_STANCE_START_BEGIN <= action_type and action_type <= ANIME_ID_GENERAL_STANCE_START_END then
        if style == STYLE_GENERAL_STANCE then
            Fire("W_GeneralStanceEnd601040")
            return TRUE
        else
            Fire("W_GeneralStanceStart" .. action_type)
            CallActionState(action_type)
            return TRUE
        end
    end
    if action_type >= ANIME_ID_GENERAL_STANCE_ATTACK_BEGIN and action_type <= ANIME_ID_GENERAL_STANCE_ATTACK_END then
        if style ~= STYLE_GENERAL_STANCE then
            Fire("W_GeneralStanceStart401060")
            return TRUE
        else
            Fire("W_GeneralStanceAttack" .. action_type)
            CallActionState(action_type)
            return TRUE
        end
    end
    if action_type >= ANIME_ID_GENERAL_STANCE_END_BEGIN and action_type <= ANIME_ID_GENERAL_STANCE_END_END then
        if style ~= STYLE_GENERAL_STANCE then
            Fire("W_GeneralStanceStart401060")
            return TRUE
        else
            Fire("W_GeneralStanceEnd" .. action_type)
            CallActionState(action_type)
            return TRUE
        end
    end
    if action_type > 0 and action_type ~= ACTION_TYPE_GENERAL_STANCE and style == STYLE_GENERAL_STANCE then
        Fire("W_GeneralStanceEnd601040")
        return TRUE
    end
    if action_type ~= ACTION_TYPE_GENERAL_STANCE then
        return FALSE
    end
    if style == STYLE_GENERAL_STANCE then
        return FALSE
    elseif style == STYLE_GUARD then
        Fire("W_GuardEnd")
        return TRUE
    end
    local move_speed_level = GetVariable("MoveSpeedLevel")
    if move_speed_level > 0 then
        local i = GetMoveDir(move_speed_level)
        local anim_id = move_table_general_stance[i][1]
        if IsExistAnime(anim_id) == FALSE then
            return FALSE
        end
    end
    Fire("W_GeneralStanceStart401060")
    return TRUE
    
end

function ExecEventTrandition()
    local event_id = env(GetCommandIDFromEvent, EVE_SLOT_ID__THROW_TRANSITION)
    if event_id == 20200 then
        act(SetThrowState, THROW_STATE_NONE)
        Replanning()
        Fire("W_Event20200")
        return TRUE
    elseif event_id == 20000 then
        act(SetThrowState, THROW_STATE_NONE)
        Replanning()
        Fire("W_Event20000")
        return TRUE
    elseif event_id == 506000 then
        act(SetThrowState, THROW_STATE_NONE)
        Replanning()
        Fire("W_Event20005")
        return TRUE
    elseif event_id == 20010 then
        act(SetThrowState, THROW_STATE_NONE)
        Replanning()
        Fire("W_Event20010")
        return TRUE
    elseif event_id == 20020 then
        act(SetThrowState, THROW_STATE_NONE)
        Replanning()
        Fire("W_Event20020")
        return TRUE
    elseif event_id == 21000 then
        act(SetThrowState, THROW_STATE_NONE)
        Replanning()
        Fire("W_Event21000")
        return TRUE
    end
    return FALSE
    
end

function ExecAttack(action_number)
    if action_number == 3015 and env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_1400_IDENTIFY) == TRUE then
        act(SwitchBGMState)
    end
    Fire("W_Attack" .. action_number)
    CallActionState(action_number)
    
end

function ExecJumpAttack(action_number)
    Fire("W_JumpAttack" .. action_number)
    act(AIHomingOnTarget, 0)
    SetVariable("PhysicsJumped", false)
    CallActionState(action_number)
    
end

function ExecIdleUniqueDefault(action_number)
    Fire("W_IdleUniqueDefault" .. action_number)
    CallActionState(action_number)
    
end

function ExecIdleUniqueCaution(action_number)
    Fire("W_IdleUniqueCaution" .. action_number)
    CallActionState(action_number)
    
end

function ExecIdleUniqueBattle(action_number)
    Fire("W_IdleUniqueBattle" .. action_number)
    CallActionState(action_number)
    
end

function ExecSearchDefault(action_number)
    Fire("W_SearchDefault" .. action_number)
    CallActionState(action_number)
    
end

function ExecListenSound(action_number)
    act(SwitchBGMState)
    Fire("W_ListenSound" .. action_number)
    CallActionState(action_number)
    
end

function ExecSearchBattle(action_number)
    Fire("W_SearchBattle" .. action_number)
    CallActionState(action_number)
    
end

function ExecEventAction(action_number)
    Fire("W_Event" .. action_number)
    CallActionState(action_number)
    
end

function ExecReaction(action_number)
    Fire("W_Reaction" .. action_number)
    CallActionState(action_number)
    
end

function ExecStep(action_number)
    Fire("W_Step" .. action_number)
    CallActionState(action_number)
    
end

function ExecTurn(is_on_cancel, style)
    if is_on_cancel == TRUE and env(IsMoveCancelPossible) == FALSE then
        return FALSE
    end
    if env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_NO_QUICK_TURN) == TRUE then
        return FALSE
    end
    local turn_angle = GetVariable("TurnAngle")
    if math.abs(turn_angle) <= 0 then
        return FALSE
    end
    local is_emergency_turn = env(IsEmergencyQuickTurnAllowed)
    if math.abs(turn_angle) < 45 and is_emergency_turn == FALSE then
        return FALSE
    end
    local dir = INVALID
    local correction_factor = 0
    if math.abs(turn_angle) < 67.5 then
        if turn_angle < 0 then
            dir = INDEX_TURN_DIRECTION_LEFT90
            correction_factor = 90
        else
            dir = INDEX_TURN_DIRECTION_RIGHT90
            correction_factor = 90
        end
    elseif math.abs(turn_angle) < 135 then
        if turn_angle < 0 then
            dir = INDEX_TURN_DIRECTION_LEFT90
        else
            dir = INDEX_TURN_DIRECTION_RIGHT90
        end
        correction_factor = 90
    else
        if turn_angle < 0 then
            dir = INDEX_TURN_DIRECTION_LEFT180
        else
            dir = INDEX_TURN_DIRECTION_RIGHT180
        end
        correction_factor = 180
    end
    act(SetTurnAnimCorrectionRate, correction_factor)
    act(SetIsTurnAnimInProgress)
    UpdateAIState()
    local event = "W_Turn"
    local action_type = env(GetAIActionType)
    local ai_state = GetVariable("IndexAiState")
    if action_type == ACTION_TYPE_GUARD then
        event = event .. "Guard"
    elseif action_type == ACTION_TYPE_GENERAL_STANCE then
        event = "W_GeneralStanceTrun"
    elseif ai_state == AI_STATE_DEFAULT or env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_FLIGHT) == TRUE or env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_CROUCH) == TRUE then
        event = event .. "Default"
    elseif ai_state == AI_STATE_CAUTION_NO_BATTLE then
        event = event .. "CautionNoBattle"
    elseif ai_state == AI_STATE_CAUTION_BATTLE then
        event = event .. "CautionBattle"
    elseif ai_state == AI_STATE_BATTLE then
        event = event .. "Battle"
    end
    if dir == INDEX_TURN_DIRECTION_LEFT90 then
        event = event .. "_Left90"
    elseif dir == INDEX_TURN_DIRECTION_RIGHT90 then
        event = event .. "_Right90"
    elseif dir == INDEX_TURN_DIRECTION_LEFT180 then
        event = event .. "_Left180"
    elseif dir == INDEX_TURN_DIRECTION_RIGHT180 then
        event = event .. "_Right180"
    elseif dir == INDEX_TURN_DIRECTION_LEFT45 then
        event = event .. "_Left45"
    elseif dir == INDEX_TURN_DIRECTION_RIGHT45 then
        event = event .. "_Right45"
    end
    Fire(event)
    return TRUE
    
end

function ExecMove(move_type, is_on_cancel)
    local move_speed_level = GetVariable("MoveSpeedLevel")
    if move_speed_level <= 0 then
        return FALSE
    end
    if env(IsMovingLaterally) == TRUE then
        if move_type == MOVE_TYPE_PARALLEL then
            return FALSE
        end
        Fire("W_ParallelMove")
        return TRUE
    end
    local move_dir = GetMoveDir(move_speed_level)
    if move_dir == move_type then
        return FALSE
    end
    local action_type = env(GetAIActionType)
    local event = ""
    local hit_move_type = MOVE_TYPE_NONE
    if action_type == ACTION_TYPE_GUARD then
        if move_dir == MOVE_TYPE_RUN_FRONT then
            if IsExistAnime(ANIME_ID_RUN_GUARD) == TRUE then
                event = "W_GuardRun"
                hit_move_type = MOVE_TYPE_RUN_FRONT
            end
        elseif move_dir == MOVE_TYPE_WALK_FRONT then
            if IsExistAnime(ANIME_ID_WALK_GUARD) == TRUE then
                event = "W_GuardWalkFront"
                hit_move_type = MOVE_TYPE_WALK_FRONT
            end
        elseif move_dir == MOVE_TYPE_WALK_BACK then
            if IsExistAnime(ANIME_ID_WALK_GUARD + 1) == TRUE then
                event = "W_GuardWalkBack"
                hit_move_type = MOVE_TYPE_WALK_BACK
            end
        elseif move_dir == MOVE_TYPE_WALK_LEFT then
            if IsExistAnime(ANIME_ID_WALK_GUARD + 2) == TRUE then
                event = "W_GuardWalkLeft"
                hit_move_type = MOVE_TYPE_WALK_LEFT
            end
        elseif move_dir == MOVE_TYPE_WALK_RIGHT and IsExistAnime(ANIME_ID_WALK_GUARD + 3) == TRUE then
            event = "W_GuardWalkRight"
            hit_move_type = MOVE_TYPE_WALK_RIGHT
        end
    elseif action_type == ACTION_TYPE_GENERAL_STANCE then
        if move_dir == MOVE_TYPE_RUN_FRONT then
            if IsExistAnime(ANIME_ID_RUN_GENERAL_STANCE) == TRUE then
                event = "W_GeneralStanceRunFront"
                hit_move_type = MOVE_TYPE_RUN_FRONT
            end
        elseif move_dir == MOVE_TYPE_WALK_FRONT then
            if IsExistAnime(ANIME_ID_WALK_GENERAL_STANCE) == TRUE then
                event = "W_GeneralStanceWalkFront"
                hit_move_type = MOVE_TYPE_WALK_FRONT
            end
        elseif move_dir == MOVE_TYPE_WALK_BACK then
            if IsExistAnime(ANIME_ID_WALK_GENERAL_STANCE + 1) == TRUE then
                event = "W_GeneralStanceWalkBack"
                hit_move_type = MOVE_TYPE_WALK_BACK
            end
        elseif move_dir == MOVE_TYPE_WALK_LEFT then
            if IsExistAnime(ANIME_ID_WALK_GENERAL_STANCE + 2) == TRUE then
                event = "W_GeneralStanceWalkLeft"
                hit_move_type = MOVE_TYPE_WALK_LEFT
            end
        elseif move_dir == MOVE_TYPE_WALK_RIGHT and IsExistAnime(ANIME_ID_WALK_GENERAL_STANCE + 3) == TRUE then
            event = "W_GeneralStanceWalkRight"
            hit_move_type = MOVE_TYPE_WALK_RIGHT
        end
    else
        UpdateAIState()
        local sp_state = MOVE_STAND
        local ai_state = GetVariable("IndexAiState")
        if env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_CROUCH) == TRUE then
            sp_state = MOVE_CROUCH
        elseif env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_FLIGHT) == TRUE then
            sp_state = MOVE_FLIGHT
        end
        if ai_state == AI_STATE_DEFAULT or sp_state > MOVE_STAND then
            if move_dir == MOVE_TYPE_RUN_FRONT then
                if IsExistAnime(ANIME_ID_RUN_DEFAULT) == TRUE then
                    event = "W_RunFrontDefault"
                    hit_move_type = MOVE_TYPE_RUN_FRONT
                else
                    event = "W_WalkFrontDefault"
                    hit_move_type = MOVE_TYPE_WALK_FRONT
                end
            elseif sp_state == MOVE_CROUCH then
                if IsExistAnime(1005000) == TRUE then
                    event = "W_WalkFrontDefault"
                    hit_move_type = MOVE_TYPE_WALK_FRONT
                end
            elseif env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_ENABLE_NOMAL_BACK_AND_SIDE_WALK) == TRUE then
                if move_dir == MOVE_TYPE_WALK_FRONT then
                    if IsExistAnime(ANIME_ID_WALK_DEFAULT) == TRUE then
                        event = "W_WalkFrontDefault"
                        hit_move_type = MOVE_TYPE_WALK_FRONT
                    else
                        event = "W_RunFrontDefault"
                        hit_move_type = MOVE_TYPE_WALK_FRONT
                    end
                elseif move_dir == MOVE_TYPE_WALK_BACK then
                    if IsExistAnime(ANIME_ID_WALK_DEFAULT + 1) == TRUE then
                        event = "W_WalkBackDefault"
                        hit_move_type = MOVE_TYPE_WALK_BACK
                    end
                elseif move_dir == MOVE_TYPE_WALK_LEFT then
                    if IsExistAnime(ANIME_ID_WALK_DEFAULT + 2) == TRUE then
                        event = "W_WalkLeftDefault"
                        hit_move_type = MOVE_TYPE_WALK_LEFT
                    end
                elseif move_dir == MOVE_TYPE_WALK_RIGHT and IsExistAnime(ANIME_ID_WALK_DEFAULT + 3) == TRUE then
                    event = "W_WalkRightDefault"
                    hit_move_type = MOVE_TYPE_WALK_RIGHT
                end
            elseif IsExistAnime(ANIME_ID_WALK_DEFAULT) == TRUE then
                event = "W_WalkFrontDefault"
                hit_move_type = MOVE_TYPE_WALK_FRONT
            else
                event = "W_RunFrontDefault"
                hit_move_type = MOVE_TYPE_WALK_FRONT
            end
        elseif ai_state == AI_STATE_CAUTION_NO_BATTLE then
            if move_dir == MOVE_TYPE_RUN_FRONT then
                if IsExistAnime(ANIME_ID_RUN_CAUTION_NO_BATTLE) == TRUE then
                    event = "W_RunFrontCautionNoBattle"
                    hit_move_type = MOVE_TYPE_RUN_FRONT
                else
                    event = "W_WalkFrontCautionNoBattle"
                    hit_move_type = MOVE_TYPE_WALK_FRONT
                end
            elseif move_dir == MOVE_TYPE_WALK_FRONT then
                if IsExistAnime(ANIME_ID_WALK_CAUTION_NO_BATTLE) == TRUE then
                    event = "W_WalkFrontCautionNoBattle"
                    hit_move_type = MOVE_TYPE_WALK_FRONT
                else
                    event = "W_RunFrontCautionNoBattle"
                    hit_move_type = MOVE_TYPE_RUN_FRONT
                end
            elseif move_dir == MOVE_TYPE_WALK_BACK and IsExistAnime(ANIME_ID_WALK_CAUTION_NO_BATTLE + 1) == TRUE then
                event = "W_WalkBackCautionNoBattle"
                hit_move_type = MOVE_TYPE_WALK_BACK
            end
        elseif ai_state == AI_STATE_CAUTION_BATTLE then
            if move_dir == MOVE_TYPE_RUN_FRONT then
                if IsExistAnime(ANIME_ID_RUN_CAUTION_BATTLE) == TRUE then
                    event = "W_RunFrontCautionBattle"
                    hit_move_type = MOVE_TYPE_RUN_FRONT
                else
                    event = "W_WalkFrontCautionBattle"
                    hit_move_type = MOVE_TYPE_WALK_FRONT
                end
            elseif move_dir == MOVE_TYPE_WALK_FRONT then
                if IsExistAnime(ANIME_ID_WALK_CAUTION_BATTLE) == TRUE then
                    event = "W_WalkFrontCautionBattle"
                    hit_move_type = MOVE_TYPE_WALK_FRONT
                else
                    event = "W_RunFrontCautionBattle"
                    hit_move_type = MOVE_TYPE_RUN_FRONT
                end
            elseif move_dir == MOVE_TYPE_WALK_BACK and IsExistAnime(ANIME_ID_WALK_CAUTION_BATTLE + 1) == TRUE then
                event = "W_WalkBackCautionBattle"
                hit_move_type = MOVE_TYPE_WALK_BACK
            end
        elseif ai_state == AI_STATE_BATTLE then
            if move_dir == MOVE_TYPE_RUN_FRONT then
                if IsExistAnime(ANIME_ID_RUN_BATTLE) == TRUE then
                    event = "W_RunFrontBattle"
                    hit_move_type = MOVE_TYPE_RUN_FRONT
                else
                    event = "W_WalkFrontBattle"
                    hit_move_type = MOVE_TYPE_WALK_FRONT
                end
            elseif move_dir == MOVE_TYPE_WALK_FRONT then
                if IsExistAnime(ANIME_ID_WALK_BATTLE) == TRUE then
                    event = "W_WalkFrontBattle"
                    hit_move_type = MOVE_TYPE_WALK_FRONT
                else
                    event = "W_RunFrontBattle"
                    hit_move_type = MOVE_TYPE_RUN_FRONT
                end
            elseif move_dir == MOVE_TYPE_WALK_BACK then
                if IsExistAnime(ANIME_ID_WALK_BATTLE + 1) == TRUE then
                    event = "W_WalkBackBattle"
                    hit_move_type = MOVE_TYPE_WALK_BACK
                end
            elseif move_dir == MOVE_TYPE_RUN_LEFT then
                if IsExistAnime(ANIME_ID_RUN_BATTLE + 2) == TRUE then
                    event = "W_RunLeftBattle"
                    hit_move_type = MOVE_TYPE_RUN_LEFT
                elseif IsExistAnime(ANIME_ID_WALK_BATTLE + 2) == TRUE then
                    event = "W_WalkLeftBattle"
                    hit_move_type = MOVE_TYPE_WALK_LEFT
                end
            elseif move_dir == MOVE_TYPE_RUN_RIGHT then
                if IsExistAnime(ANIME_ID_RUN_BATTLE + 3) == TRUE then
                    event = "W_RunRightBattle"
                    hit_move_type = MOVE_TYPE_RUN_RIGHT
                elseif IsExistAnime(ANIME_ID_WALK_BATTLE + 3) == TRUE then
                    event = "W_WalkRightBattle"
                    hit_move_type = MOVE_TYPE_WALK_RIGHT
                end
            elseif move_dir == MOVE_TYPE_WALK_LEFT then
                if IsExistAnime(ANIME_ID_WALK_BATTLE + 2) == TRUE then
                    event = "W_WalkLeftBattle"
                    hit_move_type = MOVE_TYPE_WALK_LEFT
                elseif IsExistAnime(ANIME_ID_RUN_BATTLE + 2) == TRUE then
                    event = "W_RunLeftBattle"
                    hit_move_type = MOVE_TYPE_RUN_LEFT
                end
            elseif move_dir == MOVE_TYPE_WALK_RIGHT then
                if IsExistAnime(ANIME_ID_WALK_BATTLE + 3) == TRUE then
                    event = "W_WalkRightBattle"
                    hit_move_type = MOVE_TYPE_WALK_RIGHT
                elseif IsExistAnime(ANIME_ID_RUN_BATTLE + 3) == TRUE then
                    event = "W_RunRightBattle"
                    hit_move_type = MOVE_TYPE_RUN_RIGHT
                end
            end
        end
    end
    if hit_move_type == MOVE_TYPE_NONE then
        return FALSE
    end
    if move_type == hit_move_type then
        return FALSE
    end
    Fire(event)
    return TRUE
    
end

function GetMoveDir(move_speed_level)
    local move_angle = GetVariable("MoveAngle")
    local sp_state = MOVE_STAND
    local ai_state = GetVariable("IndexAiState")
    if env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_CROUCH) == TRUE then
        sp_state = MOVE_CROUCH
    elseif env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_FLIGHT) == TRUE then
        sp_state = MOVE_FLIGHT
    end
    if env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_5080_NO_BACK_MOVE) == TRUE then
        if move_speed_level > 0.75 and sp_state == MOVE_STAND then
            return MOVE_TYPE_RUN_FRONT
        else
            return MOVE_TYPE_WALK_FRONT
        end
    end
    if math.abs(move_angle) <= 45 then
        if move_speed_level > 0.75 and sp_state == MOVE_STAND then
            return MOVE_TYPE_RUN_FRONT
        else
            return MOVE_TYPE_WALK_FRONT
        end
    elseif move_angle >= 45 and move_angle <= 135 then
        if move_speed_level > 0.75 and sp_state == MOVE_STAND and ai_state == AI_STATE_BATTLE and IsExistAnime(ANIME_ID_RUN_BATTLE + 3) == TRUE then
            return MOVE_TYPE_RUN_RIGHT
        else
            return MOVE_TYPE_WALK_RIGHT
        end
    elseif move_angle >= -135 and move_angle <= -45 then
        if move_speed_level > 0.75 and sp_state == MOVE_STAND and ai_state == AI_STATE_BATTLE and IsExistAnime(ANIME_ID_RUN_BATTLE + 2) == TRUE then
            return MOVE_TYPE_RUN_LEFT
        else
            return MOVE_TYPE_WALK_LEFT
        end
    else
        return MOVE_TYPE_WALK_BACK
    end
    
end

function ExecStop()
    local move_speed_level = GetVariable("MoveSpeedLevel")
    if move_speed_level > 0 then
        return FALSE
    end
    local action_type = env(GetAIActionType)
    if action_type == ACTION_TYPE_GUARD then
        Fire("W_GuardIdle")
        return TRUE
    elseif action_type == ACTION_TYPE_GENERAL_STANCE then
        Fire("W_GeneralStanceIdle")
        return TRUE
    else
        IdleTransition()
        return TRUE
    end
    
end

function ExecPassiveTransition(land_type, fall_type, transition_rank)
    if GetVariable("IsAffectedSpin") then
        act(SetTurningDisabled)
    end
    if env(HasThrowRequest) == TRUE then
        if env(GetThrowAnimID) == ANIME_ID_THROW_DEF_ANTI_AIR and LandingDecision(land_type) ~= FALSE then
            act(SkyDeathWarp, 211)
        end
        return TRUE
    end
    if ExecDeath(land_type) == TRUE then
        return TRUE
    end
    if env(CheckForEventAnimPlaybackRequest) == TRUE then
        SetVariable("IsAffectedSpin", false)
        return TRUE
    end
    if ExecDamage(transition_rank) == TRUE then
        return TRUE
    end
    if ExecFallStart(fall_type) == TRUE then
        return TRUE
    end
    return FALSE
    
end

function ExecTalkTransition(anim_id)
    local talk_ref_Id = env(GetTalkParamBehaviorRefID)
    if talk_ref_Id == TALK_BEH_IDENTIFIER__NOT_TALKING or talk_ref_Id ~= GetVariable("TalkPlayPrevID") then
        SetVariable("IsDoneTalkPlayOneshot", false)
    end
    SetVariable("TalkPlayPrevID", talk_ref_Id)
    if ExecTalkTransitionIndividual(anim_id, talk_ref_Id) == TRUE then
        return TRUE
    end
    return FALSE
    
end

function ExecDeath(land_type)
    local anim_id = INVALID
    local event = ""
    if env(GetBehaviorID, BEH_IDENTIFIER_SPIN) == TRUE and IsExistAnime(ANIME_ID_DEATH_HIDE) == TRUE and env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_HIDE_ACTION) == TRUE then
        anim_id = ANIME_ID_DEATH_HIDE
        event = "W_DeathStartHide"
    elseif env(GetBehaviorID, BEH_IDENTIFIER_BACK_REALITY) == TRUE and env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_BACK_REALITY) == TRUE and (IsExistAnime(ANIME_ID_DEATH_BACK_REALITY) == TRUE or IsExistAnime(ANIME_ID_DEATH_BACK_REALITY + 1) == TRUE) then
        local index = GetRandomIndex(ANIME_ID_DEATH_BACK_REALITY, 0, 1, 1, 0, "IndexDeathStartBackReality", true)
        SetVariable("IndexDeathStartBackReality", index)
        anim_id = ANIME_ID_DEATH_BACK_REALITY + index
        event = "W_DeathStartBackReality"
    else
        if IsDead() == FALSE then
            return FALSE
        end
        local damage_level = env(GetDamageLevel)
        local damage_type = env(GetReceivedDamageType)
        local damage_physical_type = env(GetPhysicalAttribute)
        local damage_special_type = env(GetSpecialAttribute)
        local height = env(GetFallHeight) / 100
        if land_type ~= LAND_NOT_FALL then
            if LandingDecision(land_type) == FALSE then
                if damage_type == DAMAGE_TYPE_DEATH and env(HasReceivedAnyDamage) == FALSE then
                    act(SwitchBGMState)
                    Fire("W_DeathStartDefault")
                    return TRUE
                end
                if height > HEIGHT_FORCE_DEATH then
                    act(SwitchBGMState)
                    Fire("W_DeathStartDefault")
                    return TRUE
                end
                if damage_type == DAMAGE_TYPE_DROWN_DEATH then
                    return FALSE
                end
                return FALSE
            elseif land_type == LAND_UPWARD then
                anim_id = ANIME_ID_DEATH_LAND_UPWARD
                event = "W_DeathStartLandUpward"
            elseif land_type == LAND_DOWNWARD then
                anim_id = ANIME_ID_DEATH_LAND_DOWNWARD
                event = "W_DeathStartLandDownward"
                if IsExistAnime(anim_id) == FALSE then
                    anim_id = ANIME_ID_DEATH_LAND_DEFAULT
                    event = "W_DeathStartLandDefault"
                end
            elseif land_type == LAND_THROWDEF_FRONT then
                anim_id = ANIME_ID_DEATH_LAND_THROW_DEF_FRONT
                event = "W_DeathStartLandThrowDefFront"
            elseif land_type == LAND_THROWDEF_BACK then
                anim_id = ANIME_ID_DEATH_LAND_THROW_DEF_BACK
                event = "W_DeathStartLandThrowDefBack"
            elseif land_type == LAND_THROWDEF_ANTIAIR then
                anim_id = ANIME_ID_DEATH_LAND_THROW_DEF_ANTI_AIR
                event = "W_DeathStartLandThrowDefAntiAir"
            elseif land_type == LAND_LADDER then
                anim_id = ANIME_ID_DEATH_START_LADDER
                event = "W_DeathStartLadder"
            else
                anim_id = ANIME_ID_DEATH_LAND_DEFAULT
                event = "W_DeathStartLandDefault"
                if IsExistAnime(anim_id) == FALSE then
                    anim_id = ANIME_ID_DEATH_LAND_DOWNWARD
                    event = "W_DeathStartLandDownward"
                end
            end
        elseif env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_AERIAL_DAMAGE) == TRUE or env(IsFalling) == TRUE then
            if (damage_level == DAMAGE_LEVEL_BLOW or damage_level == DAMAGE_LEVEL_UPPER or damage_level == DAMAGE_LEVEL_EX_BLAST) and IsExistAnime(ANIME_ID_DEATH_AERIAL_BLOW) == TRUE then
                FaceAttacker(0)
                anim_id = ANIME_ID_DEATH_AERIAL_BLOW
                event = "W_DeathAerialBlow"
            elseif env(GetDamageDirection) == DIRECTION_FB_FORWARD then
                anim_id = ANIME_ID_DEATH_AERIAL_FRONT
                event = "W_DeathAerialFront"
            elseif env(GetDamageDirection) == DIRECTION_FB_BACK then
                anim_id = ANIME_ID_DEATH_AERIAL_BACK
                event = "W_DeathAerialBack"
            end
        elseif env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_TO_DEATH_EVENT20000) == TRUE then
            anim_id = ANIME_ID_ONE_SHOT_EVENT_BEGIN
            event = "W_Event20000"
        elseif env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_TO_DEATH_EVENT20000 + 1) == TRUE then
            anim_id = ANIME_ID_ONE_SHOT_EVENT_BEGIN + 1
            event = "W_Event20001"
        elseif env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_TO_DEATH_EVENT20000 + 2) == TRUE then
            anim_id = ANIME_ID_ONE_SHOT_EVENT_BEGIN + 2
            event = "W_Event20002"
        elseif env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_TO_DEATH_EVENT20000 + 3) == TRUE then
            anim_id = ANIME_ID_ONE_SHOT_EVENT_BEGIN + 3
            event = "W_Event20003"
        elseif env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_TO_DEATH_EVENT20000 + 4) == TRUE then
            anim_id = ANIME_ID_ONE_SHOT_EVENT_BEGIN + 4
            event = "W_Event20004"
        elseif env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_TO_DEATH_EVENT20000 + 5) == TRUE then
            anim_id = ANIME_ID_ONE_SHOT_EVENT_BEGIN + 5
            event = "W_Event20005"
        elseif env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_TO_DEATH_EVENT20000 + 6) == TRUE then
            anim_id = ANIME_ID_ONE_SHOT_EVENT_BEGIN + 6
            event = "W_Event20006"
        elseif env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_TO_DEATH_EVENT20000 + 7) == TRUE then
            anim_id = ANIME_ID_ONE_SHOT_EVENT_BEGIN + 7
            event = "W_Event20007"
        elseif env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_TO_DEATH_EVENT20000 + 8) == TRUE then
            anim_id = ANIME_ID_ONE_SHOT_EVENT_BEGIN + 8
            event = "W_Event20008"
        elseif env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_TO_DEATH_EVENT20000 + 9) == TRUE then
            anim_id = ANIME_ID_ONE_SHOT_EVENT_BEGIN + 9
            event = "W_Event20009"
        elseif env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_TO_DEATH_EVENT20000 + 10) == TRUE then
            anim_id = ANIME_ID_ONE_SHOT_EVENT_BEGIN + 10
            event = "W_Event20010"
        elseif env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_TO_DEATH_EVENT20000 + 11) == TRUE then
            anim_id = ANIME_ID_ONE_SHOT_EVENT_BEGIN + 11
            event = "W_Event20011"
        elseif env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_TO_DEATH_EVENT20000 + 12) == TRUE then
            anim_id = ANIME_ID_ONE_SHOT_EVENT_BEGIN + 12
            event = "W_Event20012"
        elseif env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_TO_DEATH_EVENT20000 + 13) == TRUE then
            anim_id = ANIME_ID_ONE_SHOT_EVENT_BEGIN + 13
            event = "W_Event20013"
        elseif env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_TO_DEATH_EVENT20000 + 14) == TRUE then
            anim_id = ANIME_ID_ONE_SHOT_EVENT_BEGIN + 14
            event = "W_Event20014"
        elseif env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_TO_DEATH_EVENT20000 + 15) == TRUE then
            anim_id = ANIME_ID_ONE_SHOT_EVENT_BEGIN + 15
            event = "W_Event20015"
        elseif env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_TO_DEATH_EVENT20000 + 16) == TRUE then
            anim_id = ANIME_ID_ONE_SHOT_EVENT_BEGIN + 16
            event = "W_Event20016"
        elseif env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_TO_DEATH_EVENT20000 + 17) == TRUE then
            anim_id = ANIME_ID_ONE_SHOT_EVENT_BEGIN + 17
            event = "W_Event20017"
        elseif env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_TO_DEATH_EVENT20000 + 18) == TRUE then
            anim_id = ANIME_ID_ONE_SHOT_EVENT_BEGIN + 18
            event = "W_Event20018"
        elseif env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_TO_DEATH_EVENT20000 + 19) == TRUE then
            anim_id = ANIME_ID_ONE_SHOT_EVENT_BEGIN + 19
            event = "W_Event20019"
        elseif env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_TO_DEATH_EVENT20000 + 20) == TRUE then
            anim_id = ANIME_ID_ONE_SHOT_EVENT_BEGIN + 20
            event = "W_Event20020"
        elseif env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_TO_DEATH_UNIQUE_CASE) == TRUE then
            anim_id = ANIME_ID_DEATH_UNIQUE_CASE
            event = "W_DeathStartUniqueCase"
        elseif damage_level == DAMAGE_LEVEL_BLOW or damage_level == DAMAGE_LEVEL_EX_BLAST or damage_level == DAMAGE_LEVEL_BREATH then
            anim_id = ANIME_ID_DEATH_BLAST
            event = "W_DeathStartBlast"
        elseif env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_WOMAN) == TRUE and env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_WOMAN_POISON) == TRUE and env(GetStatusActivationTime, STATUS_SPECIAL_POISON) == TRUE or env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_WOMAN) == TRUE and env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_SPECIAL_POISON) == TRUE then
            anim_id = ANIME_ID_DEATH_SPECIAL_POISON
            event = "W_DeathStartSpecialPoison"
        elseif env(GetBehaviorID, BEH_IDENTIFIER_SPIN) == TRUE and IsExistAnime(ANIME_ID_DEATH_HIDE) == TRUE and env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_HIDE_ACTION) == TRUE then
            anim_id = ANIME_ID_DEATH_HIDE
            event = "W_DeathStartHide"
        elseif env(GetBehaviorID, BEH_IDENTIFIER_BACK_REALITY) == TRUE and env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_BACK_REALITY) == TRUE and (IsExistAnime(ANIME_ID_DEATH_BACK_REALITY) == TRUE or IsExistAnime(ANIME_ID_DEATH_BACK_REALITY + 1) == TRUE) then
            local index = GetRandomIndex(ANIME_ID_DEATH_BACK_REALITY, 0, 1, 1, 0, "IndexDeathStartBackReality", true)
            SetVariable("IndexDeathStartBackReality", index)
            anim_id = ANIME_ID_DEATH_BACK_REALITY + index
            event = "W_DeathStartBackReality"
        elseif damage_level == DAMAGE_LEVEL_UPPER then
            anim_id = ANIME_ID_DEATH_UPPER
            event = "W_DeathStartUpper"
        elseif damage_level == DAMAGE_LEVEL_FLING then
            anim_id = ANIME_ID_DEATH_FLING
            event = "W_DeathStartFling"
        elseif env(GetIsWeakPoint) == TRUE then
            anim_id = ANIME_ID_DEATH_WEAK
            event = "W_DeathStartWeak"
        elseif damage_physical_type ~= DAMAGE_PHYSICAL_NO_ABILITY or damage_special_type ~= DAMAGE_ELEMENT_NONE then
            local physics_death_anim_id = INVALID
            local physics_death_event = ""
            local special_death_anim_id = INVALID
            local special_death_event = ""
            if damage_physical_type == DAMAGE_PHYSICAL_LIGHT_SHOT then
                physics_death_anim_id = ANIME_ID_DEATH_LIGHT_SHOT
                physics_death_event = "W_DeathStartLightShot"
            elseif damage_physical_type == DAMAGE_PHYSICAL_SLASH then
                physics_death_anim_id = ANIME_ID_DEATH_SLASH
                physics_death_event = "W_DeathStartSlash"
            elseif damage_physical_type == DAMAGE_PHYSICAL_LIGHT_KNOCK then
                physics_death_anim_id = ANIME_ID_DEATH_LIGHT_KNOCK
                physics_death_event = "W_DeathStartLightKnock"
            elseif damage_physical_type == DAMAGE_PHYSICAL_STING then
                physics_death_anim_id = ANIME_ID_DEATH_STING
                physics_death_event = "W_DeathStartSting"
            elseif damage_physical_type == DAMAGE_PHYSICAL_HEAVY_KNOCK then
                physics_death_anim_id = ANIME_ID_DEATH_HEAVY_KNOCK
                physics_death_event = "W_DeathStartHeavyKnock"
            elseif diramage_physical_type == DAMAGE_PHYSICAL_ANTI_GROUND then
                physics_death_anim_id = ANIME_ID_DEATH_ANTI_GROUND
                physics_death_event = "W_DeathStartAntiGround"
            elseif diramage_physical_type == DAMAGE_PHYSICAL_ANTI_AIR then
                physics_death_anim_id = ANIME_ID_DEATH_ANTI_AIR
                physics_death_event = "W_DeathStartAntiAir"
            end
            if damage_special_type == DAMAGE_ELEMENT_FIRE and env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_FIRE_ACTION_ENABLE) == TRUE then
                special_death_anim_id = ANIME_ID_DEATH_FIRE
                special_death_event = "W_DeathStartFire"
            elseif (damage_special_type == DAMAGE_ELEMENT_LIGHTNING or env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_LIGHTNING_DAMAGE) == TRUE) and env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_LIGHTNING_DAMAGE_ENABLE) == TRUE then
                SetVariable("DiedByLightning", 1)
                special_death_anim_id = ANIME_ID_TRUNK_COLLAPSE_LIGHTNING_START
                special_death_event = "W_TrunkCollapseLightningStart"
            elseif damage_special_type == DAMAGE_ELEMENT_GHOST then
                special_death_anim_id = ANIME_ID_DEATH_GHOST
                special_death_event = "W_DeathStartGhost"
            end
            if IsExistAnime(physics_death_anim_id) == TRUE then
                anim_id = physics_death_anim_id
                event = physics_death_event
            elseif IsExistAnime(special_death_anim_id) == TRUE then
                anim_id = special_death_anim_id
                event = special_death_event
            end
        else
            anim_id = ANIME_ID_DEATH_DEFAULT
        end
    end
    if anim_id == ANIME_ID_DEATH_DEFAULT or IsExistAnime(anim_id) == FALSE then
        event = "W_DeathStartDefault"
        local index = GetRandomIndex(ANIME_ID_DEATH_VARIATION, 0, 1, 10, 0, "IndexDeathVariation", true)
        SetVariable("IndexDeathVariation", index)
    end
    act(SwitchBGMState)
    act(SkyDeathWarp, 211)
    Fire(event)
    return TRUE
    
end

function ExecSpDeath()
    if env(GetHP) > 0 and env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_NOT_RESURRECTION) == FALSE then
        if env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_RESURRECTION_IDLE_UPWARD) == TRUE then
            if IsExistAnime(ANIME_ID_RESURRECTION_IDLE_UPWARD) == TRUE then
                Fire("W_ResurrectionIdleUpward")
                return TRUE
            end
        elseif env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_RESURRECTION_IDLE_DOWNWARD) == TRUE and IsExistAnime(ANIME_ID_RESURRECTION_IDLE_DOWNWARD) == TRUE then
            Fire("W_ResurrectionIdleDownward")
            return TRUE
        end
    else
        if env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_EXPLOSION) == TRUE then
            if death_type == DEATH_TYPE_DEFAULT then
                local now_anime_id = GetNowPlayAnimeID()
                if now_anime_id == ANIME_ID_DEATH_DEFAULT then
                    Fire("W_Event20001")
                elseif now_anime_id == ANIME_ID_DEATH_DEFAULT2 then
                    Fire("W_Event20000")
                end
            elseif death_type == DEATH_TYPE_LAND_UPWARD then
                Fire("W_Event20000")
            elseif death_type == DEATH_TYPE_LAND_DOWNWARD then
                Fire("W_Event20001")
            elseif death_type == DEATH_TYPE_THROW_DEF then
                local throw_id = GetVariable("ThrowID")
                if throw_id == ANIME_ID_DEATH_THROW_BREAK or throw_id == ANIME_ID_DEATH_THROW_FALL or throw_id == ANIME_ID_DEATH_THROW_CROUCH_BACK then
                    Fire("W_Event20000")
                else
                    Fire("W_Event20001")
                end
            else
                Fire("W_Event20001")
            end
            return TRUE
        end
        return FALSE
    end
    
end

function ExecTransToDeathIdle(death_type, is_tmp_death)
    if env(IsAnimEnd, 1) == FALSE then
        return FALSE
    end
    local event = "W_DeathIdleDefault"
    local anim_id = INVALID
    local index = INVALID
    if env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_TO_DEATH_IDLE_UNIQUE_CASE) == TRUE then
        anim_id = ANIME_ID_DEATH_UNIQUE_CASE + 1
        event = "W_DeathIdleUniqueCase"
    elseif death_type == DEATH_TYPE_BLAST then
        anim_id = ANIME_ID_DEATH_BLAST + 1
        event = "W_DeathIdleBlast"
    elseif death_type == DEATH_TYPE_UPPER then
        anim_id = ANIME_ID_DEATH_UPPER + 1
        event = "W_DeathIdleUpper"
    elseif death_type == DEATH_TYPE_FLING then
        anim_id = ANIME_ID_DEATH_FLING + 1
        event = "W_DeathIdleFling"
    elseif death_type == DEATH_TYPE_WEAK then
        anim_id = ANIME_ID_DEATH_WEAK + 1
        event = "W_DeathIdleWeak"
    elseif death_type == DEATH_TYPE_LAND_UPWARD then
        anim_id = ANIME_ID_DEATH_LAND_UPWARD + 1
        event = "W_DeathIdleLandUpward"
    elseif death_type == DEATH_TYPE_LAND_DOWNWARD then
        anim_id = ANIME_ID_DEATH_LAND_DOWNWARD + 1
        event = "W_DeathIdleLandDownward"
    elseif death_type == DEATH_TYPE_LAND_THROW_DEF_FRONT then
    elseif death_type == DEATH_TYPE_LAND_THROW_DEF_BACK then
    elseif death_type == DEATH_TYPE_LAND_THROW_DEF_ANTI_AIR then
    elseif death_type == DEATH_TYPE_LADDER then
        anim_id = ANIME_ID_DEATH_START_LADDER + 1
        event = "W_DeathIdleLadder"
    elseif death_type == DEATH_TYPE_LAND_DEFAULT then
        anim_id = ANIME_ID_DEATH_LAND_DEFAULT + 1
        event = "W_DeathIdleLandDefault"
    elseif death_type == DEATH_TYPE_THROW_DEF then
        local throw_id = GetVariable("ThrowID")
        anim_id = ANIME_ID_DEATH_THROW_BREAK + 1
        if throw_id == ANIME_ID_THROW_DEF_PARRY then
            anim_id = ANIME_ID_DEATH_THROW_PARRY + 1
        elseif throw_id == ANIME_ID_THROW_DEF_BACK then
            anim_id = ANIME_ID_DEATH_THROW_BACK + 1
        elseif throw_id == ANIME_ID_THROW_DEF_FALL then
            anim_id = ANIME_ID_DEATH_THROW_FALL + 1
        end
        event = "W_ThrowDefDeathIdle"
    elseif death_type == DEATH_TYPE_DEFAULT then
        index = GetVariable("IndexDeathVariation")
        anim_id = ANIME_ID_DEATH_VARIATION + 10 * index + 1
    end
    if anim_id >= 0 then
        if IsExistAnime(anim_id) == FALSE then
            event = "W_DeathIdleDefault"
            SetVariable("IndexDeathIdleVariation", 0)
        elseif index >= 0 then
            SetVariable("IndexDeathIdleVariation", index)
        end
    end
    act(SwitchBGMState)
    Fire(event)
    return TRUE
    
end

function ExecDamage(transition_rank)
    local damage_level = env(GetDamageLevel)
    local damage_type = env(GetReceivedDamageType)
    local damaged_any = env(HasReceivedAnyDamage)
    local damage_direction = env(GetReceivedDamageDirection)
    local pre_sp_damage = GetSpDamage()
    local damaged_aerial = IsDamagedAerial()
    local rejected_by_transition_rank = FALSE
    local transition_result = INVALID
    ExecSpinReaction()
    if IsInvalidDamage(damaged_any, damage_level, damage_type, pre_sp_damage) == TRUE then
        return FALSE
    end
    SetVariable("BlendDamageDir", 0)
    SetVariable("BlendDamageFire", 0)
    transition_result = ExecDebuffReaction(damage_level, pre_sp_damage, transition_rank)
    if transition_result == TRUE then
        return TRUE
    elseif transition_result == REJECTED_BY__DAMAGE_TRANSITION_RANK then
        rejected_by_transition_rank = TRUE
    end
    transition_result = ExecGuardBlock(damage_level, damage_type, damage_direction)
    if transition_result == TRUE then
        return TRUE
    elseif transition_result == TRNAS_TO_ADD then
        return FALSE
    end
    transition_result = ExecDamageLargeBlow(damage_level, damaged_aerial, transition_rank)
    if transition_result == TRUE then
        return TRUE
    elseif transition_result == REJECTED_BY__DAMAGE_TRANSITION_RANK then
        rejected_by_transition_rank = TRUE
    end
    transition_result = ExecDamageBreakSp(damage_level, damage_type, transition_rank, pre_sp_damage)
    if transition_result == TRUE then
        return TRUE
    elseif transition_result == REJECTED_BY__DAMAGE_TRANSITION_RANK then
        rejected_by_transition_rank = TRUE
    end
    transition_result = ExecSpReactionLarge(damage_level, pre_sp_damage, transition_rank)
    if transition_result == TRUE then
        return TRUE
    elseif transition_result == REJECTED_BY__DAMAGE_TRANSITION_RANK then
        rejected_by_transition_rank = TRUE
    end
    transition_result = ExecDamageBreak(damage_type, damage_level, damaged_aerial, transition_rank)
    if transition_result == TRUE then
        return TRUE
    elseif transition_result == REJECTED_BY__DAMAGE_TRANSITION_RANK then
        rejected_by_transition_rank = TRUE
    end
    if ExecDamageBlow(damage_level, damage_direction) == TRUE then
        return TRUE
    end
    if ExecBound(damage_type, damaged_aerial) == TRUE then
        return TRUE
    end
    transition_result = ExecDamageDefault(damage_level, damage_direction, damaged_aerial, transition_rank)
    if transition_result == TRUE then
        return TRUE
    elseif transition_result == REJECTED_BY__DAMAGE_TRANSITION_RANK then
        rejected_by_transition_rank = TRUE
    end
    transition_result = ExecSpReaction(pre_sp_damage, transition_rank)
    if transition_result == TRUE then
        return TRUE
    elseif transition_result == REJECTED_BY__DAMAGE_TRANSITION_RANK then
        rejected_by_transition_rank = TRUE
    end
    if ExecNoSyncAddDamage(damage_level, damaged_any, damage_direction, damaged_aerial, rejected_by_transition_rank) == TRUE then
        return FALSE
    end
    return FALSE
    
end

function ExecGuardBlock(damage_level, damage_type, damage_direction)
    local just_guard_direction = env(GetJustGuardDeflectBehavior)
    local guard_direction = env(GetGuardDeflectBehavior)
    if damage_type == DAMAGE_TYPE_GUARD_BREAK then
        Replanning()
        FaceAttacker(0)
        act(SetDamageAnimType, DAMAGE_FLAG_GUARD_BREAK)
        act(SkyDeathWarp, 211)
        if just_guard_direction == GUARD_DIR_RIGHT or guard_direction == GUARD_DIR_RIGHT then
            Fire("W_GuardBreakRight")
        elseif just_guard_direction == GUARD_DIR_LEFT or guard_direction == GUARD_DIR_LEFT then
            Fire("W_GuardBreakLeft")
        end
        return TRUE
    elseif damage_type == DAMAGE_TYPE_GUARD or damage_type == DAMAGE_TYPE_GUARD_ATTAKER_STAM_ZERO then
        local is_justguard = env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_ENEMY_JUST_GUARD)
        local is_specialguard = env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_SPECIAL_GUARD)
        local is_specialguard2 = env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_SPECIAL_GUARD2)
        local guard_level = env(GetGuardLevel)
        local guard_damage_action = guard_damage_table[damage_level + 1][guard_level + 1]
        if guard_damage_action == GUARD_LEVEL_ADD or guard_damage_action ~= GUARD_LEVEL_NONE and env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_GUARD_TO_ADD_DAMAGE) == TRUE then
            act(SetDamageAnimType, DAMAGE_FLAG_GUARD_BREAK)
            if IsExistAnime(ANIME_ID_ADD_BLEND_FRONT) == TRUE then
                local offsetanim = GetDamageDirectionOffset(damage_direction)
                local str = "W_SABlend_Add_Front"
                if damage_direction == DIRECTION_FORWARD then
                elseif damage_direction == DIRECTION_LEFT then
                    str = "W_SABlend_Add_Left"
                elseif damage_direction == DIRECTION_RIGHT then
                    str = "W_SABlend_Add_Right"
                elseif damage_direction == DIRECTION_BACK then
                    str = "W_SABlend_Add_Back"
                end
                if IsExistAnime(ANIME_ID_ADD_BLEND_FRONT + offsetanim) == TRUE then
                    SetVariable("BlendSA", 0.5)
                    Fire(str)
                else
                    SetVariable("BlendSA", 0.5)
                    Fire("W_SABlend_Add_Front")
                end
                return TRNAS_TO_ADD
            end
        elseif guard_damage_action == GUARD_LEVEL_SMALL then
            act(SetDamageAnimType, DAMAGE_FLAG_GUARD_SMALL)
            if just_guard_direction == GUARD_DIR_RIGHT or guard_direction == GUARD_DIR_RIGHT then
                if is_justguard == TRUE and is_specialguard == TRUE and IsExistAnime(ANIME_ID_SPECIALJUSTGUARD_RIGHT_TO_LEFT) == TRUE then
                    act(SkyDeathWarp, 211)
                    Replanning()
                    Fire("W_JustGuardDamageSpecial_RighttoLeft")
                    return TRUE
                elseif is_justguard == TRUE and is_specialguard2 == TRUE and IsExistAnime(ANIME_ID_SPECIALJUSTGUARD2_RIGHT_TO_LEFT) == TRUE then
                    act(SkyDeathWarp, 211)
                    Replanning()
                    Fire("W_JustGuardDamageSpecial2_RighttoLeft")
                    return TRUE
                elseif is_justguard == TRUE and IsExistAnime(ANIME_ID_JUSTGUARD_RIGHT_TO_LEFT) == TRUE then
                    act(SkyDeathWarp, 211)
                    Replanning()
                    Fire("W_JustGuardDamage_RighttoLeft")
                    return TRUE
                elseif is_specialguard == TRUE and IsExistAnime(ANIME_ID_SPECIALGUARD_RIGHT_TO_LEFT) == TRUE then
                    act(SkyDeathWarp, 211)
                    Replanning()
                    Fire("W_GuardDamageSpecial_RighttoLeft")
                    return TRUE
                elseif is_specialguard2 == TRUE and IsExistAnime(ANIME_ID_SPECIALGUARD2_RIGHT_TO_LEFT) == TRUE then
                    act(SkyDeathWarp, 211)
                    Replanning()
                    Fire("W_GuardDamageSpecial2_RighttoLeft")
                    return TRUE
                elseif IsExistAnime(ANIME_ID_SMALL_GUARD_RIGHT_TO_LEFT) == TRUE then
                    act(SkyDeathWarp, 211)
                    Replanning()
                    Fire("W_GuardDamageSmall_RighttoLeft")
                    return TRUE
                else
                    return FALSE
                end
            elseif just_guard_direction == GUARD_DIR_LEFT or guard_direction == GUARD_DIR_LEFT then
                if is_justguard == TRUE and is_specialguard == TRUE and IsExistAnime(ANIME_ID_SPECIALJUSTGUARD_LEFT_TO_RIGHT) == TRUE then
                    act(SkyDeathWarp, 211)
                    Replanning()
                    Fire("W_JustGuardDamageSpecial_LefttoRight")
                    return TRUE
                elseif is_justguard == TRUE and is_specialguard2 == TRUE and IsExistAnime(ANIME_ID_SPECIALJUSTGUARD2_LEFT_TO_RIGHT) == TRUE then
                    act(SkyDeathWarp, 211)
                    Replanning()
                    Fire("W_JustGuardDamageSpecial2_LefttoRight")
                    return TRUE
                elseif is_justguard == TRUE and IsExistAnime(ANIME_ID_JUSTGUARD_LEFT_TO_RIGHT) == TRUE then
                    act(SkyDeathWarp, 211)
                    Replanning()
                    Fire("W_JustGuardDamage_LefttoRight")
                    return TRUE
                elseif is_specialguard == TRUE and IsExistAnime(ANIME_ID_SPECIALGUARD_LEFT_TO_RIGHT) == TRUE then
                    act(SkyDeathWarp, 211)
                    Replanning()
                    Fire("W_GuardDamageSpecial_LefttoRight")
                    return TRUE
                elseif is_specialguard2 == TRUE and IsExistAnime(ANIME_ID_SPECIALGUARD2_LEFT_TO_RIGHT) == TRUE then
                    act(SkyDeathWarp, 211)
                    Replanning()
                    Fire("W_GuardDamageSpecial2_LefttoRight")
                    return TRUE
                elseif IsExistAnime(ANIME_ID_SMALL_GUARD_LEFT_TO_RIGHT) == TRUE then
                    act(SkyDeathWarp, 211)
                    Replanning()
                    Fire("W_GuardDamageSmall_LefttoRight")
                    return TRUE
                else
                    return FALSE
                end
            end
        elseif guard_damage_action == GUARD_LEVEL_LARGE then
            act(SetDamageAnimType, DAMAGE_FLAG_GUARD_LARGE)
            if just_guard_direction == GUARD_DIR_RIGHT or guard_direction == GUARD_DIR_RIGHT then
                if is_justguard == TRUE and is_specialguard == TRUE and IsExistAnime(ANIME_ID_SPECIALJUSTGUARD_RIGHT_TO_LEFT) == TRUE then
                    act(SkyDeathWarp, 211)
                    Replanning()
                    Fire("W_JustGuardDamageSpecial_RighttoLeft")
                    return TRUE
                elseif is_justguard == TRUE and is_specialguard2 == TRUE and IsExistAnime(ANIME_ID_SPECIALJUSTGUARD2_RIGHT_TO_LEFT) == TRUE then
                    act(SkyDeathWarp, 211)
                    Replanning()
                    Fire("W_JustGuardDamageSpecial2_RighttoLeft")
                    return TRUE
                elseif is_justguard == TRUE and IsExistAnime(ANIME_ID_JUSTGUARD_RIGHT_TO_LEFT) == TRUE then
                    act(SkyDeathWarp, 211)
                    Replanning()
                    Fire("W_JustGuardDamage_RighttoLeft")
                    return TRUE
                elseif is_specialguard == TRUE and IsExistAnime(ANIME_ID_SPECIALGUARD_RIGHT_TO_LEFT) == TRUE then
                    act(SkyDeathWarp, 211)
                    Replanning()
                    Fire("W_GuardDamageSpecial_RighttoLeft")
                    return TRUE
                elseif is_specialguard2 == TRUE and IsExistAnime(ANIME_ID_SPECIALGUARD2_RIGHT_TO_LEFT) == TRUE then
                    act(SkyDeathWarp, 211)
                    Replanning()
                    Fire("W_GuardDamageSpecial2_RighttoLeft")
                    return TRUE
                elseif damage_level == DAMAGE_LEVEL_SMALL_BLOW and IsExistAnime(ANIME_ID_KICK_GUARD_RIGHT_TO_LEFT) == TRUE then
                    act(SkyDeathWarp, 211)
                    Replanning()
                    Fire("W_GuardKick_RighttoLeft")
                    return TRUE
                elseif IsExistAnime(ANIME_ID_LARGE_GUARD_RIGHT_TO_LEFT) == TRUE then
                    act(SkyDeathWarp, 211)
                    Replanning()
                    Fire("W_GuardDamageLarge_RighttoLeft")
                    return TRUE
                else
                    return FALSE
                end
            elseif just_guard_direction == GUARD_DIR_LEFT or guard_direction == GUARD_DIR_LEFT then
                if is_justguard == TRUE and is_specialguard == TRUE and IsExistAnime(ANIME_ID_SPECIALJUSTGUARD_LEFT_TO_RIGHT) == TRUE then
                    act(SkyDeathWarp, 211)
                    Replanning()
                    Fire("W_JustGuardDamageSpecial_LefttoRight")
                    return TRUE
                elseif is_justguard == TRUE and is_specialguard2 == TRUE and IsExistAnime(ANIME_ID_SPECIALJUSTGUARD2_LEFT_TO_RIGHT) == TRUE then
                    act(SkyDeathWarp, 211)
                    Replanning()
                    Fire("W_JustGuardDamageSpecial2_LefttoRight")
                    return TRUE
                elseif is_justguard == TRUE and IsExistAnime(ANIME_ID_JUSTGUARD_LEFT_TO_RIGHT) == TRUE then
                    act(SkyDeathWarp, 211)
                    Replanning()
                    Fire("W_JustGuardDamage_LefttoRight")
                    return TRUE
                elseif is_specialguard == TRUE and IsExistAnime(ANIME_ID_SPECIALGUARD_LEFT_TO_RIGHT) == TRUE then
                    act(SkyDeathWarp, 211)
                    Replanning()
                    Fire("W_GuardDamageSpecial_LefttoRight")
                    return TRUE
                elseif is_specialguard2 == TRUE and IsExistAnime(ANIME_ID_SPECIALGUARD2_LEFT_TO_RIGHT) == TRUE then
                    act(SkyDeathWarp, 211)
                    Replanning()
                    Fire("W_GuardDamageSpecial2_LefttoRight")
                    return TRUE
                elseif damage_level == DAMAGE_LEVEL_SMALL_BLOW and IsExistAnime(ANIME_ID_KICK_GUARD_LEFT_TO_RIGHT) == TRUE then
                    act(SkyDeathWarp, 211)
                    Replanning()
                    Fire("W_GuardKick_LefttoRight")
                    return TRUE
                elseif IsExistAnime(ANIME_ID_LARGE_GUARD_LEFT_TO_RIGHT) == TRUE then
                    act(SkyDeathWarp, 211)
                    Replanning()
                    Fire("W_GuardDamageLarge_LefttoRight")
                    return TRUE
                else
                    return FALSE
                end
            end
        else
            return FALSE
        end
    end
    return FALSE
    
end

function ExecDamageBreakSp(damage_level, damage_type, transition_rank, pre_sp_damage)
    if env(IsDamageMotionOff) == TRUE or damage_level == DAMAGE_LEVEL_BLOW or damage_level == DAMAGE_LEVEL_EX_BLAST then
        return FALSE
    else
        local damage_physical_type = env(GetPhysicalAttribute)
        local damage_special_type = env(GetSpecialAttribute)
        if pre_sp_damage == SP_DAMAGE_LIGHTNING and GetStaminaRatio() <= 0 then
            if IsEnabledTransitionRank(transition_rank, DAMAGE_TRANSITION_RANK__1) == FALSE then
                return REJECTED_BY__DAMAGE_TRANSITION_RANK
            end
            Replanning()
            act(SkyDeathWarp, 211)
            Fire("W_TrunkCollapseLightningStart")
            return TRUE
        end
        if damage_physical_type == DAMAGE_PHYSICAL_BURST and GetStaminaRatio() <= 0 and env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_BURST_ATTACK_CRETICAL) == TRUE and (IsExistAnime(ANIME_ID_TRUNK_COLLAPSE_BURST) or IsExistAnime(ANIME_ID_TRUNK_COLLAPSE_BURST + 1) or IsExistAnime(ANIME_ID_TRUNK_COLLAPSE_BURST + 2)) then
            if IsEnabledTransitionRank(transition_rank, DAMAGE_TRANSITION_RANK__1) == FALSE then
                return REJECTED_BY__DAMAGE_TRANSITION_RANK
            end
            local index = GetRandomIndex(ANIME_ID_TRUNK_COLLAPSE_BURST, 0, 2, 1, 0, "IndexTrunkCollapseBurst", true)
            SetVariable("IndexTrunkCollapseBurst", index)
            act(SetDamageAnimType, DAMAGE_FLAG_GUARD_BREAK)
            Replanning()
            act(SuperArmorReset)
            act(SkyDeathWarp, 211)
            FaceAttacker(0)
            Fire("W_TrunkCollapseBurst")
        end
    end
    return FALSE
    
end

function ExecDamageBreak(damage_type, damage_level, damaged_aerial, transition_rank)
    if damage_type ~= DAMAGE_TYPE_DAMAGE_BREAK then
        return FALSE
    end
    if env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_REACTION_SAFE_TIME) == TRUE then
        return REJECTED_BY__DAMAGE_TRANSITION_RANK
    end
    if env(IsDamageMotionOff) == TRUE or damage_level == DAMAGE_LEVEL_BLOW or damage_level == DAMAGE_LEVEL_EX_BLAST then
        return FALSE
    end
    if IsEnabledTransitionRank(transition_rank, DAMAGE_TRANSITION_RANK__2) == FALSE then
        return REJECTED_BY__DAMAGE_TRANSITION_RANK
    end
    act(SuperArmorReset)
    Replanning()
    act(SetDamageAnimType, DAMAGE_FLAG_GUARD_BREAK)
    local damage_direction = env(GetDamageDirection)
    local damage_physical_type = env(GetPhysicalAttribute)
    if damage_physical_type == DAMAGE_PHYSICAL_BURST and (IsExistAnime(ANIME_ID_TRUNK_COLLAPSE_BURST) or IsExistAnime(ANIME_ID_TRUNK_COLLAPSE_BURST + 1) or IsExistAnime(ANIME_ID_TRUNK_COLLAPSE_BURST + 2)) then
        local index = GetRandomIndex(ANIME_ID_TRUNK_COLLAPSE_BURST, 0, 2, 1, 0, "IndexTrunkCollapseBurst", true)
        SetVariable("IndexTrunkCollapseBurst", index)
        FaceAttacker(0)
        act(SkyDeathWarp, 211)
        Fire("W_TrunkCollapseBurst")
    elseif damaged_aerial == TRUE and IsExistAnime(ANIME_ID_TRUNK_COLLAPSE_AERIAL) == TRUE then
        if damage_direction == DIRECTION_FB_BACK and env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_BREAK_FACE_FRONT) == FALSE then
            FaceAttacker(180)
        else
            FaceAttacker(0)
        end
        act(SkyDeathWarp, 211)
        Fire("W_TrunkCollapseAerial")
    elseif damage_direction == DIRECTION_FB_BACK and env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_BREAK_FACE_FRONT) == FALSE then
        FaceAttacker(180)
        act(SkyDeathWarp, 211)
        if IsExistAnime(ANIME_ID_TRUNK_COLLAPSE_BACK) == TRUE then
            Fire("W_TrunkCollapseBack")
        else
            Fire("W_TrunkCollapseFront")
        end
    else
        FaceAttacker(0)
        act(SkyDeathWarp, 211)
        Fire("W_TrunkCollapseFront")
    end
    return TRUE
    
end

function ExecDamageBlow(damage_level, damage_direction)
    if damage_level == DAMAGE_LEVEL_SMALL_BLOW or damage_level == DAMAGE_LEVEL_BREATH then
        local damage_direction = env(GetDamageDirection)
        if damage_direction == DIRECTION_FB_BACK and IsExistAnime(ANIME_ID_DAMAGE_BLOW + 1) == TRUE then
            act(SetDamageAnimType, DAMAGE_FLAG_SMALL_BLOW)
            FaceAttacker(180)
            Replanning()
            act(SkyDeathWarp, 211)
            Fire("W_DamageBlowBack")
            return TRUE
        elseif IsExistAnime(ANIME_ID_DAMAGE_BLOW) == TRUE then
            act(SetDamageAnimType, DAMAGE_FLAG_SMALL_BLOW)
            FaceAttacker(0)
            Replanning()
            act(SkyDeathWarp, 211)
            Fire("W_DamageBlowFront")
            return TRUE
        end
    end
    return FALSE
    
end

function ExecDamageLargeBlow(damage_level, damaged_aerial, transition_rank)
    if damaged_aerial == TRUE then
        if (damage_level == DAMAGE_LEVEL_BLOW or damage_level == DAMAGE_LEVEL_UPPER or damage_level == DAMAGE_LEVEL_EX_BLAST) and IsExistAnime(ANIME_ID_DAMAGE_LARGE_BLOW_AERIAL) == TRUE then
            if IsEnabledTransitionRank(transition_rank, DAMAGE_TRANSITION_RANK__0) == FALSE then
                return REJECTED_BY__DAMAGE_TRANSITION_RANK
            end
            FaceAttacker(0)
            SetVariable("DamageDefaultState", 1)
            ExecSyncAddDamage(damage_level)
            Replanning()
            act(SkyDeathWarp, 211)
            Fire("W_DamageAerialBlow")
            return TRUE
        end
    elseif (damage_level == DAMAGE_LEVEL_BLOW or damage_level == DAMAGE_LEVEL_EX_BLAST) and IsExistAnime(ANIME_ID_DAMAGE_LARGE_BLOW) == TRUE then
        if IsEnabledTransitionRank(transition_rank, DAMAGE_TRANSITION_RANK__0) == FALSE then
            return REJECTED_BY__DAMAGE_TRANSITION_RANK
        end
        FaceAttacker(0)
        Replanning()
        act(SkyDeathWarp, 211)
        Fire("W_DamageLargeBlow")
        return TRUE
    end
    return FALSE
    
end

function IsSpDamage(pre_sp_damage)
    local damage_elem = env(GetSpecialAttribute)
    if damage_elem == DAMAGE_ELEMENT_FIRE then
    end
    return FALSE
    
end

function IsSpDamageAllowed()
    return TRUE
    
end

function ExecWeakDamage(damage_direction)
    if env(GetIsWeakPoint) == TRUE then
        local dir = GetDirOfPlayableDamage(ANIME_ID_DAMAGE_WEAK, damage_direction)
        if dir ~= INVALID then
            SetVariable("IndexDamageDirection", dir)
            act(SetDamageAnimType, DAMAGE_FLAG_WEAK)
            Replanning()
            Fire("W_DamageWeak")
            return TRUE
        end
    end
    return FALSE
    
end

function GetDirOfPlayableDamage(id, damage_direction)
    local offset = GetDamageDirectionOffset(damage_direction)
    local id_with_direction = id + offset
    if IsExistAnime(id_with_direction) == TRUE then
        return offset
    elseif IsExistAnime(id) == TRUE then
        offset = 0
        return offset
    end
    return INVALID
    
end

function GetDamageDirectionOffset(damage_direction)
    local offset = 1
    if damage_direction == 0 then
        offset = 2
    elseif damage_direction == 1 then
        offset = 3
    elseif damage_direction == 2 then
        offset = 0
    end
    return offset
    
end

function ExecBound(damage_type, damaged_aerial)
    if damage_type ~= DAMAGE_TYPE_NONE then
        if damage_type >= DAMAGE_TYPE_GUARDED_BOUND_ENEMY1 and damage_type <= DAMAGE_TYPE_GUARDED_BOUND_ENEMY3 or damage_type == DAMAGE_TYPE_GUARDED_STAM_ZERO then
            local just_guard_bound_type = env(GetJustGuardBounceBehavior)
            if damage_type == DAMAGE_TYPE_GUARDED_STAM_ZERO and ExecAttackBoundBreak(just_guard_bound_type, damaged_aerial) == TRUE then
                return TRUE
            end
            if just_guard_bound_type < BOUND_ADD01 or just_guard_bound_type > BOUND_ADD04 then
                if ExecAttackJustBound(damage_type, just_guard_bound_type) == TRUE then
                    return TRUE
                end
            elseif ExecAttackAddJustBound(just_guard_bound_type) == TRUE then
                return FALSE
            end
        elseif damage_type >= DAMAGE_TYPE_GUARDED_NO_BOUND_ENEMY1 and damage_type <= DAMAGE_TYPE_GUARDED_NO_BOUND_ENEMY3 then
            local guard_bound_type = env(GetGuardBounceBehavior)
            if guard_bound_type < BOUND_ADD01 or guard_bound_type > BOUND_ADD04 then
                if ExecAttackBound(damage_type, guard_bound_type) == TRUE then
                    return TRUE
                end
            elseif ExecAttackAddBound(guard_bound_type) == TRUE then
                return FALSE
            end
        end
    end
    return FALSE
    
end

function ExecAttackBoundBreak(just_guard_bound_type, damaged_aerial)
    if damaged_aerial == TRUE then
        if IsExistAnime(ANIME_ID_EMPTY_STAMINA_ATTACK_BOUND_AERIAL_RIGHT) == TRUE then
            act(SkyDeathWarp, 211)
            Replanning()
            Fire("W_AttackBoundEmptyStaminaEnemyAerial_Right")
            return TRUE
        elseif IsExistAnime(ANIME_ID_EMPTY_STAMINA_ATTACK_BOUND_AERIAL_LEFT) == TRUE then
            act(SkyDeathWarp, 211)
            Replanning()
            Fire("W_AttackBoundEmptyStaminaEnemyAerial_Left")
            return TRUE
        end
        return FALSE
    else
        if just_guard_bound_type == BOUND_RIGHT or just_guard_bound_type == BOUND_NON then
            if IsExistAnime(ANIME_ID_EMPTY_STAMINA_ATTACK_BOUND_RIGHT) == TRUE then
                act(SkyDeathWarp, 211)
                Replanning()
                Fire("W_AttackBoundEmptyStaminaEnemy_Right")
                return TRUE
            end
        elseif just_guard_bound_type == BOUND_LEFT then
            if IsExistAnime(ANIME_ID_EMPTY_STAMINA_ATTACK_BOUND_LEFT) == TRUE then
                act(SkyDeathWarp, 211)
                Replanning()
                Fire("W_AttackBoundEmptyStaminaEnemy_Left")
                return TRUE
            end
        elseif just_guard_bound_type >= BOUND_ADD01 and just_guard_bound_type <= BOUND_ADD04 then
            if IsExistAnime(ANIME_ID_EMPTY_STAMINA_ATTACK_BOUND_RIGHT) == TRUE then
                act(SkyDeathWarp, 211)
                Replanning()
                Fire("W_AttackBoundEmptyStaminaEnemy_Right")
                return TRUE
            elseif IsExistAnime(ANIME_ID_EMPTY_STAMINA_ATTACK_BOUND_LEFT) == TRUE then
                act(SkyDeathWarp, 211)
                Replanning()
                Fire("W_AttackBoundEmptyStaminaEnemy_Left")
                return TRUE
            end
        elseif just_guard_bound_type == BOUND_NON then
            if IsExistAnime(ANIME_ID_EMPTY_STAMINA_ATTACK_BOUND_RIGHT) == TRUE then
                act(SkyDeathWarp, 211)
                Replanning()
                Fire("W_AttackBoundEmptyStaminaEnemy_Right")
                return TRUE
            elseif IsExistAnime(ANIME_ID_EMPTY_STAMINA_ATTACK_BOUND_LEFT) == TRUE then
                act(SkyDeathWarp, 211)
                Replanning()
                Fire("W_AttackBoundEmptyStaminaEnemy_Left")
                return TRUE
            end
        end
        return FALSE
    end
    
end

function ExecAttackJustBound(damage_type, just_guard_bound_type)
    if just_guard_bound_type == BOUND_RIGHT then
        if damage_type == DAMAGE_TYPE_GUARDED_BOUND_ENEMY1 and IsExistAnime(ANIME_ID_ATTACK_BOUND_RIGHT) == TRUE then
            Replanning()
            Fire("W_AttackBoundEnemy1_Right")
            return TRUE
        elseif damage_type == DAMAGE_TYPE_GUARDED_BOUND_ENEMY2 and IsExistAnime(ANIME_ID_ATTACK_BOUND_RIGHT_SPECIAL1) == TRUE then
            Replanning()
            Fire("W_AttackBoundEnemy2_Right")
            return TRUE
        elseif damage_type == DAMAGE_TYPE_GUARDED_BOUND_ENEMY3 and IsExistAnime(ANIME_ID_ATTACK_BOUND_RIGHT_SPECIAL2) == TRUE then
            Replanning()
            Fire("W_AttackBoundEnemy3_Right")
            return TRUE
        end
    elseif just_guard_bound_type == BOUND_LEFT then
        if damage_type == DAMAGE_TYPE_GUARDED_BOUND_ENEMY1 and IsExistAnime(ANIME_ID_ATTACK_BOUND_LEFT) == TRUE then
            Replanning()
            Fire("W_AttackBoundEnemy1_Left")
            return TRUE
        elseif damage_type == DAMAGE_TYPE_GUARDED_BOUND_ENEMY2 and IsExistAnime(ANIME_ID_ATTACK_BOUND_LEFT_SPECIAL1) == TRUE then
            Replanning()
            Fire("W_AttackBoundEnemy2_Left")
            return TRUE
        elseif damage_type == DAMAGE_TYPE_GUARDED_BOUND_ENEMY3 and IsExistAnime(ANIME_ID_ATTACK_BOUND_LEFT_SPECIAL2) == TRUE then
            Replanning()
            Fire("W_AttackBoundEnemy3_Left")
            return TRUE
        end
    elseif just_guard_bound_type == BOUND_NON then
        return FALSE
    else
        return FALSE
    end
    return FALSE
    
end

function ExecAttackBound(damage_type, guard_bound_type)
    if guard_bound_type == BOUND_RIGHT then
        if damage_type == DAMAGE_TYPE_GUARDED_NO_BOUND_ENEMY1 and IsExistAnime(ANIME_ID_ATTACK_NO_BOUND_RIGHT) == TRUE then
            Replanning()
            Fire("W_AttackNoBoundEnemy1_Right")
            return TRUE
        elseif damage_type == DAMAGE_TYPE_GUARDED_NO_BOUND_ENEMY2 and IsExistAnime(ANIME_ID_ATTACK_NO_BOUND_RIGHT_SPECIAL1) == TRUE then
            Replanning()
            Fire("W_AttackNoBoundEnemy2_Right")
            return TRUE
        elseif damage_type == DAMAGE_TYPE_GUARDED_NO_BOUND_ENEMY3 and IsExistAnime(ANIME_ID_ATTACK_NO_BOUND_RIGHT_SPECIAL2) == TRUE then
            Replanning()
            Fire("W_AttackNoBoundEnemy3_Right")
            return TRUE
        end
    elseif guard_bound_type == BOUND_LEFT then
        if damage_type == DAMAGE_TYPE_GUARDED_NO_BOUND_ENEMY1 and IsExistAnime(ANIME_ID_ATTACK_NO_BOUND_LEFT) == TRUE then
            Replanning()
            Fire("W_AttackNoBoundEnemy1_Left")
            return TRUE
        elseif damage_type == DAMAGE_TYPE_GUARDED_NO_BOUND_ENEMY2 and IsExistAnime(ANIME_ID_ATTACK_NO_BOUND_LEFT_SPECIAL1) == TRUE then
            Replanning()
            Fire("W_AttackNoBoundEnemy2_Left")
            return TRUE
        elseif damage_type == DAMAGE_TYPE_GUARDED_NO_BOUND_ENEMY3 and IsExistAnime(ANIME_ID_ATTACK_NO_BOUND_LEFT_SPECIAL2) == TRUE then
            Replanning()
            Fire("W_AttackNoBoundEnemy3_Left")
            return TRUE
        end
    elseif guard_bound_type == BOUND_NON then
        return FALSE
    else
        return FALSE
    end
    return FALSE
    
end

function ExecAttackAddJustBound(just_guard_bound_type)
    if IsExistAnime(ANIME_ID_NO_ADD) == FALSE then
        return TRUE
    end
    for f79_local0 = 0, 3, 1 do
        if just_guard_bound_type == BOUND_ADD01 + f79_local0 then
            if IsExistAnime(ANIME_ID_PARRY_BOUND_ADD01 + f79_local0) == FALSE then
                return TRUE
            end
            str = f79_local0 + 1
            SetVariable("AttackJustGuardBoundBlend", 1)
            Fire("W_AttackJustGuardBound_Add0" .. str)
            return TRUE
        end
    end
    return FALSE
    

end

function ExecAttackAddBound(guard_bound_type)
    if IsExistAnime(ANIME_ID_NO_ADD) == FALSE then
        return TRUE
    end
    for f80_local0 = 0, 3, 1 do
        if guard_bound_type == BOUND_ADD01 + f80_local0 then
            if IsExistAnime(ANIME_ID_GUARD_BOUND_ADD01 + f80_local0) == FALSE then
                return TRUE
            end
            str = f80_local0 + 1
            SetVariable("AttackGuardBoundBlend", 1)
            Fire("W_AttackGuardBound_Add0" .. str)
            return TRUE
        end
    end
    return FALSE
    

end

function ExecNoSyncAddDamage(damage_level, damaged_any, damage_direction, damaged_aerial, rejected_by_transition_rank)
    if damage_level == DAMAGE_LEVEL_MINIMUM and damaged_any == TRUE or damaged_aerial == TRUE and damaged_any == TRUE or rejected_by_transition_rank == TRUE then
        if env(IsPartDamageAdditiveBlendInvalid) == TRUE then
            return TRUE
        end
        if IsExistAnime(ANIME_ID_NO_ADD) == FALSE then
            return TRUE
        end
        local damage_part = env(GetPartGroup)
        if damage_part > 0 then
            local anim_id = ANIME_ID_PART_DAMAGE + (damage_part - 1)
            if IsExistAnime(anim_id) == TRUE then
                if damage_part < 10 then
                    SetVariable("BlendPart0" .. damage_part, 1)
                    Fire("W_PartBlend_Add0" .. damage_part)
                else
                    SetVariable("BlendPart" .. damage_part, 1)
                    Fire("W_PartBlend_Add" .. damage_part)
                end
                return TRUE
            end
        end
        if IsExistAnime(ANIME_ID_ADD_BLEND_FRONT) == TRUE then
            local offsetanim = GetDamageDirectionOffset(damage_direction)
            local str = "W_SABlend_Add_Front"
            if damage_direction == DIRECTION_FORWARD then
            elseif damage_direction == DIRECTION_LEFT then
                str = "W_SABlend_Add_Left"
            elseif damage_direction == DIRECTION_RIGHT then
                str = "W_SABlend_Add_Right"
            elseif damage_direction == DIRECTION_BACK then
                str = "W_SABlend_Add_Back"
            end
            if IsExistAnime(ANIME_ID_ADD_BLEND_FRONT + offsetanim) == TRUE then
                SetVariable("BlendSA", 1)
                Fire(str)
            else
                SetVariable("BlendSA", 1)
                Fire("W_SABlend_Add_Front")
            end
            return TRUE
        end
        return TRUE
    end
    return FALSE
    
end

function ExecSpinReaction()
    if env(GetBehaviorID, BEH_IDENTIFIER_SPIN) == TRUE and env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_NO_SPIN) == FALSE then
        SetVariable("IsAffectedSpin", true)
        act(TurnTowardAttacker, 180)
        return TRUE
    end
    return FALSE
    
end

function ExecDebuffReaction(damage_level, pre_sp_damage, transition_rank)
    if env(IsDamageMotionOff) == FALSE then
        if pre_sp_damage == SP_DAMAGE_BURNING then
            if IsEnabledTransitionRank(transition_rank, DAMAGE_TRANSITION_RANK__3) == FALSE then
                return REJECTED_BY__DAMAGE_TRANSITION_RANK
            end
            Replanning()
            act(SkyDeathWarp, 211)
            Fire("W_FireReaction")
            return TRUE
        end
        if pre_sp_damage == SP_DAMAGE_POISON_REACTION then
            if IsEnabledTransitionRank(transition_rank, DAMAGE_TRANSITION_RANK__4) == FALSE then
                return REJECTED_BY__DAMAGE_TRANSITION_RANK
            end
            Replanning()
            act(SkyDeathWarp, 211)
            Fire("W_SpecialPoisonReaction")
            return TRUE
        end
    end
    return FALSE
    
end

function ExecSpReactionLarge(damage_level, pre_sp_damage, transition_rank)
    if env(IsDamageMotionOff) == FALSE then
        local damage_special_type = env(GetSpecialAttribute)
        if pre_sp_damage == SP_DAMAGE_FIRE then
            if IsEnabledTransitionRank(transition_rank, DAMAGE_TRANSITION_RANK__3) == FALSE then
                return REJECTED_BY__DAMAGE_TRANSITION_RANK
            end
            Replanning()
            act(SkyDeathWarp, 211)
            Fire("W_DamageFire")
            return TRUE
        end
        if pre_sp_damage == SP_DAMAGE_LIGHTNING and env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_LIGHTNING_DAMAGE_ENABLE) == TRUE then
            if IsEnabledTransitionRank(transition_rank, DAMAGE_TRANSITION_RANK__3) == FALSE then
                return REJECTED_BY__DAMAGE_TRANSITION_RANK
            end
            Replanning()
            act(SkyDeathWarp, 211)
            Fire("W_DamageLightningStart")
            return TRUE
        end
        if env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_1500_UG_DAMAGE) == TRUE and damage_level ~= DAMAGE_LEVEL_NONE and damage_level ~= DAMAGE_LEVEL_MINIMUM then
            if IsEnabledTransitionRank(transition_rank, DAMAGE_TRANSITION_RANK__3) == FALSE then
                return REJECTED_BY__DAMAGE_TRANSITION_RANK
            end
            Replanning()
            act(SkyDeathWarp, 211)
            Fire("W_Event20039")
            return TRUE
        end
    end
    if pre_sp_damage == SP_DAMAGE_FIRE_FEAR and IsExistAnime(ANIME_ID_FIRE_FEAR_REACTION) == TRUE then
        if IsEnabledTransitionRank(transition_rank, DAMAGE_TRANSITION_RANK__3) == FALSE then
            return REJECTED_BY__DAMAGE_TRANSITION_RANK
        end
        Replanning()
        act(SkyDeathWarp, 211)
        Fire("W_FireFearReaction")
        return TRUE
    elseif pre_sp_damage == SP_DAMAGE_FINGER_WHISTLE and IsExistAnime(ANIME_ID_FINGER_WHITSTLE_REACTION) == TRUE then
        if IsEnabledTransitionRank(transition_rank, DAMAGE_TRANSITION_RANK__4) == FALSE then
            return REJECTED_BY__DAMAGE_TRANSITION_RANK
        end
        Replanning()
        act(SkyDeathWarp, 211)
        Fire("W_FingerWhistleReaction")
        return TRUE
    elseif pre_sp_damage == SP_DAMAGE_BACK_REALITY and IsExistAnime(ANIME_ID_BACK_REALITY_REACTION) == TRUE then
        if IsEnabledTransitionRank(transition_rank, DAMAGE_TRANSITION_RANK__3) == FALSE then
            return REJECTED_BY__DAMAGE_TRANSITION_RANK
        end
        Replanning()
        act(SkyDeathWarp, 211)
        Fire("W_BackRealityReaction")
        return TRUE
    elseif pre_sp_damage == SP_DAMAGE_HIDE_ACTION and IsExistAnime(ANIME_ID_HIDE_REACTION) == TRUE then
        if IsEnabledTransitionRank(transition_rank, DAMAGE_TRANSITION_RANK__3) == FALSE then
            return REJECTED_BY__DAMAGE_TRANSITION_RANK
        end
        Replanning()
        act(SkyDeathWarp, 211)
        Fire("W_HideReaction")
        return TRUE
    elseif pre_sp_damage == SP_DAMAGE_WIRE then
        if IsEnabledTransitionRank(transition_rank, DAMAGE_TRANSITION_RANK__4) == FALSE then
            return REJECTED_BY__DAMAGE_TRANSITION_RANK
        end
        Replanning()
        act(SkyDeathWarp, 211)
        if env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_ENABLE_WIRE_DAMAGE0) == TRUE then
            Fire("W_DamageWire0")
        elseif env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_ENABLE_WIRE_DAMAGE1) == TRUE then
            Fire("W_DamageWire1")
        elseif env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_ENABLE_WIRE_DAMAGE2) == TRUE then
            Fire("W_DamageWire2")
        elseif env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_ENABLE_WIRE_DAMAGE3) == TRUE then
            Fire("W_DamageWire3")
        else
            Fire("W_DamageWire4")
        end
        return TRUE
    end
    return FALSE
    
end

function ExecSpReaction(pre_sp_damage, transition_rank)
    if pre_sp_damage == SP_DAMAGE_THROW_NEAR_REACTION and (IsExistAnime(ANIME_ID_THROW_NEAR_REACTION) == TRUE or IsExistAnime(ANIME_ID_THROW_NEAR_REACTION + 1) == TRUE or IsExistAnime(ANIME_ID_THROW_NEAR_REACTION + 2) == TRUE or IsExistAnime(ANIME_ID_THROW_NEAR_REACTION + 3) == TRUE or IsExistAnime(ANIME_ID_THROW_NEAR_REACTION + 4) == TRUE) then
        if IsEnabledTransitionRank(transition_rank, DAMAGE_TRANSITION_RANK__4) == FALSE then
            return REJECTED_BY__DAMAGE_TRANSITION_RANK
        end
        act(SkyDeathWarp, 211)
        Replanning()
        local index = GetRandomIndex(ANIME_ID_THROW_NEAR_REACTION, 0, 4, 1, 0, "IndexThrowNearReaction", true)
        SetVariable("IndexThrowNearReaction", index)
        Fire("W_ThrowNearReaction")
        return TRUE
    elseif pre_sp_damage == SP_DAMAGE_THROW_FAR_REACTION and (IsExistAnime(ANIME_ID_THROW_FAR_REACTION) == TRUE or IsExistAnime(ANIME_ID_THROW_FAR_REACTION + 1) == TRUE or IsExistAnime(ANIME_ID_THROW_FAR_REACTION + 2) == TRUE or IsExistAnime(ANIME_ID_THROW_FAR_REACTION + 3) == TRUE or IsExistAnime(ANIME_ID_THROW_FAR_REACTION + 4) == TRUE) then
        if IsEnabledTransitionRank(transition_rank, DAMAGE_TRANSITION_RANK__4) == FALSE then
            return REJECTED_BY__DAMAGE_TRANSITION_RANK
        end
        act(SkyDeathWarp, 211)
        Replanning()
        local index = GetRandomIndex(ANIME_ID_THROW_FAR_REACTION, 0, 4, 1, 0, "IndexThrowFarReaction", true)
        SetVariable("IndexThrowFarReaction", index)
        Fire("W_ThrowFarReaction")
        return TRUE
    elseif (pre_sp_damage == SP_DAMAGE_ASSASSINATION_BLOOD or pre_sp_damage == SP_DAMAGE_BURST) and IsExistAnime(ANIME_ID_ASSASSINATION_BLOOD_REACTION) == TRUE then
        if IsEnabledTransitionRank(transition_rank, DAMAGE_TRANSITION_RANK__4) == FALSE then
            return REJECTED_BY__DAMAGE_TRANSITION_RANK
        end
        act(SkyDeathWarp, 211)
        Replanning()
        Fire("W_AssassinationBloodReaction")
        return TRUE
    elseif pre_sp_damage == SP_DAMAGE_ASH_BAG then
        if IsEnabledTransitionRank(transition_rank, DAMAGE_TRANSITION_RANK__4) == FALSE then
            return REJECTED_BY__DAMAGE_TRANSITION_RANK
        end
        act(SkyDeathWarp, 211)
        Replanning()
        Fire("W_AssassinationBloodReaction")
        return TRUE
    elseif pre_sp_damage == SP_DAMAGE_PUSH then
        local damage_direction = env(GetDamageDirection)
        if damage_direction == DIRECTION_FB_FORWARD and IsExistAnime(ANIME_ID_DAMAGE_PUSH) == TRUE then
            if IsEnabledTransitionRank(transition_rank, DAMAGE_TRANSITION_RANK__4) == FALSE then
                return REJECTED_BY__DAMAGE_TRANSITION_RANK
            end
            act(SetDamageAnimType, DAMAGE_FLAG_PUSH)
            FaceAttacker(0)
            act(SkyDeathWarp, 211)
            Replanning()
            Fire("W_DamagePushFront")
            return TRUE
        elseif damage_direction == DIRECTION_FB_BACK and IsExistAnime(ANIME_ID_DAMAGE_PUSH + 1) == TRUE then
            if IsEnabledTransitionRank(transition_rank, DAMAGE_TRANSITION_RANK__4) == FALSE then
                return REJECTED_BY__DAMAGE_TRANSITION_RANK
            end
            act(SetDamageAnimType, DAMAGE_FLAG_PUSH)
            FaceAttacker(180)
            act(SkyDeathWarp, 211)
            Replanning()
            Fire("W_DamagePushBack")
            return TRUE
        end
    end
    return FALSE
    
end

function ExecDamageDefault(damage_level, damage_direction, damaged_aerial, transition_rank)
    if damaged_aerial == TRUE then
        if damage_level == DAMAGE_LEVEL_MIDDLE or damage_level == DAMAGE_LEVEL_LARGE or damage_level == DAMAGE_LEVEL_PUSH or damage_level == DAMAGE_LEVEL_FLING or damage_level == DAMAGE_LEVEL_SMALL_BLOW then
            if env(GetDamageDirection) == DIRECTION_FB_BACK and IsExistAnime(ANIME_ID_DAMAGE_AERIAL_BACK) == TRUE then
                if IsEnabledTransitionRank(transition_rank, DAMAGE_TRANSITION_RANK__4) == FALSE then
                    return REJECTED_BY__DAMAGE_TRANSITION_RANK
                end
                SetVariable("DamageDefaultState", 1)
                ExecSyncAddDamage(damage_level)
                act(SkyDeathWarp, 211)
                Replanning()
                Fire("W_DamageAerialBack")
                return TRUE
            elseif IsExistAnime(ANIME_ID_DAMAGE_AERIAL_FRONT) == TRUE then
                if IsEnabledTransitionRank(transition_rank, DAMAGE_TRANSITION_RANK__4) == FALSE then
                    return REJECTED_BY__DAMAGE_TRANSITION_RANK
                end
                SetVariable("DamageDefaultState", 1)
                ExecSyncAddDamage(damage_level)
                act(SkyDeathWarp, 211)
                Replanning()
                Fire("W_DamageAerialFront")
                return TRUE
            end
        end
    elseif damage_level == DAMAGE_LEVEL_SMALL then
        local dir = GetDirOfPlayableDamage(ANIME_ID_DAMAGE_SMALL, damage_direction)
        if dir ~= INVALID then
            if IsEnabledTransitionRank(transition_rank, DAMAGE_TRANSITION_RANK__4) == FALSE then
                return REJECTED_BY__DAMAGE_TRANSITION_RANK
            end
            SetVariable("IndexDamageDirection", dir)
            SetVariable("DamageDefaultState", 1)
            act(SetDamageAnimType, DAMAGE_FLAG_SMALL)
            ExecSyncAddDamage(damage_level)
            act(SkyDeathWarp, 211)
            Replanning()
            Fire("W_DamageSmall")
            return TRUE
        end
    elseif damage_level == DAMAGE_LEVEL_MIDDLE then
        local dir = GetDirOfPlayableDamage(ANIME_ID_DAMAGE_MIDDLE, damage_direction)
        if dir ~= INVALID then
            if IsEnabledTransitionRank(transition_rank, DAMAGE_TRANSITION_RANK__4) == FALSE then
                return REJECTED_BY__DAMAGE_TRANSITION_RANK
            end
            SetVariable("IndexDamageDirection", dir)
            SetVariable("DamageDefaultState", 2)
            act(SetDamageAnimType, DAMAGE_FLAG_MIDDlE)
            ExecSyncAddDamage(damage_level)
            act(SkyDeathWarp, 211)
            Replanning()
            Fire("W_DamageMiddle")
            return TRUE
        end
    elseif damage_level == DAMAGE_LEVEL_LARGE or damage_level == DAMAGE_LEVEL_FLING or damage_level == DAMAGE_LEVEL_UPPER then
        local dir = GetDirOfPlayableDamage(ANIME_ID_DAMAGE_LARGE, damage_direction)
        if dir ~= INVALID then
            if IsEnabledTransitionRank(transition_rank, DAMAGE_TRANSITION_RANK__4) == FALSE then
                return REJECTED_BY__DAMAGE_TRANSITION_RANK
            end
            SetVariable("IndexDamageDirection", dir)
            SetVariable("DamageDefaultState", 3)
            act(SetDamageAnimType, DAMAGE_FLAG_LARGE)
            ExecSyncAddDamage(damage_level)
            act(SkyDeathWarp, 211)
            Replanning()
            Fire("W_DamageLarge")
            return TRUE
        end
    elseif damage_level == DAMAGE_LEVEL_PUSH then
        local damage_direction = env(GetDamageDirection)
        if damage_direction == DIRECTION_FB_FORWARD and IsExistAnime(ANIME_ID_DAMAGE_PUSH) == TRUE then
            if IsEnabledTransitionRank(transition_rank, DAMAGE_TRANSITION_RANK__4) == FALSE then
                return REJECTED_BY__DAMAGE_TRANSITION_RANK
            end
            act(SetDamageAnimType, DAMAGE_FLAG_PUSH)
            FaceAttacker(0)
            act(SkyDeathWarp, 211)
            Replanning()
            Fire("W_DamagePushFront")
            return TRUE
        elseif damage_direction == DIRECTION_FB_BACK and IsExistAnime(ANIME_ID_DAMAGE_PUSH + 1) == TRUE then
            if IsEnabledTransitionRank(transition_rank, DAMAGE_TRANSITION_RANK__4) == FALSE then
                return REJECTED_BY__DAMAGE_TRANSITION_RANK
            end
            act(SetDamageAnimType, DAMAGE_FLAG_PUSH)
            FaceAttacker(180)
            act(SkyDeathWarp, 211)
            Replanning()
            Fire("W_DamagePushBack")
            return TRUE
        end
    end
    return FALSE
    
end

function ExecSyncAddDamage(damage_level)
    if env(IsPartDamageAdditiveBlendInvalid) == TRUE then
        return FALSE
    end
    if IsExistAnime(ANIME_ID_NO_ADD) == FALSE then
        return FALSE
    end
    if env(GetSpecialAttribute) == DAMAGE_ELEMENT_FIRE and IsExistAnime(ANIME_ID_BLEND_DAMAGE_FIRE) == TRUE then
        SetVariable("BlendDamageFire", 1)
        Fire("W_DamageFireBlend_Add")
        return TRUE
    end
    local buff = {[1] = -1}
    if damage_level == DAMAGE_LEVEL_SMALL then
        buff[1] = ANIME_ID_BLEND_DAMAGE_SMALL_FRONT
    elseif damage_level == DAMAGE_LEVEL_MIDDLE then
        buff[1] = ANIME_ID_BLEND_DAMAGE_MIDDLE_FRONT
        buff[2] = ANIME_ID_BLEND_DAMAGE_SMALL_FRONT
    elseif damage_level == DAMAGE_LEVEL_LARGE then
        buff[1] = ANIME_ID_BLEND_DAMAGE_LARGE_FRONT
        buff[2] = ANIME_ID_BLEND_DAMAGE_MIDDLE_FRONT
        buff[3] = ANIME_ID_BLEND_DAMAGE_SMALL_FRONT
    end
    if buff[1] >= 0 then
        local dir = GetRealDir()
        local anim_id = -1
        for f87_local0 = 1, #buff, 1 do
            if IsExistAnime(buff[f87_local0] + dir) == TRUE then
                anim_id = buff[f87_local0]
                break
            end
        end
        if anim_id >= 0 then
            local event = "W_DirDamageSmall"
            if anim_id == ANIME_ID_BLEND_DAMAGE_MIDDLE_FRONT then
                event = "W_DirDamageMiddle"
            elseif anim_id == ANIME_ID_BLEND_DAMAGE_LARGE_FRONT then
                event = "W_DirDamageLarge"
            end
            local f87_local1 = {"Front_Add", "Back_Add", "Left_Add", "Right_Add"}
            SetVariable("BlendDamageDir", 1)
            Fire(event .. f87_local1[dir + 1])
            return
        end

    end
    
end

function GetRealDir()
    local pos_dir = env(GetReceivedDamageDirection)
    local atk_dir = env(GetAtkDirection)
    local real_dir = FRONT_ADD
    if atk_dir == ATTACK_DIR_FRONT then
        if pos_dir == DIRECTION_FORWARD then
            real_dir = FRONT_ADD
        elseif pos_dir == DIRECTION_RIGHT then
            real_dir = RIGHT_ADD
        elseif pos_dir == DIRECTION_BACK then
            real_dir = BACK_ADD
        elseif pos_dir == DIRECTION_LEFT then
            real_dir = LEFT_ADD
        end
    elseif atk_dir == ATTACK_DIR_UP then
        if pos_dir == DIRECTION_FORWARD then
            real_dir = FRONTUP_ADD
        elseif pos_dir == DIRECTION_RIGHT then
            real_dir = RIGHT_ADD
        elseif pos_dir == DIRECTION_BACK then
            real_dir = BACK_ADD
        elseif pos_dir == DIRECTION_LEFT then
            real_dir = LEFT_ADD
        end
    elseif atk_dir == ATTACK_DIR_DOWN then
        if pos_dir == DIRECTION_FORWARD then
            real_dir = FRONTDOWN_ADD
        elseif pos_dir == DIRECTION_RIGHT then
            real_dir = RIGHT_ADD
        elseif pos_dir == DIRECTION_BACK then
            real_dir = BACK_ADD
        elseif pos_dir == DIRECTION_LEFT then
            real_dir = LEFT_ADD
        end
    elseif atk_dir == ATTACK_DIR_LEFT then
        if pos_dir == DIRECTION_FORWARD then
            real_dir = RIGHT_ADD
        elseif pos_dir == DIRECTION_RIGHT then
            real_dir = BACK_ADD
        elseif pos_dir == DIRECTION_BACK then
            real_dir = LEFT_ADD
        elseif pos_dir == DIRECTION_LEFT then
            real_dir = FRONT_ADD
        end
    elseif atk_dir == ATTACK_DIR_RIGHT then
        if pos_dir == DIRECTION_FORWARD then
            real_dir = LEFT_ADD
        elseif pos_dir == DIRECTION_LEFT then
            real_dir = BACK_ADD
        elseif pos_dir == DIRECTION_BACK then
            real_dir = RIGHT_ADD
        elseif pos_dir == DIRECTION_RIGHT then
            real_dir = FRONT_ADD
        end
    end
    return real_dir
    
end

function ExecFallStart(fall_type)
    if env(IsFalling) == FALSE then
        return FALSE
    end
    local anim_id = INVALID
    local event = ""
    if env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_1130_FALL_START_DOWNWARD) == TRUE then
        event = "W_FallingDownward"
        anim_id = ANIME_ID_FALLING_DOWNWARD
    elseif env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_1130_FALL_START_UPWARD) == TRUE then
        event = "W_FallingUpward"
        anim_id = ANIME_ID_FALLING_UPWARD
    elseif fall_type == FALL_UPWARD then
        if IsExistAnime(ANIME_ID_FALL_START_UPWARD) == TRUE then
            event = "W_FallStartUpward"
            anim_id = ANIME_ID_FALL_START_UPWARD
        else
            event = "W_FallingUpward"
            anim_id = ANIME_ID_FALLING_UPWARD
        end
    elseif fall_type == FALL_DOWNWARD then
        if IsExistAnime(ANIME_ID_FALL_START_DOWNWARD) == TRUE then
            event = "W_FallStartDownward"
            anim_id = ANIME_ID_FALL_START_DOWNWARD
        else
            event = "W_FallingDownward"
            anim_id = ANIME_ID_FALLING_DOWNWARD
        end
    elseif fall_type == FALL_TRUNK then
        if IsExistAnime(ANIME_ID_FALL_START_TRUNK) == TRUE then
            event = "W_FallStartTrunk"
            anim_id = ANIME_ID_FALL_START_TRUNK
        else
            event = "W_FallLoopTrunk"
            anim_id = ANIME_ID_FALLING_TRUNK
        end
    elseif fall_type == FALL_UPWARD_LOOP then
        event = "W_FallingUpward"
        anim_id = ANIME_ID_FALLING_UPWARD
    elseif fall_type == FALL_DOWNWARD_LOOP then
        event = "W_FallingDownward"
        anim_id = ANIME_ID_FALLING_DOWNWARD
    elseif fall_type == FALL_TRUNK_LOOP then
        event = "W_FallLoopTrunk"
        anim_id = ANIME_ID_FALLING_TRUNK
    end
    if anim_id == INVALID or IsExistAnime(anim_id) == FALSE then
        if IsExistAnime(ANIME_ID_FALL_START_DEFAULT) == TRUE then
            event = "W_FallStartDefault"
            anim_id = ANIME_ID_FALL_START_DEFAULT
        else
            event = "W_FallingDefault"
            anim_id = ANIME_ID_FALL_START_UPWARD
        end
    end
    Fire(event)
    return TRUE
    
end

function ExecLand(land_type)
    local height = env(GetFallHeight) / 100
    if LandingDecision(land_type) == FALSE then
        return FALSE
    end
    if env(CheckForEventAnimPlaybackRequest) == TRUE then
        return TRUE
    end
    if land_type == LAND_LADDER then
        Replanning()
        Fire("W_LadderFallLand")
        return TRUE
    elseif land_type == LAND_DEFAULT then
        if height > HEIGHT_TRANS_TO_HEAVY_LAND then
            if IsExistAnime(ANIME_ID_LAND_HEAVY) == TRUE then
                Fire("W_LandHeavy")
            else
                Fire("W_LandDefault")
            end
            Replanning()
            return TRUE
        elseif height > HEIGHT_TRANS_TO_LAND then
            Replanning()
            Fire("W_LandDefault")
            return TRUE
        else
            act(RequestAIReplanning)
            IdleTransition()
            return TRUE
        end
    elseif land_type == LAND_UPWARD then
        Replanning()
        Fire("W_LandUpward")
        return TRUE
    elseif land_type == LAND_DOWNWARD then
        Replanning()
        Fire("W_LandDownward")
        return TRUE
    elseif land_type == LAND_THROWDEF_FRONT then
        Replanning()
        Fire("W_LandThrowDefFront")
        return TRUE
    elseif land_type == LAND_THROWDEF_BACK then
        Replanning()
        Fire("W_LandThrowDefBack")
        return TRUE
    elseif land_type == LAND_THROWDEF_ANTIAIR then
        Replanning()
        Fire("W_LandThrowDefAntiAir")
        return TRUE
    elseif land_type == LAND_TRUNK then
        Replanning()
        Fire("W_LandTrunk")
        return TRUE
    elseif land_type == LAND_JUMPMOVE then
        Replanning()
        Fire("W_JumpMoveEnd")
        return TRUE
    elseif land_type >= LAND_JUMPATTACK0 and land_type <= LAND_JUMPATTACK9 then
        Replanning()
        if (land_type == LAND_JUMPATTACK0 or land_type == LAND_JUMPATTACK1) and env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_1470_IDENTIFY) == TRUE then
            act(SwitchBGMState)
        end
        if land_type == LAND_JUMPATTACK0 then
            Fire("W_JumpAttack3202")
        elseif land_type == LAND_JUMPATTACK1 then
            Fire("W_JumpAttack3212")
        elseif land_type == LAND_JUMPATTACK2 then
            Fire("W_JumpAttack3222")
        elseif land_type == LAND_JUMPATTACK3 then
            Fire("W_JumpAttack3232")
        elseif land_type == LAND_JUMPATTACK4 then
            Fire("W_JumpAttack3242")
        elseif land_type == LAND_JUMPATTACK5 then
            Fire("W_JumpAttack3252")
        elseif land_type == LAND_JUMPATTACK6 then
            Fire("W_JumpAttack3262")
        elseif land_type == LAND_JUMPATTACK7 then
            Fire("W_JumpAttack3272")
        elseif land_type == LAND_JUMPATTACK8 then
            Fire("W_JumpAttack3282")
        else
            Fire("W_JumpAttack3292")
        end
        return TRUE
    else
    end
    return FALSE
    
end

function ExecAILadder()
    local action_type = env(GetAIActionType)
    if action_type == LADDER_REQUEST_UP then
        Fire("W_LadderRemoveWeaponBottom")
        return TRUE
    elseif action_type == LADDER_REQUEST_DOWN then
        Fire("W_LadderRemoveWeaponTop")
        return TRUE
    end
    return FALSE
    
end

function ExecLadderFall()
    local hp = env(GetHP)
    if hp <= 0 then
        Fire("W_LadderDeath")
        return TRUE
    end
    local stamina = env(GetStamina)
    if stamina <= 0 then
        Fire("W_LadderFallStart")
        return TRUE
    end
    return FALSE
    
end

function ExecLadderDamage(hand)
    if env(HasReceivedAnyDamage) == FALSE then
        return FALSE
    end
    local event_hand = "Left"
    if hand == LADDER_HAND_RIGHT then
        event_hand = "Right"
    end
    local stamina = env(GetStamina)
    if stamina <= LADDER_DAMAGE_STAMINA_THREAHOLD then
        act(AdjustStamina, LADDER_LARGE_DAMAGE_STAMINA_CONSUME)
        Fire("W_LadderDamageLarge" .. event_hand)
        return TRUE
    else
        act(AdjustStamina, LADDER_SMALL_DAMAGE_STAMINA_CONSUME)
        Fire("W_LadderDamageSmall" .. event_hand)
        return TRUE
    end
    return FALSE
    
end

function ExecLadderNextAction(hand, is_idle)
    local event_hand = "Left"
    if hand == LADDER_HAND_RIGHT then
        event_hand = "Right"
    end
    local action_type = env(GetAIActionType)
    if action_type == LADDER_REQUEST_UP then
        if env(IsReachTopOfLadder) == TRUE then
            Fire("W_LadderEndTop" .. event_hand)
            return TRUE
        end
        if env(DoesLadderHaveCharacters, CONFLICT_DIST_CHR, UPSIDE, PLAYER) == TRUE then
            local stamina = env(GetStamina)
            if stamina < LADDER_ATTACK_STAMINA_THRESHOLD then
                return FALSE
            end
            Fire("W_LadderAttackUp" .. event_hand)
            act(AdjustStamina, LADDER_ATTACK_STAMINA_CONSUME)
            return TRUE
        end
        if env(IsSomeoneOnLadder, CONFLICT_DIST_CHR, 0) == TRUE then
            if is_idle == TRUE and env(DoesLadderHaveCharacters, 0, UPSIDE, ENEMY) == TRUE and env(IsReachBottomOfLadder) == TRUE then
                Fire("W_LadderEndBottom" .. event_hand)
                return TRUE
            end
            return FALSE
        end
        Fire("W_LadderUp" .. event_hand)
        return TRUE
    elseif action_type == LADDER_REQUEST_DOWN then
        if env(IsReachBottomOfLadder) == TRUE then
            Fire("W_LadderEndBottom" .. event_hand)
            return TRUE
        end
        if env(DoesLadderHaveCharacters, CONFLICT_DIST_CHR, DOWNSIDE, PLAYER) == TRUE then
            local stamina = env(GetStamina)
            if stamina < LADDER_ATTACK_STAMINA_THRESHOLD then
                return FALSE
            end
            Fire("W_LadderAttackDown" .. event_hand)
            act(AdjustStamina, LADDER_ATTACK_STAMINA_CONSUME)
            return TRUE
        end
        if env(IsSomeoneUnderLadder, CONFLICT_DIST_COAST, 0) == FALSE then
            Fire("W_LadderCoastStart")
            return TRUE
        end
        if is_idle == TRUE and env(IsSomeoneUnderLadder, CONFLICT_DIST_CHR, 0) == TRUE then
            Fire("W_FallingDefault")
            LadderSetActionState(LADDER_ACTION_INVALID)
            return TRUE
        end
        Fire("W_LadderDown" .. event_hand)
        return TRUE
    end
    if is_idle == FALSE then
        Fire("W_LadderIdle" .. event_hand)
        return TRUE
    end
    return FALSE
    
end

function ExecLadderCoastNextAction(hand)
    if env(IsReachBottomOfLadder) == TRUE then
        Fire("W_LadderCoastEnd")
        return TRUE
    end
    local event_hand = "Left"
    if hand == LADDER_HAND_RIGHT then
        event_hand = "Right"
    end
    if env(IsSomeoneUnderLadder, CONFLICT_DIST_CHR, 0) == FALSE then
        Fire("W_LadderCoast" .. event_hand)
        return TRUE
    else
        Fire("W_LadderCoastStop" .. event_hand)
        return TRUE
    end
    return FALSE
    
end

function SetThrowFlag(state)
    local state_throwing_side = THROWABLE_STATE_ATK_COMMON_IMPOSSIBLE
    local state_thrown_side = THROWABLE_STATE_DEF_COMMON_IMPOSSIBLE
    if state == STATE_THROW_ATK then
        state_throwing_side = THROWABLE_STATE_ATK_COMMON_IMPOSSIBLE
        state_thrown_side = THROWABLE_STATE_DEF_COMMON_IMPOSSIBLE
    elseif state == STATE_THROW_DEF then
        state_throwing_side = THROWABLE_STATE_ATK_COMMON_IMPOSSIBLE
        state_thrown_side = THROWABLE_STATE_DEF_COMMON_IMPOSSIBLE
    elseif state == STATE_FALL then
        state_throwing_side = THROWABLE_STATE_ATK_COMMON_IMPOSSIBLE
        state_thrown_side = THROWABLE_STATE_DEF_COMMON_IMPOSSIBLE
    elseif state == STATE_JUMP then
        state_throwing_side = THROWABLE_STATE_ATK_ENE_BASE
        state_thrown_side = THROWABLE_STATE_DEF_COMMON_IMPOSSIBLE
    elseif state == STATE_DEATH then
        state_throwing_side = THROWABLE_STATE_ATK_COMMON_IMPOSSIBLE
        state_thrown_side = THROWABLE_STATE_DEF_COMMON_IMPOSSIBLE
    else
        local ai_throw_target = env(GetThrowingAIState)
        state_throwing_side = THROWABLE_STATE_ATK_ENE_BASE
        if env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_HEADWATER) == TRUE then
            state_thrown_side = THROWABLE_STATE_DEF_ENE_HEADWATER
        elseif env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_UNDERWATER) == TRUE or env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_BOTTOMWATER) == TRUE then
            state_thrown_side = THROWABLE_STATE_DEF_ENE_UNDERWATER
        elseif ai_throw_target == AI_RECOGNITION_FOR_THROW__FIND_INCLUDE_PC or ai_throw_target == AI_RECOGNITION_FOR_THROW__BATTLE_INCLUDE_PC then
            state_thrown_side = THROWABLE_STATE_DEF_ENE_LAND_FOUND_BATTLE
        else
            state_thrown_side = THROWABLE_STATE_DEF_ENE_LAND_NORMAL_CAUTION
        end
    end
    if env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_DISABLE_THROWN) == TRUE then
        state_thrown_side = THROWABLE_STATE_DEF_COMMON_IMPOSSIBLE
    end
    act(SetThrowPossibilityState_Attacker, state_throwing_side)
    act(SetThrowPossibilityState_Defender, state_thrown_side)
    
end

function IdleCommonFunction(style, anim_id)
    act(SetCancel)
    if ExecPassiveTransition(LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__NONE) == TRUE then
        return TRUE
    end
    if ExecAILadder() == TRUE then
        return TRUE
    end
    if ExecActiveTransition(FALSE, style, MOVE_TYPE_NONE, TRUE) == TRUE then
        return TRUE
    end
    if ExecTalkTransition(anim_id) == TRUE then
        return TRUE
    end
    return FALSE
    
end

function IdleUniqueCommonFunction(anim_id)
    CallActionState(anim_id)
    act(SetTalkAnimState, TALK_REF_ENABLE_STEAL_INFO)
    if ExecPassiveTransition(LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__NONE) == TRUE then
        return TRUE
    end
    if ExecActiveTransition(TRUE, style, MOVE_TYPE_NONE, TRUE) == TRUE then
        return TRUE
    end
    if ExecTalkTransition(anim_id) == TRUE then
        return TRUE
    end
    return FALSE
    
end

function MoveCommonFunction(style, move_type)
    act(SetCancel)
    act(DisableFloorAdhesionDuringMove)
    if ExecPassiveTransition(LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__NONE) == TRUE then
        return TRUE
    end
    if ExecAILadder() == TRUE then
        return TRUE
    end
    if ExecActiveTransition(FALSE, style, move_type, FALSE) == TRUE then
        return TRUE
    end
    if ExecStop() == TRUE then
        return TRUE
    end
    return FALSE
    
end

function TurnCommonFunction(style)
    act(SetIsTurnAnimInProgress)
    if ExecPassiveTransition(LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__NONE) == TRUE then
        return TRUE
    end
    if ExecAILadder() == TRUE then
        return TRUE
    end
    if ExecActiveTransition(TRUE, style, MOVE_TYPE_NONE, FALSE) == TRUE then
        return TRUE
    end
    return FALSE
    
end

function TransStyleCommonFunction(style)
    if ExecPassiveTransition(LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__NONE) == TRUE then
        return TRUE
    end
    if ExecActiveTransition(TRUE, style, MOVE_TYPE_NONE, TRUE) == TRUE then
        return TRUE
    end
    return FALSE
    
end

function TransIdleCommonFunction()
    if ExecPassiveTransition(LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__NONE) == TRUE then
        return TRUE
    end
    if ExecAILadder() == TRUE then
        return TRUE
    end
    if ExecActiveTransition(TRUE, STYLE_DEFAULT, MOVE_TYPE_NONE, TRUE) == TRUE then
        return TRUE
    end
    return FALSE
    
end

function GenerateCommonFunction(ai_state)
    if ExecPassiveTransition(LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__NONE) == TRUE then
        return TRUE
    end
    if ExecActiveTransition(TRUE, STYLE_DEFAULT, MOVE_TYPE_NONE, TRUE) == TRUE then
        return TRUE
    end
    return FALSE
    
end

function AttackCommonFunction(action_number, style)
    CallActionState(action_number)
    if ExecPassiveTransition(LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__NONE) == TRUE then
        return TRUE
    end
    if ExecActiveTransition(TRUE, style, MOVE_TYPE_NONE, TRUE) == TRUE then
        return TRUE
    end
    return FALSE
    
end

function StepCommonFunction(action_number)
    CallActionState(action_number)
    if ExecPassiveTransition(LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__NONE) == TRUE then
        return TRUE
    end
    if ExecActiveTransition(TRUE, STYLE_DEFAULT, MOVE_TYPE_NONE, TRUE) == TRUE then
        return TRUE
    end
    return FALSE
    
end

function DamageCommonFunction(style, land_type, fall_type, transition_rank)
    if ExecPassiveTransition(land_type, fall_type, transition_rank) == TRUE then
        return TRUE
    end
    if ExecActiveTransition(TRUE, style, MOVE_TYPE_NONE, TRUE) == TRUE then
        return TRUE
    end
    return FALSE
    
end

function ResurrectionCommonFunction()
    FallPreventionAssist()
    if ExecPassiveTransition(LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__NONE) == TRUE then
        return TRUE
    end
    if ExecActiveTransition(TRUE, STYLE_DEFAULT, MOVE_TYPE_NONE, TRUE) == TRUE then
        return TRUE
    end
    return FALSE
    
end

function TakeoffCommonFunction()
    if ExecDeath(LAND_NOT_FALL) == TRUE then
        return TRUE
    end
    if ExecDamage() == TRUE then
        return TRUE
    end
    if ExecFallStart(FALL_DEFAULT) == TRUE then
        return TRUE
    end
    return FALSE
    
end

function JumpAttackCommonFunction(land_type, action_number)
    act(AIHomingOnTarget, 1)
    FallPreventionAssist()
    if env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_JUMP_BEFORE) == TRUE then
        SetThrowFlag(STATE_NORMAL)
        if AttackCommonFunction(action_number, STYLE_DEFAULT) == TRUE then
            return TRUE
        end
    else
        SetThrowFlag(STATE_JUMP)
        if FallCommonFunction(land_type) == TRUE then
            return TRUE
        end
    end
    return FALSE
    
end

function FallCommonFunction(land_type)
    if env(HasThrowRequest) == TRUE then
        if env(GetThrowAnimID) == ANIME_ID_THROW_DEF_ANTI_AIR and LandingDecision(land_type) ~= FALSE then
            act(SkyDeathWarp, 211)
        end
        return TRUE
    end
    if ExecDeath(land_type) == TRUE then
        return TRUE
    end
    if env(CheckForEventAnimPlaybackRequest) == TRUE then
        return TRUE
    end
    if ExecDamage() == TRUE then
        return TRUE
    end
    if ExecLand(land_type) == TRUE then
        return TRUE
    end
    return FALSE
    
end

function LandCommonFunction(transition_rank)
    if ExecPassiveTransition(LAND_NOT_FALL, FALL_DEFAULT, transition_rank) == TRUE then
        return TRUE
    end
    if ExecActiveTransition(TRUE, STYLE_DEFAULT, MOVE_TYPE_NONE, TRUE) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    return FALSE
    
end

function EventCommonFunction(anim_id)
    act(SetIsEventAnim)
    act(SetTalkAnimState, TALK_REF_ENABLE_STEAL_INFO)
    FallPreventionAssist()
    if ExecPassiveTransition(LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__NONE) == TRUE then
        return TRUE
    end
    if ExecActiveTransition(TRUE, STYLE_DEFAULT, MOVE_TYPE_NONE, TRUE) == TRUE then
        return TRUE
    end
    if ExecTalkTransition(anim_id) == TRUE then
        return TRUE
    end
    return FALSE
    
end

function ThrowCommonFunction()
    if env(IsThrown) == TRUE then
        if env(IsMoveCancelPossible) == TRUE then
            act(SetThrowState, THROW_STATE_NONE)
        end
        if ExecEventTrandition() == TRUE then
            return TRUE
        end
        if env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_WIRE_ATTACK) == TRUE and env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_5020_WIRE_DAMAGE1) == TRUE then
            Replanning()
            act(SkyDeathWarp, 211)
            Fire("W_DamageWire1")
            return TRUE
        end
    else
        if ExecDeath(LAND_NOT_FALL) == TRUE then
            return TRUE
        end
        if env(CheckForEventAnimPlaybackRequest) == TRUE then
            return TRUE
        end
        if ExecDamage() == TRUE then
            return TRUE
        end
    end
    if ExecFallStart(FALL_DEFAULT) == TRUE then
        return TRUE
    end
    if ExecActiveTransition(TRUE, STYLE_DEFAULT, MOVE_TYPE_NONE, TRUE) == TRUE then
        return TRUE
    end
    return FALSE
    
end

function ThrowAtkCommonFunction()
    SetThrowFlag(STATE_THROW_ATK)
    FallPreventionAssist()
    local throw_id = GetVariable("ThrowID")
    local throw_anime_id = env(GetThrowAnimID)
    if throw_anime_id > 0 and throw_id ~= throw_anime_id and IsExistAnime(throw_anime_id) == TRUE then
        throw_id = throw_anime_id
        SetVariable("ThrowID", throw_anime_id)
    end
    if env(IsOpponentDeadFromThrow) == TRUE and IsExistAnime(throw_id) == TRUE then
        act(SetThrowState, THROW_STATE_NONE)
        Fire("W_ThrowKill" .. throw_id)
        return TRUE
    end
    if env(HasThrowEnded) == TRUE and IsExistAnime(throw_id) == TRUE then
        act(SetThrowState, THROW_STATE_NONE)
        Fire("W_ThrowRelease" .. throw_id)
        return TRUE
    end
    if ThrowCommonFunction() == TRUE then
        act(SetThrowState, THROW_STATE_NONE)
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        act(SetThrowState, THROW_STATE_NONE)
        return TRUE
    end
    
end

function ThrowKillCommonFunction()
    SetThrowFlag(STATE_THROW_ATK)
    FallPreventionAssist()
    if ThrowCommonFunction() == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function ThrowDefCommonFunction()
    SetThrowFlag(STATE_THROW_DEF)
    FallPreventionAssist()
    local throw_id = GetVariable("ThrowID")
    local throw_anime_id = env(GetThrowAnimID)
    if throw_anime_id > 0 and throw_id ~= throw_anime_id and IsExistAnime(throw_anime_id) == TRUE then
        throw_id = throw_anime_id
        SetVariable("ThrowID", throw_anime_id)
    end
    if env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_1130_NEAR_CLIFF) == TRUE then
        local wall_angle = GetVariable("FallProtectWallAngle")
        local fall_angle = 75
        if math.abs(wall_angle) <= fall_angle and env(ActionGuideDisplay) == TRUE then
            if env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_1130_PERMISSION_FALL_FRONT) == TRUE then
                act(SetThrowState, THROW_STATE_NONE)
                Fire("W_Event20000")
                return TRUE
            elseif env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_1130_PERMISSION_FALL_BACK) == TRUE then
                act(SetThrowState, THROW_STATE_NONE)
                Fire("W_Event20004")
                return TRUE
            end
        end
    end
    if env(IsThrowSelfDeath) == TRUE then
        act(SwitchBGMState)
        if throw_id == ANIME_ID_THROW_DEF_HANG_FRONT then
            Fire("W_FallingThrowDefFrontDeath")
            return TRUE
        elseif throw_id == ANIME_ID_THROW_DEF_HANG_BACK then
            Fire("W_FallingThrowDefBackDeath")
            return TRUE
        elseif throw_id == ANIME_ID_THROW_DEF_ANTI_AIR_FIRST then
            Fire("W_FallingThrowDefAntiAirDeath")
            return TRUE
        else
            Replanning()
            Fire("W_ThrowDefDeath" .. throw_id)
            return TRUE
        end
    end
    if ThrowCommonFunction() == TRUE then
        act(SetThrowState, THROW_STATE_NONE)
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        if throw_id == ANIME_ID_THROW_DEF_HANG_FRONT then
            Fire("W_FallingThrowDefFront")
        elseif throw_id == ANIME_ID_THROW_DEF_HANG_BACK then
            Fire("W_FallingThrowDefBack")
        elseif throw_id == ANIME_ID_THROW_DEF_ANTI_AIR then
            Fire("W_FallingDefault")
        elseif throw_id == ANIME_ID_THROW_DEF_ANTI_AIR_FIRST then
            Fire("W_FallingThrowDefAntiAir")
        else
            IdleTransition()
        end
        act(SetThrowState, THROW_STATE_NONE)
        return TRUE
    end
    
end

function ThrowDefDeathCommonFunction()
    SetThrowFlag(STATE_DEATH)
    FallPreventionAssist()
    local throw_id = GetVariable("ThrowID")
    local throw_anime_id = env(GetThrowAnimID)
    if throw_anime_id > 0 and throw_id ~= throw_anime_id and IsExistAnime(throw_anime_id) == TRUE then
        throw_id = throw_anime_id
        SetVariable("ThrowID", throw_anime_id)
    end
    if IsDead() == FALSE then
        if ThrowCommonFunction() == TRUE then
            act(SetThrowState, THROW_STATE_NONE)
            return TRUE
        end
        if env(IsAnimEnd, 1) == TRUE then
            act(SetThrowState, THROW_STATE_NONE)
            IdleTransition()
            return TRUE
        end
    end
    if ExecSpDeath() == TRUE then
        act(SetThrowState, THROW_STATE_NONE)
        return TRUE
    end
    if ExecTransToDeathIdle(DEATH_TYPE_THROW_DEF, FALSE) == TRUE then
        act(SetThrowState, THROW_STATE_NONE)
        return TRUE
    end
    
end

function LadderIdleCommonFunction(hand)
    if ExecLadderFall() == TRUE then
        return TRUE
    end
    if ExecLadderDamage(hand) == TRUE then
        return TRUE
    end
    if ExecLadderNextAction(hand, TRUE) == TRUE then
        return TRUE
    end
    return FALSE
    
end

function LadderMoveCommonFunction(hand)
    if ExecLadderFall() == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE and ExecLadderNextAction(hand, FALSE) == TRUE then
        return TRUE
    end
    return FALSE
    
end

function LadderAttackCommonFunction(hand)
    if ExecLadderFall() == TRUE then
        return TRUE
    end
    if ExecLadderDamage(hand) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE and ExecLadderNextAction(hand, FALSE) == TRUE then
        return TRUE
    end
    return FALSE
    
end

function LadderDamageCommonFunction(hand)
    if ExecLadderFall() == TRUE then
        return TRUE
    end
    if ExecLadderDamage(hand) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE and ExecLadderNextAction(hand, FALSE) == TRUE then
        return TRUE
    end
    return FALSE
    
end

function LadderStartEndCommonFunction()
    if ExecPassiveTransition(LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__NONE) == TRUE then
        return TRUE
    end
    return FALSE
    
end

function LadderEquipWeaponCommonFunction()
    if ExecPassiveTransition(LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__NONE) == TRUE then
        return TRUE
    end
    if ExecActiveTransition(TRUE, STYLE_DEFAULT, MOVE_TYPE_NONE, TRUE) == TRUE then
        return TRUE
    end
    return FALSE
    
end

function LadderCoastCommonFunction(hand)
    if ExecLadderFall() == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE and ExecLadderCoastNextAction(hand) == TRUE then
        return TRUE
    end
    return FALSE
    
end

function FlightCommonFunction(style, move_type, action_number)
    CallActionState(action_number)
    if ExecPassiveTransition(LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__NONE) == TRUE then
        return TRUE
    end
    if ExecActiveTransition(TRUE, style, move_type, FALSE) == TRUE then
        return TRUE
    end
    return FALSE
    
end

function Init_onUpdate()
    act(SetThrowState, THROW_STATE_NONE)
    SetThrowFlag(STATE_DEATH)
    local event_id = env(GetCommandIDFromEvent, EVE_SLOT_ID__DEATH_REPRODUCTION)
    if event_id == EVE_COMMAND_ID__INIT_TO_DEATH then
        Fire("W_DeathIdleReturn")
        return TRUE
    elseif event_id == EVE_COMMAND_ID__c1020_INIT_TO_EVENT_DEATH then
        Fire("W_Event21001")
        return TRUE
    elseif event_id == EVE_COMMAND_ID__c1300_INIT_TO_EVENT_DEATH then
        Fire("W_Event21010")
        return TRUE
    elseif event_id == EVE_COMMAND_ID__c1400_INIT_TO_EVENT_DEATH then
        Fire("W_Event21002")
        return TRUE
    elseif event_id == EVE_COMMAND_ID__c5021_INIT_TO_EVENT_DEATH then
        Fire("W_Event21001")
        return TRUE
    elseif event_id == EVE_COMMAND_ID__c7420_INIT_TO_EVENT_DEATH then
        Fire("W_Event21003")
        return TRUE
    elseif event_id == EVE_COMMAND_ID__c7440_INIT_TO_EVENT_DEATH then
        Fire("W_Event21007")
        return TRUE
    elseif event_id == EVE_COMMAND_ID__c7510_INIT_TO_EVENT_DEATH then
        Fire("W_Event21007")
        return TRUE
    elseif event_id == EVE_COMMAND_ID__c7520_INIT_TO_EVENT_DEATH_00 then
        Fire("W_Event21013")
        return TRUE
    elseif event_id == EVE_COMMAND_ID__c7520_INIT_TO_EVENT_DEATH_01 then
        Fire("W_Event21016")
        return TRUE
    end
    if env(GetReceivedDamageType) == DAMAGE_TYPE_DEATHIDLE or env(GetHP) <= 0 then
        SetVariable("IndexDeathIdleVariation", 0)
        Fire("W_DeathIdleDefault")
        return TRUE
    end
    if env(IsGenerateAction) == TRUE then
        if env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_1510_SWITCH_GENERATE) == TRUE then
            Fire("W_Event21000")
            return TRUE
        else
            Fire("W_Generate")
            return TRUE
        end
    end
    local anim_id = env(GetSpecialStayAnimID)
    if anim_id > 0 then
        SetVariable("IdleUniqueStartTime", math.random() * 3)
        Fire("W_IdleUniqueDefault" .. anim_id)
        return TRUE
    end
    IdleTransition()
    return TRUE
    
end

function Generate_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if GenerateCommonFunction() == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function IdleDefault_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    act(SetTalkAnimState, TALK_REF_ENABLE_STEAL_INFO)
    if IdleCommonFunction(STYLE_DEFAULT, ANIME_ID_IDLE_DEFAULT) == TRUE then
        return TRUE
    end
    
end

function IdleCautionNoBattle_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if IdleCommonFunction(STYLE_DEFAULT, ANIME_ID_IDLE_CAUTION_NO_BATTLE) == TRUE then
        return TRUE
    end
    
end

function IdleCautionBattle_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if IdleCommonFunction(STYLE_DEFAULT, ANIME_ID_IDLE_CAUTION_BATTLE) == TRUE then
        return TRUE
    end
    
end

function IdleBattle_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    act(SetTalkAnimState, TALK_REF_BATTLE_STATE)
    if IdleCommonFunction(STYLE_DEFAULT, ANIME_ID_IDLE_BATTLE) == TRUE then
        return TRUE
    end
    
end

function WalkFrontDefault_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    act(AllowAniPlaybackSpeedChange)
    if MoveCommonFunction(STYLE_DEFAULT, MOVE_TYPE_WALK_FRONT) == TRUE then
        return TRUE
    end
    
end

function WalkBackDefault_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    act(AllowAniPlaybackSpeedChange)
    if MoveCommonFunction(STYLE_DEFAULT, MOVE_TYPE_WALK_BACK) == TRUE then
        return TRUE
    end
    
end

function WalkLeftDefault_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    act(AllowAniPlaybackSpeedChange)
    if MoveCommonFunction(STYLE_DEFAULT, MOVE_TYPE_WALK_LEFT) == TRUE then
        return TRUE
    end
    
end

function WalkRightDefault_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    act(AllowAniPlaybackSpeedChange)
    if MoveCommonFunction(STYLE_DEFAULT, MOVE_TYPE_WALK_RIGHT) == TRUE then
        return TRUE
    end
    
end

function RunFrontDefault_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if MoveCommonFunction(STYLE_DEFAULT, MOVE_TYPE_RUN_FRONT) == TRUE then
        return TRUE
    end
    
end

function WalkFrontCautionNoBattle_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if MoveCommonFunction(STYLE_DEFAULT, MOVE_TYPE_WALK_FRONT) == TRUE then
        return TRUE
    end
    
end

function WalkBackCautionNoBattle_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if MoveCommonFunction(STYLE_DEFAULT, MOVE_TYPE_WALK_BACK) == TRUE then
        return TRUE
    end
    
end

function RunFrontCautionNoBattle_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if MoveCommonFunction(STYLE_DEFAULT, MOVE_TYPE_RUN_FRONT) == TRUE then
        return TRUE
    end
    
end

function WalkFrontCautionBattle_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if MoveCommonFunction(STYLE_DEFAULT, MOVE_TYPE_WALK_FRONT) == TRUE then
        return TRUE
    end
    
end

function WalkBackCautionBattle_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if MoveCommonFunction(STYLE_DEFAULT, MOVE_TYPE_WALK_BACK) == TRUE then
        return TRUE
    end
    
end

function WalkLeftCautionBattle_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if MoveCommonFunction(STYLE_DEFAULT, MOVE_TYPE_WALK_LEFT) == TRUE then
        return TRUE
    end
    
end

function WalkRightCautionBattle_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if MoveCommonFunction(STYLE_DEFAULT, MOVE_TYPE_WALK_RIGHT) == TRUE then
        return TRUE
    end
    
end

function RunFrontCautionBattle_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if MoveCommonFunction(STYLE_DEFAULT, MOVE_TYPE_RUN_FRONT) == TRUE then
        return TRUE
    end
    
end

function WalkFrontBattle_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if MoveCommonFunction(STYLE_DEFAULT, MOVE_TYPE_WALK_FRONT) == TRUE then
        return TRUE
    end
    
end

function WalkBackBattle_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if MoveCommonFunction(STYLE_DEFAULT, MOVE_TYPE_WALK_BACK) == TRUE then
        return TRUE
    end
    
end

function WalkLeftBattle_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if MoveCommonFunction(STYLE_DEFAULT, MOVE_TYPE_WALK_LEFT) == TRUE then
        return TRUE
    end
    
end

function WalkRightBattle_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if MoveCommonFunction(STYLE_DEFAULT, MOVE_TYPE_WALK_RIGHT) == TRUE then
        return TRUE
    end
    
end

function RunFrontBattle_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if MoveCommonFunction(STYLE_DEFAULT, MOVE_TYPE_RUN_FRONT) == TRUE then
        return TRUE
    end
    
end

function RunLeftBattle_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if MoveCommonFunction(STYLE_DEFAULT, MOVE_TYPE_RUN_LEFT) == TRUE then
        return TRUE
    end
    
end

function RunRightBattle_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if MoveCommonFunction(STYLE_DEFAULT, MOVE_TYPE_RUN_RIGHT) == TRUE then
        return TRUE
    end
    
end

function JumpMoveStart_onUpdate()
    act(SetUserEdgeHoming, 1)
    act(UpdateLvl30Disabled)
    FallPreventionAssist()
    local land_type = LAND_JUMPMOVE
    if LandingDecision(land_type) == TRUE then
        SetThrowFlag(STATE_NORMAL)
        if GetVariable("PhysicsJumped") == true then
            if FallCommonFunction(land_type) == TRUE then
                return TRUE
            end
        elseif TakeoffCommonFunction() == TRUE then
            return TRUE
        end
    else
        SetVariable("PhysicsJumped", true)
        SetThrowFlag(STATE_FALL)
        if FallCommonFunction(land_type) == TRUE then
            return TRUE
        end
    end
    
end

function JumpMoveJumping_onUpdate()
    SetThrowFlag(STATE_FALL)
    FallPreventionAssist()
    act(SetUserEdgeHoming, 1)
    act(UpdateLvl30Disabled)
    land_type = LAND_JUMPMOVE
    if FallCommonFunction(land_type) == TRUE then
        return TRUE
    end
    
end

function JumpMoveEnd_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    act(UpdateLvl30Disabled)
    if LandCommonFunction(DAMAGE_TRANSITION_RANK__4) == TRUE then
        return TRUE
    end
    
end

function ParallelMove_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if MoveCommonFunction(STYLE_DEFAULT, MOVE_TYPE_PARALLEL) == TRUE then
        return TRUE
    end
    
end

function TurnDefault_Left90_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    act(AllowAniPlaybackSpeedChange)
    if TurnCommonFunction(STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function TurnDefault_Right90_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    act(AllowAniPlaybackSpeedChange)
    if TurnCommonFunction(STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function TurnDefault_Left180_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    act(AllowAniPlaybackSpeedChange)
    if TurnCommonFunction(STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function TurnDefault_Right180_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    act(AllowAniPlaybackSpeedChange)
    if TurnCommonFunction(STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function TurnDefault_Left45_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    act(AllowAniPlaybackSpeedChange)
    if TurnCommonFunction(STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function TurnDefault_Right45_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    act(AllowAniPlaybackSpeedChange)
    if TurnCommonFunction(STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function TurnCautionNoBattle_Left90_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if TurnCommonFunction(STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function TurnCautionNoBattle_Right90_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if TurnCommonFunction(STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function TurnCautionNoBattle_Left180_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if TurnCommonFunction(STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function TurnCautionNoBattle_Right180_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if TurnCommonFunction(STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function TurnCautionNoBattle_Left45_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if TurnCommonFunction(STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function TurnCautionNoBattle_Right45_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if TurnCommonFunction(STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function TurnCautionBattle_Left90_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if TurnCommonFunction(STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function TurnCautionBattle_Right90_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if TurnCommonFunction(STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function TurnCautionBattle_Left180_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if TurnCommonFunction(STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function TurnCautionBattle_Right180_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if TurnCommonFunction(STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function TurnCautionBattle_Left45_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if TurnCommonFunction(STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function TurnCautionBattle_Right45_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if TurnCommonFunction(STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function TurnBattle_Left90_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if TurnCommonFunction(STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function TurnBattle_Right90_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if TurnCommonFunction(STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function TurnBattle_Left180_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if TurnCommonFunction(STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function TurnBattle_Right180_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if TurnCommonFunction(STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function TurnBattle_Left45_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if TurnCommonFunction(STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function TurnBattle_Right45_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if TurnCommonFunction(STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function TransToDefaultFromDefault_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    CallActionState(ANIME_ID_TRANS_TO_DEFAULT_FROM_DEFAULT)
    if TransIdleCommonFunction() == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function TransToCautionBattleFromDefault_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    CallActionState(ANIME_ID_TRANS_TO_CAUTION_BATTLE_FROM_DEFAULT)
    if TransIdleCommonFunction() == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function TransToCautionNoBattleSmallFromDefault_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    CallActionState(ANIME_ID_TRANS_TO_CAUTION_NO_BATTLE_SMALL_FROM_DEFAULT)
    if TransIdleCommonFunction() == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function TransToCautionNoBattleBigFromDefault_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    CallActionState(ANIME_ID_TRANS_TO_CAUTION_NO_BATTLE_BIG_FROM_DEFAULT)
    if TransIdleCommonFunction() == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function TransToDefaultFromCautionNoBattle_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    CallActionState(ANIME_ID_TRANS_TO_DEFAULT_FROM_CAUTION_NO_BATTLE)
    if TransIdleCommonFunction() == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function TransToBattleFromCautionNoBattle_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    CallActionState(ANIME_ID_TRANS_TO_BATTLE_FROM_CAUTION_NO_BATTLE)
    if TransIdleCommonFunction() == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function TransToBattleFromDefault_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    CallActionState(ANIME_ID_TRANS_TO_BATTLE_FROM_DEFAULT)
    if TransIdleCommonFunction() == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function TransToDefaultFromCautionBattle_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    CallActionState(ANIME_ID_TRANS_TO_DEFAULT_FROM_CAUTION_BATTLE)
    if TransIdleCommonFunction() == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function TransToBattleFromCautionBattle_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    CallActionState(ANIME_ID_TRANS_TO_BATTLE_FROM_CAUTION_BATTLE)
    if TransIdleCommonFunction() == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function TransToDefaultFromBattle_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    CallActionState(ANIME_ID_TRANS_TO_DEFAULT_FROM_BATTLE)
    if TransIdleCommonFunction() == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function TransToCautionBattleFromBattle_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    CallActionState(ANIME_ID_TRANS_TO_CAUTION_BATTLE_FROM_BATTLE)
    if TransIdleCommonFunction() == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function TransToBattleFromBattle_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    CallActionState(ANIME_ID_TRANS_TO_BATTLE_FROM_BATTLE)
    if TransIdleCommonFunction() == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function IdleUniqueDefault200_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if IdleUniqueCommonFunction(200) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function IdleUniqueDefault210_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if IdleUniqueCommonFunction(210) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function IdleUniqueDefault220_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if IdleUniqueCommonFunction(220) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function IdleUniqueDefault230_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if IdleUniqueCommonFunction(230) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function IdleUniqueDefault240_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if IdleUniqueCommonFunction(240) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function IdleUniqueDefault400_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if IdleUniqueCommonFunction(400) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        Fire("W_IdleUniqueDefault401")
        return TRUE
    end
    
end

function IdleUniqueDefault401_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if IdleUniqueCommonFunction(401) == TRUE then
        return TRUE
    end
    
end

function IdleUniqueDefault402_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    CallActionState(402)
    if not GetVariable("IsRequestedBgmChange") and env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_DELAY_BGM_REQUEST) == FALSE then
        SetVariable("IsRequestedBgmChange", true)
        act(SwitchBGMState)
    end
    if TransIdleCommonFunction() == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function IdleUniqueDefault402_onDeactivate()
    if not GetVariable("IsRequestedBgmChange") then
        SetVariable("IsRequestedBgmChange", true)
        act(SwitchBGMState)
    end
    
end

function IdleUniqueDefault410_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if IdleUniqueCommonFunction(410) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        Fire("W_IdleUniqueDefault411")
        return TRUE
    end
    
end

function IdleUniqueDefault411_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if IdleUniqueCommonFunction(411) == TRUE then
        return TRUE
    end
    
end

function IdleUniqueDefault412_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    CallActionState(412)
    if not GetVariable("IsRequestedBgmChange") and env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_DELAY_BGM_REQUEST) == FALSE then
        SetVariable("IsRequestedBgmChange", true)
        act(SwitchBGMState)
    end
    if TransIdleCommonFunction() == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function IdleUniqueDefault412_onDeactivate()
    if not GetVariable("IsRequestedBgmChange") then
        SetVariable("IsRequestedBgmChange", true)
        act(SwitchBGMState)
    end
    
end

function IdleUniqueDefault420_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if IdleUniqueCommonFunction(420) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        Fire("W_IdleUniqueDefault421")
        return TRUE
    end
    
end

function IdleUniqueDefault421_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if IdleUniqueCommonFunction(421) == TRUE then
        return TRUE
    end
    
end

function IdleUniqueDefault422_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    CallActionState(422)
    if not GetVariable("IsRequestedBgmChange") and env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_DELAY_BGM_REQUEST) == FALSE then
        SetVariable("IsRequestedBgmChange", true)
        act(SwitchBGMState)
    end
    if TransIdleCommonFunction() == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function IdleUniqueDefault422_onDeactivate()
    if not GetVariable("IsRequestedBgmChange") then
        SetVariable("IsRequestedBgmChange", true)
        act(SwitchBGMState)
    end
    
end

function IdleUniqueDefault430_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if IdleUniqueCommonFunction(430) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        Fire("W_IdleUniqueDefault431")
        return TRUE
    end
    
end

function IdleUniqueDefault431_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if IdleUniqueCommonFunction(431) == TRUE then
        return TRUE
    end
    
end

function IdleUniqueDefault432_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    CallActionState(432)
    if not GetVariable("IsRequestedBgmChange") and env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_DELAY_BGM_REQUEST) == FALSE then
        SetVariable("IsRequestedBgmChange", true)
        act(SwitchBGMState)
    end
    if TransIdleCommonFunction() == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function IdleUniqueDefault432_onDeactivate()
    if not GetVariable("IsRequestedBgmChange") then
        SetVariable("IsRequestedBgmChange", true)
        act(SwitchBGMState)
    end
    
end

function IdleUniqueDefault440_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if IdleUniqueCommonFunction(440) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        Fire("W_IdleUniqueDefault441")
        return TRUE
    end
    
end

function IdleUniqueDefault441_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if IdleUniqueCommonFunction(441) == TRUE then
        return TRUE
    end
    
end

function IdleUniqueDefault442_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    CallActionState(442)
    if not GetVariable("IsRequestedBgmChange") and env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_DELAY_BGM_REQUEST) == FALSE then
        SetVariable("IsRequestedBgmChange", true)
        act(SwitchBGMState)
    end
    if TransIdleCommonFunction() == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function IdleUniqueDefault442_onDeactivate()
    if not GetVariable("IsRequestedBgmChange") then
        SetVariable("IsRequestedBgmChange", true)
        act(SwitchBGMState)
    end
    
end

function IdleUniqueDefault450_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if IdleUniqueCommonFunction(450) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        Fire("W_IdleUniqueDefault451")
        return TRUE
    end
    
end

function IdleUniqueDefault451_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if IdleUniqueCommonFunction(451) == TRUE then
        return TRUE
    end
    
end

function IdleUniqueDefault452_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    CallActionState(452)
    if not GetVariable("IsRequestedBgmChange") and env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_DELAY_BGM_REQUEST) == FALSE then
        SetVariable("IsRequestedBgmChange", true)
        act(SwitchBGMState)
    end
    if TransIdleCommonFunction() == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function IdleUniqueDefault452_onDeactivate()
    if not GetVariable("IsRequestedBgmChange") then
        SetVariable("IsRequestedBgmChange", true)
        act(SwitchBGMState)
    end
    
end

function IdleUniqueDefault460_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if IdleUniqueCommonFunction(460) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        Fire("W_IdleUniqueDefault461")
        return TRUE
    end
    
end

function IdleUniqueDefault461_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if IdleUniqueCommonFunction(461) == TRUE then
        return TRUE
    end
    
end

function IdleUniqueDefault462_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    CallActionState(462)
    if not GetVariable("IsRequestedBgmChange") and env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_DELAY_BGM_REQUEST) == FALSE then
        SetVariable("IsRequestedBgmChange", true)
        act(SwitchBGMState)
    end
    if TransIdleCommonFunction() == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    if not GetVariable("IsRequestedBgmChange") then
        SetVariable("IsRequestedBgmChange", true)
        act(SwitchBGMState)
    end
    
end

function IdleUniqueDefault470_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if IdleUniqueCommonFunction(470) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        Fire("W_IdleUniqueDefault471")
        return TRUE
    end
    
end

function IdleUniqueDefault471_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if IdleUniqueCommonFunction(471) == TRUE then
        return TRUE
    end
    
end

function IdleUniqueDefault472_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    CallActionState(472)
    if not GetVariable("IsRequestedBgmChange") and env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_DELAY_BGM_REQUEST) == FALSE then
        SetVariable("IsRequestedBgmChange", true)
        act(SwitchBGMState)
    end
    if TransIdleCommonFunction() == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function IdleUniqueDefault472_onDeactivate()
    if not GetVariable("IsRequestedBgmChange") then
        SetVariable("IsRequestedBgmChange", true)
        act(SwitchBGMState)
    end
    
end

function IdleUniqueDefault480_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if IdleUniqueCommonFunction(480) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        Fire("W_IdleUniqueDefault481")
        return TRUE
    end
    
end

function IdleUniqueDefault481_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if IdleUniqueCommonFunction(481) == TRUE then
        return TRUE
    end
    
end

function IdleUniqueDefault482_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    CallActionState(482)
    if not GetVariable("IsRequestedBgmChange") and env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_DELAY_BGM_REQUEST) == FALSE then
        SetVariable("IsRequestedBgmChange", true)
        act(SwitchBGMState)
    end
    if TransIdleCommonFunction() == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function IdleUniqueDefault482_onDeactivate()
    if not GetVariable("IsRequestedBgmChange") then
        SetVariable("IsRequestedBgmChange", true)
        act(SwitchBGMState)
    end
    
end

function IdleUniqueDefault490_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if IdleUniqueCommonFunction(490) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        Fire("W_IdleUniqueDefault491")
        return TRUE
    end
    
end

function IdleUniqueDefault491_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if IdleUniqueCommonFunction(491) == TRUE then
        return TRUE
    end
    
end

function IdleUniqueDefault492_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    CallActionState(492)
    if not GetVariable("IsRequestedBgmChange") and env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_DELAY_BGM_REQUEST) == FALSE then
        SetVariable("IsRequestedBgmChange", true)
        act(SwitchBGMState)
    end
    if TransIdleCommonFunction() == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function IdleUniqueDefault492_onDeactivate()
    if not GetVariable("IsRequestedBgmChange") then
        SetVariable("IsRequestedBgmChange", true)
        act(SwitchBGMState)
    end
    
end

function SearchDefault600_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(600, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function SearchDefault610_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(610, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function SearchDefault620_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(620, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function ListenSound700_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(700, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function ListenSound710_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(710, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function ListenSound720_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(720, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function SearchBattle400600_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(400600, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function SearchBattle400610_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(400610, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function SearchBattle400620_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(400620, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3000_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3000, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3001_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3001, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3002_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3002, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3003_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3003, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3004_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3004, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3005_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3005, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3006_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3006, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3007_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3007, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3008_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3008, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3009_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3009, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3010_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3010, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3011_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3011, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3012_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3012, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3013_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3013, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3014_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3014, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3015_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3015, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3016_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3016, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3017_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3017, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3018_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3018, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3019_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3019, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3020_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3020, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3021_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3021, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3022_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3022, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3023_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3023, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3024_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3024, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3025_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3025, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3026_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3026, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3027_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3027, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3028_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3028, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3029_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3029, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3030_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3030, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3031_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3031, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3032_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3032, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3033_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3033, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3034_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3034, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3035_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3035, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3036_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3036, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3037_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3037, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3038_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3038, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3039_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3039, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3040_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3040, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3041_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3041, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3042_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3042, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3043_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3043, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3044_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3044, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3045_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3045, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3046_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3046, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3047_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3047, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3048_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3048, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3049_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3049, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3050_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3050, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3051_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3051, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3052_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3052, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3053_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3053, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3054_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3054, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3055_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3055, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3056_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3056, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3057_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3057, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3058_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3058, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3059_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3059, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3060_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3060, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3061_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3061, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3062_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3062, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3063_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3063, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3064_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3064, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3065_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3065, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3066_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3066, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3067_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3067, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3068_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3068, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3069_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3069, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3070_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3070, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3071_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3071, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3072_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3072, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3073_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3073, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3074_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3074, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3075_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3075, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3076_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3076, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3077_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3077, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3078_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3078, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3079_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3079, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3080_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3080, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3081_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3081, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3082_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3082, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3083_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3083, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3084_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3084, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3085_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3085, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3086_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3086, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3087_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3087, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3088_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3088, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3089_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3089, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3090_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3090, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3091_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3091, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3092_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3092, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3093_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3093, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3094_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3094, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3095_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3095, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3096_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3096, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3097_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3097, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3098_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3098, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3099_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3099, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3100_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3100, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3101_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3101, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3102_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3102, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3103_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3103, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3104_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3104, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3105_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3105, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3106_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3106, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3107_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3107, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3108_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3108, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Attack3109_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3109, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function JumpAttack3200_onUpdate()
    if JumpAttackCommonFunction(LAND_JUMPATTACK0, 3200) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        if IsExistAnime(ANIME_ID_JUMP_ATTACK_LOOP) == TRUE then
            Fire("W_JumpAttack3201")
            return TRUE
        else
            Fire("W_FallingDefault")
            return TRUE
        end
    end
    
end

function JumpAttack3201_onUpdate()
    SetThrowFlag(STATE_JUMP)
    FallPreventionAssist()
    act(AIHomingOnTarget, 1)
    land_type = LAND_JUMPATTACK0
    if FallCommonFunction(land_type) == TRUE then
        return TRUE
    end
    
end

function JumpAttack3202_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(3202, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function JumpAttack3210_onUpdate()
    if JumpAttackCommonFunction(LAND_JUMPATTACK1, 3210) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        if IsExistAnime(ANIME_ID_JUMP_ATTACK_LOOP + 10) == TRUE then
            Fire("W_JumpAttack3211")
            return TRUE
        else
            Fire("W_FallingDefault")
            return TRUE
        end
    end
    
end

function JumpAttack3211_onUpdate()
    SetThrowFlag(STATE_JUMP)
    act(AIHomingOnTarget, 1)
    FallPreventionAssist()
    land_type = LAND_JUMPATTACK1
    if FallCommonFunction(land_type) == TRUE then
        return TRUE
    end
    
end

function JumpAttack3212_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    act(AIHomingOnTarget, 1)
    if AttackCommonFunction(3212, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function JumpAttack3220_onUpdate()
    if JumpAttackCommonFunction(LAND_JUMPATTACK2, 3220) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        if IsExistAnime(ANIME_ID_JUMP_ATTACK_LOOP + 20) == TRUE then
            Fire("W_JumpAttack3221")
            return TRUE
        else
            Fire("W_FallingDefault")
            return TRUE
        end
    end
    
end

function JumpAttack3221_onUpdate()
    SetThrowFlag(STATE_JUMP)
    FallPreventionAssist()
    act(AIHomingOnTarget, 1)
    land_type = LAND_JUMPATTACK2
    if FallCommonFunction(land_type) == TRUE then
        return TRUE
    end
    
end

function JumpAttack3222_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    act(AIHomingOnTarget, 1)
    if AttackCommonFunction(3222, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function JumpAttack3230_onUpdate()
    if JumpAttackCommonFunction(LAND_JUMPATTACK3, 3230) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        if IsExistAnime(ANIME_ID_JUMP_ATTACK_LOOP + 30) == TRUE then
            Fire("W_JumpAttack3231")
            return TRUE
        else
            Fire("W_FallingDefault")
            return TRUE
        end
    end
    
end

function JumpAttack3231_onUpdate()
    SetThrowFlag(STATE_JUMP)
    FallPreventionAssist()
    act(AIHomingOnTarget, 1)
    land_type = LAND_JUMPATTACK3
    if FallCommonFunction(land_type) == TRUE then
        return TRUE
    end
    
end

function JumpAttack3232_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    act(AIHomingOnTarget, 1)
    if AttackCommonFunction(3232, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function JumpAttack3240_onUpdate()
    if JumpAttackCommonFunction(LAND_JUMPATTACK4, 3240) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        if IsExistAnime(ANIME_ID_JUMP_ATTACK_LOOP + 40) == TRUE then
            Fire("W_JumpAttack3241")
            return TRUE
        else
            Fire("W_FallingDefault")
            return TRUE
        end
    end
    
end

function JumpAttack3241_onUpdate()
    SetThrowFlag(STATE_JUMP)
    FallPreventionAssist()
    act(AIHomingOnTarget, 1)
    land_type = LAND_JUMPATTACK4
    if FallCommonFunction(land_type) == TRUE then
        return TRUE
    end
    
end

function JumpAttack3242_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    act(AIHomingOnTarget, 1)
    if AttackCommonFunction(3242, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function JumpAttack3250_onUpdate()
    if JumpAttackCommonFunction(LAND_JUMPATTACK5, 3250) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        if IsExistAnime(ANIME_ID_JUMP_ATTACK_LOOP + 50) == TRUE then
            Fire("W_JumpAttack3251")
            return TRUE
        else
            Fire("W_FallingDefault")
            return TRUE
        end
    end
    
end

function JumpAttack3251_onUpdate()
    SetThrowFlag(STATE_JUMP)
    FallPreventionAssist()
    act(AIHomingOnTarget, 1)
    land_type = LAND_JUMPATTACK5
    if FallCommonFunction(land_type) == TRUE then
        return TRUE
    end
    
end

function JumpAttack3252_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    act(AIHomingOnTarget, 1)
    if AttackCommonFunction(3252, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function JumpAttack3260_onUpdate()
    if JumpAttackCommonFunction(LAND_JUMPATTACK6, 3260) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        if IsExistAnime(ANIME_ID_JUMP_ATTACK_LOOP + 60) == TRUE then
            Fire("W_JumpAttack3261")
            return TRUE
        else
            Fire("W_FallingDefault")
            return TRUE
        end
    end
    
end

function JumpAttack3261_onUpdate()
    SetThrowFlag(STATE_JUMP)
    FallPreventionAssist()
    act(AIHomingOnTarget, 1)
    land_type = LAND_JUMPATTACK6
    if FallCommonFunction(land_type) == TRUE then
        return TRUE
    end
    
end

function JumpAttack3262_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    act(AIHomingOnTarget, 1)
    if AttackCommonFunction(3262, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function JumpAttack3270_onUpdate()
    if JumpAttackCommonFunction(LAND_JUMPATTACK7, 3270) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        if IsExistAnime(ANIME_ID_JUMP_ATTACK_LOOP + 70) == TRUE then
            Fire("W_JumpAttack3271")
            return TRUE
        else
            Fire("W_FallingDefault")
            return TRUE
        end
    end
    
end

function JumpAttack3271_onUpdate()
    SetThrowFlag(STATE_JUMP)
    FallPreventionAssist()
    act(AIHomingOnTarget, 1)
    land_type = LAND_JUMPATTACK7
    if FallCommonFunction(land_type) == TRUE then
        return TRUE
    end
    
end

function JumpAttack3272_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    act(AIHomingOnTarget, 1)
    if AttackCommonFunction(3272, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function JumpAttack3280_onUpdate()
    if JumpAttackCommonFunction(LAND_JUMPATTACK8, 3280) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        if IsExistAnime(ANIME_ID_JUMP_ATTACK_LOOP + 80) == TRUE then
            Fire("W_JumpAttack3281")
            return TRUE
        else
            Fire("W_FallingDefault")
            return TRUE
        end
    end
    
end

function JumpAttack3281_onUpdate()
    SetThrowFlag(STATE_JUMP)
    FallPreventionAssist()
    act(AIHomingOnTarget, 1)
    land_type = LAND_JUMPATTACK8
    if FallCommonFunction(land_type) == TRUE then
        return TRUE
    end
    
end

function JumpAttack3282_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    act(AIHomingOnTarget, 1)
    if AttackCommonFunction(3282, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function JumpAttack3290_onUpdate()
    if JumpAttackCommonFunction(LAND_JUMPATTACK9, 3290) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        if IsExistAnime(ANIME_ID_JUMP_ATTACK_LOOP + 90) == TRUE then
            Fire("W_JumpAttack3291")
            return TRUE
        else
            Fire("W_FallingDefault")
            return TRUE
        end
    end
    
end

function JumpAttack3291_onUpdate()
    SetThrowFlag(STATE_JUMP)
    FallPreventionAssist()
    act(AIHomingOnTarget, 1)
    land_type = LAND_JUMPATTACK9
    if FallCommonFunction(land_type) == TRUE then
        return TRUE
    end
    
end

function JumpAttack3292_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    act(AIHomingOnTarget, 1)
    if AttackCommonFunction(3292, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function IdleUniqueCaution200200_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if AttackCommonFunction(200200, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function IdleUniqueCaution200210_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if AttackCommonFunction(200210, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function IdleUniqueCaution200220_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if AttackCommonFunction(200220, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function IdleUniqueCaution200230_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if AttackCommonFunction(200230, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function IdleUniqueCaution200240_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if AttackCommonFunction(200240, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function IdleUniqueBattle400200_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if AttackCommonFunction(400200, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function IdleUniqueBattle400210_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if AttackCommonFunction(400210, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function IdleUniqueBattle400220_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if AttackCommonFunction(400220, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function IdleUniqueBattle400230_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if AttackCommonFunction(400230, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function IdleUniqueBattle400240_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if AttackCommonFunction(400240, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function ThrowNearReaction_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    CallActionStateReaction(ANIME_ID_THROW_NEAR_REACTION)
    if DamageCommonFunction(STYLE_DEFAULT, LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__4) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function ThrowFarReaction_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    CallActionStateReaction(ANIME_ID_THROW_FAR_REACTION)
    if DamageCommonFunction(STYLE_DEFAULT, LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__4) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function AssassinationBloodReaction_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if DamageCommonFunction(STYLE_DEFAULT, LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__4) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Reaction20111_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if AttackCommonFunction(20111, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Reaction20112_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if AttackCommonFunction(20112, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Reaction20113_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if AttackCommonFunction(20113, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Reaction20114_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if AttackCommonFunction(20114, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function FireFearReaction_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if DamageCommonFunction(STYLE_DEFAULT, LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__3) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function HideReaction_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if DamageCommonFunction(STYLE_DEFAULT, LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__4) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function BackRealityReaction_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if DamageCommonFunction(STYLE_DEFAULT, LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__4) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Event20200_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if EventCommonFunction() == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Step5200_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if StepCommonFunction(5200) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Step5201_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if StepCommonFunction(5201) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Step5202_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if StepCommonFunction(5202) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Step5203_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if StepCommonFunction(5203) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Step5210_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if StepCommonFunction(5210) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Step5211_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if StepCommonFunction(5211) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Step5212_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if StepCommonFunction(5212) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function Step5213_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if StepCommonFunction(5213) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function DamageMinimum_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if DamageCommonFunction(STYLE_DEFAULT, LAND_NOT_FALL, GetNonDirectionalDamageStateFallType(), DAMAGE_TRANSITION_RANK__4) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function DamageSmall_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if DamageCommonFunction(STYLE_DEFAULT, LAND_NOT_FALL, GetNonDirectionalDamageStateFallType(), DAMAGE_TRANSITION_RANK__4) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function DamageMiddle_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if DamageCommonFunction(STYLE_DEFAULT, LAND_NOT_FALL, GetNonDirectionalDamageStateFallType(), DAMAGE_TRANSITION_RANK__4) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function DamageLarge_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if DamageCommonFunction(STYLE_DEFAULT, LAND_NOT_FALL, GetNonDirectionalDamageStateFallType(), DAMAGE_TRANSITION_RANK__4) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function GetNonDirectionalDamageStateFallType()
    local fall_type = FALL_UPWARD
    local damage_direction = GetVariable("IndexDamageDirection")
    if damage_direction == 1 then
        fall_type = FALL_DOWNWARD
    else
        fall_type = FALL_UPWARD
    end
    return fall_type
    
end

function DamageBlowFront_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if DamageCommonFunction(STYLE_DEFAULT, LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__4) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function DamageBlowBack_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if DamageCommonFunction(STYLE_DEFAULT, LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__4) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function DamageLargeBlow_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if DamageCommonFunction(STYLE_DEFAULT, LAND_NOT_FALL, FALL_UPWARD_LOOP, DAMAGE_TRANSITION_RANK__0) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function DamageFling_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if DamageCommonFunction(STYLE_DEFAULT, LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__0) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function DamagePushFront_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if DamageCommonFunction(STYLE_DEFAULT, LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__4) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function DamagePushBack_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if DamageCommonFunction(STYLE_DEFAULT, LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__4) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function DamageUpper_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if DamageCommonFunction(STYLE_DEFAULT, LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__0) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function DamageWeak_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if DamageCommonFunction(STYLE_DEFAULT, LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__3) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function DamageFire_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if DamageCommonFunction(STYLE_DEFAULT, LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__3) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function DamageLightningStart_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if DamageCommonFunction(STYLE_DEFAULT, LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__3) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        local index = GetRandomIndex(ANIME_ID_SPECIAL_DAMAGE_LIGHTNING_LOOP, 0, 2, 1, 0, "IndexDamageLightningLoop", true)
        SetVariable("IndexDamageLightningLoop", index)
        Fire("W_DamageLightningLoop")
        return TRUE
    end
    
end

function DamageLightningLoop_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if DamageCommonFunction(STYLE_DEFAULT, LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__3) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        Replanning()
        if env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_LIGHTNING_LOOP_LIFE) == TRUE then
            local index = GetRandomIndex(ANIME_ID_SPECIAL_DAMAGE_LIGHTNING_LOOP, 0, 2, 1, 0, "IndexDamageLightningLoop", true)
            SetVariable("IndexDamageLightningLoop", index)
            Fire("W_DamageLightningLoop")
        else
            local hp = env(GetHP)
            if hp <= 0 then
                Fire("W_DeathStartLightning")
            else
                Fire("W_DamageLightningEnd")
            end
        end
        return TRUE
    end
    
end

function DamageLightningEnd_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if DamageCommonFunction(STYLE_DEFAULT, LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__3) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function DamageWire0_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if DamageCommonFunction(STYLE_DEFAULT, LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__4) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function DamageWire1_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if DamageCommonFunction(STYLE_DEFAULT, LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__4) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function DamageWire2_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if DamageCommonFunction(STYLE_DEFAULT, LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__4) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function DamageWire3_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if DamageCommonFunction(STYLE_DEFAULT, LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__4) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function DamageWire4_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if DamageCommonFunction(STYLE_DEFAULT, LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__4) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function DamageAerialFront_onUpdate()
    SetThrowFlag(STATE_FALL)
    if env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_AERIAL_DAMAGE_TO_DIRECT_LOOP) ~= TRUE then
        if DamageCommonFunction(STYLE_DEFAULT, LAND_NOT_FALL, FALL_UPWARD, DAMAGE_TRANSITION_RANK__4) == TRUE then
            return TRUE
        end
        if env(IsAnimEnd, 1) == TRUE then
            IdleTransition()
            return TRUE
        end
    else
        if FallCommonFunction(LAND_UPWARD) == TRUE then
            return TRUE
        end
        if env(IsAnimEnd, 1) == TRUE then
            Fire("W_FallingUpward")
            return TRUE
        end
    end
    
end

function DamageAerialBack_onUpdate()
    SetThrowFlag(STATE_FALL)
    if env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_AERIAL_DAMAGE_TO_DIRECT_LOOP) ~= TRUE then
        if DamageCommonFunction(STYLE_DEFAULT, LAND_NOT_FALL, FALL_DOWNWARD, DAMAGE_TRANSITION_RANK__4) == TRUE then
            return TRUE
        end
        if env(IsAnimEnd, 1) == TRUE then
            IdleTransition()
            return TRUE
        end
    else
        if FallCommonFunction(LAND_DOWNWARD) == TRUE then
            return TRUE
        end
        if env(IsAnimEnd, 1) == TRUE then
            Fire("W_FallingDownward")
            return TRUE
        end
    end
    
end

function DamageAerialBlow_onUpdate()
    SetThrowFlag(STATE_FALL)
    FallPreventionAssist()
    if DamageCommonFunction(STYLE_DEFAULT, LAND_NOT_FALL, FALL_UPWARD_LOOP, DAMAGE_TRANSITION_RANK__0) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function TrunkCollapseFront_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if env(GetBehaviorID, BEH_IDENTIFIER_KICK) == TRUE then
        FaceAttacker(0)
        Fire("W_TrunkCollapseLarge")
        return TRUE
    end
    if DamageCommonFunction(STYLE_DEFAULT, LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__2) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function TrunkCollapseBack_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if env(GetBehaviorID, BEH_IDENTIFIER_KICK) == TRUE then
        FaceAttacker(0)
        Fire("W_TrunkCollapseLarge")
        return TRUE
    end
    if DamageCommonFunction(STYLE_DEFAULT, LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__2) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function TrunkCollapseLarge_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if DamageCommonFunction(STYLE_DEFAULT, LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__1) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function TrunkCollapseAerial_onUpdate()
    SetThrowFlag(STATE_FALL)
    if env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_AERIAL_DAMAGE_TO_DIRECT_LOOP) ~= TRUE then
        if DamageCommonFunction(STYLE_DEFAULT, LAND_NOT_FALL, FALL_TRUNK, DAMAGE_TRANSITION_RANK__2) == TRUE then
            return TRUE
        end
        if env(IsAnimEnd, 1) == TRUE then
            IdleTransition()
            return TRUE
        end
    else
        if FallCommonFunction(LAND_TRUNK) == TRUE then
            return TRUE
        end
        if env(IsAnimEnd, 1) == TRUE then
            Fire("W_FallLoopTrunk")
            return TRUE
        end
    end
    
end

function TrunkCollapseBurst_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if DamageCommonFunction(STYLE_DEFAULT, LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__1) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function TrunkCollapseLightningStart_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if GetVariable("DiedByLightning") then
    elseif DamageCommonFunction(STYLE_DEFAULT, LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__1) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        local index = GetRandomIndex(ANIME_ID_TRUNK_COLLAPSE_LIGHTNING_LOOP, 0, 2, 1, 0, "IndexDamageLightningLoop", true)
        SetVariable("IndexDamageLightningLoop", index)
        Fire("W_TrunkCollapseLightningLoop")
        return TRUE
    end
    
end

function TrunkCollapseLightningLoop_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if GetVariable("DiedByLightning") then
    elseif DamageCommonFunction(STYLE_DEFAULT, LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__1) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        Replanning()
        if env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_LIGHTNING_LOOP_LIFE) == TRUE then
            local index = GetRandomIndex(ANIME_ID_TRUNK_COLLAPSE_LIGHTNING_LOOP, 0, 2, 1, 0, "IndexDamageLightningLoop", true)
            SetVariable("IndexDamageLightningLoop", index)
            Fire("W_TrunkCollapseLightningLoop")
        else
            local hp = env(GetHP)
            if hp <= 0 then
                Fire("W_DeathStartLightning")
            else
                Fire("W_TrunkCollapseLightningEnd")
            end
        end
        return TRUE
    end
    
end

function TrunkCollapseLightningEnd_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if DamageCommonFunction(STYLE_DEFAULT, LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__1) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function FireReaction_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if DamageCommonFunction(STYLE_DEFAULT, LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__3) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function SpecialPoisonReaction_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if DamageCommonFunction(STYLE_DEFAULT, LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__4) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function FingerWhistleReaction_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if DamageCommonFunction(STYLE_DEFAULT, LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__4) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function DamageFireBlend_NoAdd_onUpdate()
    SetVariable("BlendDamageFire", 0)
    
end

function GuardDamageSmall_RighttoLeft_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if DamageCommonFunction(STYLE_GUARD_BOUND, LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__4) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function GuardDamageSmall_LefttoRight_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if DamageCommonFunction(STYLE_GUARD_BOUND, LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__4) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function GuardDamageLarge_RighttoLeft_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if DamageCommonFunction(STYLE_GUARD_BOUND, LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__4) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function GuardDamageLarge_LefttoRight_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if DamageCommonFunction(STYLE_GUARD_BOUND, LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__4) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function JustGuardDamage_RighttoLeft_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if DamageCommonFunction(STYLE_GUARD_BOUND, LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__4) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function JustGuardDamage_LefttoRight_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if DamageCommonFunction(STYLE_GUARD_BOUND, LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__4) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function JustGuardDamageSpecial_RighttoLeft_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if DamageCommonFunction(STYLE_GUARD_BOUND, LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__4) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function JustGuardDamageSpecial2_RighttoLeft_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if DamageCommonFunction(STYLE_GUARD_BOUND, LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__4) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function JustGuardDamageSpecial_LefttoRight_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if DamageCommonFunction(STYLE_GUARD_BOUND, LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__4) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function JustGuardDamageSpecial2_LefttoRight_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if DamageCommonFunction(STYLE_GUARD_BOUND, LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__4) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function GuardKick_RighttoLeft_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if DamageCommonFunction(STYLE_GUARD_BOUND, LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__4) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function GuardKick_LefttoRight_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if DamageCommonFunction(STYLE_GUARD_BOUND, LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__4) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function GuardDamageSpecial_RighttoLeft_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if DamageCommonFunction(STYLE_GUARD_BOUND, LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__4) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function GuardDamageSpecial_LefttoRight_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if DamageCommonFunction(STYLE_GUARD_BOUND, LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__4) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function GuardDamageSpecial2_RighttoLeft_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if DamageCommonFunction(STYLE_GUARD_BOUND, LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__4) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function GuardDamageSpecial2_LefttoRight_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if DamageCommonFunction(STYLE_GUARD_BOUND, LAND_NOT_FALL, FALL_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function GuardBreakRight_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if DamageCommonFunction(STYLE_DEFAULT, LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__2) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function GuardBreakLeft_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if DamageCommonFunction(STYLE_DEFAULT, LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__2) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function AttackBoundEnemy1_Right_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_1550_SHIELD_TYPE) == TRUE then
        if DamageCommonFunction(STYLE_GUARD, LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__4) == TRUE then
            return TRUE
        end
        if env(IsAnimEnd, 1) == TRUE then
            Fire("W_GuardIdle")
            return TRUE
        end
    else
        if DamageCommonFunction(STYLE_DEFAULT, LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__4) == TRUE then
            return TRUE
        end
        if env(IsAnimEnd, 1) == TRUE then
            IdleTransition()
            return TRUE
        end
    end
    
end

function AttackBoundEnemy1_Left_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_1550_SHIELD_TYPE) == TRUE then
        if DamageCommonFunction(STYLE_GUARD, LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__4) == TRUE then
            return TRUE
        end
        if env(IsAnimEnd, 1) == TRUE then
            Fire("W_GuardIdle")
            return TRUE
        end
    else
        if DamageCommonFunction(STYLE_DEFAULT, LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__4) == TRUE then
            return TRUE
        end
        if env(IsAnimEnd, 1) == TRUE then
            IdleTransition()
            return TRUE
        end
    end
    
end

function AttackBoundEnemy2_Right_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_1550_SHIELD_TYPE) == TRUE then
        if DamageCommonFunction(STYLE_GUARD, LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__4) == TRUE then
            return TRUE
        end
        if env(IsAnimEnd, 1) == TRUE then
            Fire("W_GuardIdle")
            return TRUE
        end
    else
        if DamageCommonFunction(STYLE_DEFAULT, LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__4) == TRUE then
            return TRUE
        end
        if env(IsAnimEnd, 1) == TRUE then
            IdleTransition()
            return TRUE
        end
    end
    
end

function AttackBoundEnemy2_Left_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_1550_SHIELD_TYPE) == TRUE then
        if DamageCommonFunction(STYLE_GUARD, LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__4) == TRUE then
            return TRUE
        end
        if env(IsAnimEnd, 1) == TRUE then
            Fire("W_GuardIdle")
            return TRUE
        end
    else
        if DamageCommonFunction(STYLE_DEFAULT, LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__4) == TRUE then
            return TRUE
        end
        if env(IsAnimEnd, 1) == TRUE then
            IdleTransition()
            return TRUE
        end
    end
    
end

function AttackBoundEnemy3_Right_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_1550_SHIELD_TYPE) == TRUE then
        if DamageCommonFunction(STYLE_GUARD, LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__4) == TRUE then
            return TRUE
        end
        if env(IsAnimEnd, 1) == TRUE then
            Fire("W_GuardIdle")
            return TRUE
        end
    else
        if DamageCommonFunction(STYLE_DEFAULT, LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__4) == TRUE then
            return TRUE
        end
        if env(IsAnimEnd, 1) == TRUE then
            IdleTransition()
            return TRUE
        end
    end
    
end

function AttackBoundEnemy3_Left_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_1550_SHIELD_TYPE) == TRUE then
        if DamageCommonFunction(STYLE_GUARD, LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__4) == TRUE then
            return TRUE
        end
        if env(IsAnimEnd, 1) == TRUE then
            Fire("W_GuardIdle")
            return TRUE
        end
    else
        if DamageCommonFunction(STYLE_DEFAULT, LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__4) == TRUE then
            return TRUE
        end
        if env(IsAnimEnd, 1) == TRUE then
            IdleTransition()
            return TRUE
        end
    end
    
end

function AttackBoundEmptyStaminaEnemy_Right_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if DamageCommonFunction(STYLE_DEFAULT, LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__2) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function AttackBoundEmptyStaminaEnemy_Left_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if DamageCommonFunction(STYLE_DEFAULT, LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__2) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function AttackBoundEmptyStaminaEnemyAerial_Right_onUpdate()
    SetThrowFlag(STATE_FALL)
    if LandingDecision(LAND_NOT_FALL) == TRUE then
        if DamageCommonFunction(STYLE_DEFAULT, LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__2) == TRUE then
            return TRUE
        end
        if env(IsAnimEnd, 1) == TRUE then
            IdleTransition()
            return TRUE
        end
    else
        if FallCommonFunction(LAND_TRUNK) == TRUE then
            return TRUE
        end
        if env(IsFalling) == TRUE then
            Fire("W_FallStartTrunk")
            return TRUE
        end
    end
    
end

function AttackBoundEmptyStaminaEnemyAerial_Left_onUpdate()
    SetThrowFlag(STATE_FALL)
    if LandingDecision(LAND_TRUNK) == TRUE then
        if DamageCommonFunction(STYLE_DEFAULT, LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__2) == TRUE then
            return TRUE
        end
        if env(IsAnimEnd, 1) == TRUE then
            IdleTransition()
            return TRUE
        end
    else
        if FallCommonFunction(LAND_TRUNK) == TRUE then
            return TRUE
        end
        if env(IsFalling) == TRUE then
            Fire("W_FallStartTrunk")
            return TRUE
        end
    end
    
end

function AttackJustGuardBound_NoAdd_onUpdate()
    SetVariable("AttackJustGuardBoundBlend", 0)
    
end

function AttackGuardBound_NoAdd_onUpdate()
    SetVariable("AttackGuardBoundBlend", 0)
    
end

function AttackNoBoundEnemy1_Right_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_1550_SHIELD_TYPE) == TRUE then
        if DamageCommonFunction(STYLE_GUARD, LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__4) == TRUE then
            return TRUE
        end
        if env(IsAnimEnd, 1) == TRUE then
            Fire("W_GuardIdle")
            return TRUE
        end
    else
        if DamageCommonFunction(STYLE_DEFAULT, LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__4) == TRUE then
            return TRUE
        end
        if env(IsAnimEnd, 1) == TRUE then
            IdleTransition()
            return TRUE
        end
    end
    
end

function AttackNoBoundEnemy1_Left_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_1550_SHIELD_TYPE) == TRUE then
        if DamageCommonFunction(STYLE_GUARD, LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__4) == TRUE then
            return TRUE
        end
        if env(IsAnimEnd, 1) == TRUE then
            Fire("W_GuardIdle")
            return TRUE
        end
    else
        if DamageCommonFunction(STYLE_DEFAULT, LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__4) == TRUE then
            return TRUE
        end
        if env(IsAnimEnd, 1) == TRUE then
            IdleTransition()
            return TRUE
        end
    end
    
end

function AttackNoBoundEnemy2_Right_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_1550_SHIELD_TYPE) == TRUE then
        if DamageCommonFunction(STYLE_GUARD, LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__4) == TRUE then
            return TRUE
        end
        if env(IsAnimEnd, 1) == TRUE then
            Fire("W_GuardIdle")
            return TRUE
        end
    else
        if DamageCommonFunction(STYLE_DEFAULT, LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__4) == TRUE then
            return TRUE
        end
        if env(IsAnimEnd, 1) == TRUE then
            IdleTransition()
            return TRUE
        end
    end
    
end

function AttackNoBoundEnemy2_Left_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_1550_SHIELD_TYPE) == TRUE then
        if DamageCommonFunction(STYLE_GUARD, LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__4) == TRUE then
            return TRUE
        end
        if env(IsAnimEnd, 1) == TRUE then
            Fire("W_GuardIdle")
            return TRUE
        end
    else
        if DamageCommonFunction(STYLE_DEFAULT, LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__4) == TRUE then
            return TRUE
        end
        if env(IsAnimEnd, 1) == TRUE then
            IdleTransition()
            return TRUE
        end
    end
    
end

function AttackNoBoundEnemy3_Right_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_1550_SHIELD_TYPE) == TRUE then
        if DamageCommonFunction(STYLE_GUARD, LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__4) == TRUE then
            return TRUE
        end
        if env(IsAnimEnd, 1) == TRUE then
            Fire("W_GuardIdle")
            return TRUE
        end
    else
        if DamageCommonFunction(STYLE_DEFAULT, LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__4) == TRUE then
            return TRUE
        end
        if env(IsAnimEnd, 1) == TRUE then
            IdleTransition()
            return TRUE
        end
    end
    
end

function AttackNoBoundEnemy3_Left_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_1550_SHIELD_TYPE) == TRUE then
        if DamageCommonFunction(STYLE_GUARD, LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__4) == TRUE then
            return TRUE
        end
        if env(IsAnimEnd, 1) == TRUE then
            Fire("W_GuardIdle")
            return TRUE
        end
    else
        if DamageCommonFunction(STYLE_DEFAULT, LAND_NOT_FALL, FALL_DEFAULT, DAMAGE_TRANSITION_RANK__4) == TRUE then
            return TRUE
        end
        if env(IsAnimEnd, 1) == TRUE then
            IdleTransition()
            return TRUE
        end
    end
    
end

function ResurrectionIdleUpward_onUpdate()
    SetThrowFlag(STATE_DEATH)
    if env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_RESURRECTION_IDLE_UPWARD) == FALSE and IsExistAnime(ANIME_ID_RESURRECTION_START_UPWARD) == TRUE then
        Fire("W_ResurrectionStartUpward")
        return TRUE
    end
    
end

function ResurrectionIdleDownward_onUpdate()
    SetThrowFlag(STATE_DEATH)
    if env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_RESURRECTION_IDLE_DOWNWARD) == FALSE and IsExistAnime(ANIME_ID_RESURRECTION_START_DOWNWARD) == TRUE then
        Fire("W_ResurrectionStartDownward")
        return TRUE
    end
    
end

function ResurrectionStartUpward_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if ResurrectionCommonFunction() == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function ResurrectionStartDownward_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if ResurrectionCommonFunction() == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function DeathStartDefault_onUpdate()
    SetThrowFlag(STATE_DEATH)
    FallPreventionAssist()
    local death_id = GetVariable("IndexDeathVariation")
    SetNowPlayAnimeID(10000 + death_id * 10)
    if ExecSpDeath() == TRUE then
        return TRUE
    end
    if ExecTransToDeathIdle(DEATH_TYPE_DEFAULT, FALSE) == TRUE then
        return TRUE
    end
    
end

function DeathStartDefault_onDeactivate()
    ResetNowPlayAnimeID()
    
end

function DeathStartFire_onUpdate()
    SetThrowFlag(STATE_DEATH)
    FallPreventionAssist()
    if ExecSpDeath() == TRUE then
        return TRUE
    end
    if ExecTransToDeathIdle(DEATH_TYPE_FIRE, FALSE) == TRUE then
        return TRUE
    end
    
end

function DeathStartLightning_onUpdate()
    SetThrowFlag(STATE_DEATH)
    FallPreventionAssist()
    if ExecSpDeath() == TRUE then
        return TRUE
    end
    if ExecTransToDeathIdle(DEATH_TYPE_LIGHTNING, FALSE) == TRUE then
        return TRUE
    end
    
end

function DeathStartGhost_onUpdate()
    SetThrowFlag(STATE_DEATH)
    FallPreventionAssist()
    if ExecSpDeath() == TRUE then
        return TRUE
    end
    if ExecTransToDeathIdle(DEATH_TYPE_GHOST, FALSE) == TRUE then
        return TRUE
    end
    
end

function DeathStartLightShot_onActivate()
    FaceAttacker(0)
    
end

function DeathStartLightShot_onUpdate()
    SetThrowFlag(STATE_DEATH)
    FallPreventionAssist()
    if ExecSpDeath() == TRUE then
        return TRUE
    end
    if ExecTransToDeathIdle(DEATH_TYPE_LIGHT_SHOT, FALSE) == TRUE then
        return TRUE
    end
    
end

function DeathStartSlash_onUpdate()
    SetThrowFlag(STATE_DEATH)
    FallPreventionAssist()
    if ExecSpDeath() == TRUE then
        return TRUE
    end
    if ExecTransToDeathIdle(DEATH_TYPE_SLASH, FALSE) == TRUE then
        return TRUE
    end
    
end

function DeathStartLightKnock_onUpdate()
    SetThrowFlag(STATE_DEATH)
    FallPreventionAssist()
    if ExecSpDeath() == TRUE then
        return TRUE
    end
    if ExecTransToDeathIdle(DEATH_TYPE_LIGHT_KNOCK, FALSE) == TRUE then
        return TRUE
    end
    
end

function DeathStartSting_onUpdate()
    SetThrowFlag(STATE_DEATH)
    FallPreventionAssist()
    if ExecSpDeath() == TRUE then
        return TRUE
    end
    if ExecTransToDeathIdle(DEATH_TYPE_STING, FALSE) == TRUE then
        return TRUE
    end
    
end

function DeathStartHeavyKnock_onUpdate()
    SetThrowFlag(STATE_DEATH)
    FallPreventionAssist()
    if ExecSpDeath() == TRUE then
        return TRUE
    end
    if ExecTransToDeathIdle(DEATH_TYPE_HEAVY_KNOCK, FALSE) == TRUE then
        return TRUE
    end
    
end

function DeathStartAntiGround_onUpdate()
    SetThrowFlag(STATE_DEATH)
    FallPreventionAssist()
    if ExecSpDeath() == TRUE then
        return TRUE
    end
    if ExecTransToDeathIdle(DEATH_TYPE_ANTI_GROUND, FALSE) == TRUE then
        return TRUE
    end
    
end

function DeathStartAntiAir_onUpdate()
    SetThrowFlag(STATE_DEATH)
    FallPreventionAssist()
    if ExecSpDeath() == TRUE then
        return TRUE
    end
    if ExecTransToDeathIdle(DEATH_TYPE_ANTI_AIR, FALSE) == TRUE then
        return TRUE
    end
    
end

function DeathStartWeak_onUpdate()
    SetThrowFlag(STATE_DEATH)
    FallPreventionAssist()
    if ExecSpDeath() == TRUE then
        return TRUE
    end
    if ExecTransToDeathIdle(DEATH_TYPE_WEAK, FALSE) == TRUE then
        return TRUE
    end
    
end

function DeathStartUniqueCase_onUpdate()
    SetThrowFlag(STATE_DEATH)
    FallPreventionAssist()
    if ExecSpDeath() == TRUE then
        return TRUE
    end
    if ExecTransToDeathIdle(DEATH_TYPE_DEFAULT, FALSE) == TRUE then
        return TRUE
    end
    
end

function DeathStartSpecialPoison_onUpdate()
    SetThrowFlag(STATE_DEATH)
    FallPreventionAssist()
    if ExecSpDeath() == TRUE then
        return TRUE
    end
    if ExecTransToDeathIdle(DEATH_TYPE_DEFAULT, FALSE) == TRUE then
        return TRUE
    end
    
end

function DeathStartHide_onUpdate()
    SetThrowFlag(STATE_DEATH)
    FallPreventionAssist()
    if ExecSpDeath() == TRUE then
        return TRUE
    end
    if ExecTransToDeathIdle(DEATH_TYPE_DEFAULT, FALSE) == TRUE then
        return TRUE
    end
    
end

function DeathStartBackReality_onUpdate()
    SetThrowFlag(STATE_DEATH)
    FallPreventionAssist()
    if ExecSpDeath() == TRUE then
        return TRUE
    end
    if ExecTransToDeathIdle(DEATH_TYPE_DEFAULT, FALSE) == TRUE then
        return TRUE
    end
    
end

function DeathStartBlast_onActivate()
    FaceAttacker(0)
    
end

function DeathStartBlast_onUpdate()
    SetThrowFlag(STATE_DEATH)
    FallPreventionAssist()
    if env(IsFalling) == TRUE and IsExistAnime(ANIME_ID_FALLING_UPWARD + 1) == TRUE then
        Fire("W_FallingDeathUpward")
        return TRUE
    end
    if ExecSpDeath() == TRUE then
        return TRUE
    end
    if ExecTransToDeathIdle(DEATH_TYPE_BLAST, FALSE) == TRUE then
        return TRUE
    end
    
end

function DeathStartFling_onUpdate()
    SetThrowFlag(STATE_DEATH)
    FallPreventionAssist()
    if ExecSpDeath() == TRUE then
        return TRUE
    end
    if ExecTransToDeathIdle(DEATH_TYPE_FLING, FALSE) == TRUE then
        return TRUE
    end
    
end

function DeathStartUpper_onUpdate()
    SetThrowFlag(STATE_DEATH)
    FallPreventionAssist()
    if ExecSpDeath() == TRUE then
        return TRUE
    end
    if ExecTransToDeathIdle(DEATH_TYPE_UPPER, FALSE) == TRUE then
        return TRUE
    end
    
end

function DeathStartLandDefault_onUpdate()
    SetThrowFlag(STATE_DEATH)
    FallPreventionAssist()
    if ExecSpDeath() == TRUE then
        return TRUE
    end
    if ExecTransToDeathIdle(DEATH_TYPE_LAND_DEFAULT, FALSE) == TRUE then
        return TRUE
    end
    
end

function DeathStartLandUpward_onUpdate()
    SetThrowFlag(STATE_DEATH)
    FallPreventionAssist()
    if ExecSpDeath() == TRUE then
        return TRUE
    end
    if ExecTransToDeathIdle(DEATH_TYPE_LAND_UPWARD, FALSE) == TRUE then
        return TRUE
    end
    
end

function DeathStartLandDownward_onUpdate()
    SetThrowFlag(STATE_DEATH)
    FallPreventionAssist()
    if ExecSpDeath() == TRUE then
        return TRUE
    end
    if ExecTransToDeathIdle(DEATH_TYPE_LAND_DOWNWARD, FALSE) == TRUE then
        return TRUE
    end
    
end

function DeathAerialFront_onUpdate()
    SetThrowFlag(STATE_DEATH)
    if ExecDeath(LAND_UPWARD) == TRUE then
        return TRUE
    end
    if env(IsFalling) == TRUE or env(IsAnimEnd, 1) == TRUE then
        Fire("W_FallStartDeathUpward")
        return TRUE
    end
    
end

function DeathAerialBack_onUpdate()
    SetThrowFlag(STATE_DEATH)
    if ExecDeath(LAND_DOWNWARD) == TRUE then
        return TRUE
    end
    if env(IsFalling) == TRUE or env(IsAnimEnd, 1) == TRUE then
        Fire("W_FallStartDeathDownward")
        return TRUE
    end
    
end

function DeathAerialBlow_onUpdate()
    SetThrowFlag(STATE_DEATH)
    if env(IsFalling) == TRUE and IsExistAnime(ANIME_ID_FALLING_UPWARD + 1) == TRUE then
        Fire("W_FallingDeathUpward")
        return TRUE
    end
    if ExecSpDeath() == TRUE then
        return TRUE
    end
    if ExecTransToDeathIdle(DEATH_TYPE_BLAST, FALSE) == TRUE then
        return TRUE
    end
    
end

function DeathIdleDefault_onUpdate()
    SetThrowFlag(STATE_DEATH)
    
end

function DeathIdleUniqueCase_onUpdate()
    SetThrowFlag(STATE_DEATH)
    
end

function DeathIdleWeak_onUpdate()
    SetThrowFlag(STATE_DEATH)
    
end

function DeathIdleBlast_onUpdate()
    SetThrowFlag(STATE_DEATH)
    
end

function DeathIdleFling_onUpdate()
    SetThrowFlag(STATE_DEATH)
    
end

function DeathIdleUpper_onUpdate()
    SetThrowFlag(STATE_DEATH)
    
end

function DeathIdleLandDefault_onUpdate()
    SetThrowFlag(STATE_DEATH)
    
end

function DeathIdleLandUpward_onUpdate()
    SetThrowFlag(STATE_DEATH)
    
end

function DeathIdleLandDownward_onUpdate()
    SetThrowFlag(STATE_DEATH)
    
end

function DeathIdleSpecial_onUpdate()
    SetThrowFlag(STATE_DEATH)
    
end

function DeathIdleReturn_onUpdate()
    SetThrowFlag(STATE_DEATH)
    
end

function FallStartDefault_onUpdate()
    SetThrowFlag(STATE_FALL)
    if FallCommonFunction(LAND_DEFAULT) == TRUE then
        return TRUE
    end
    
end

function FallingDefault_onUpdate()
    SetThrowFlag(STATE_FALL)
    if FallCommonFunction(LAND_DEFAULT) == TRUE then
        return TRUE
    end
    
end

function FallStartUpward_onUpdate()
    SetThrowFlag(STATE_FALL)
    if FallCommonFunction(LAND_UPWARD) == TRUE then
        return TRUE
    end
    
end

function FallingUpward_onUpdate()
    SetThrowFlag(STATE_FALL)
    if FallCommonFunction(LAND_UPWARD) == TRUE then
        return TRUE
    end
    
end

function FallStartDownward_onUpdate()
    SetThrowFlag(STATE_FALL)
    if FallCommonFunction(LAND_DOWNWARD) == TRUE then
        return TRUE
    end
    
end

function FallingDownward_onUpdate()
    SetThrowFlag(STATE_FALL)
    if FallCommonFunction(LAND_DOWNWARD) == TRUE then
        return TRUE
    end
    
end

function FallStartDeathUpward_onUpdate()
    SetThrowFlag(STATE_FALL)
    if ExecDeath(LAND_UPWARD) == TRUE then
        return TRUE
    end
    
end

function FallingDeathUpward_onUpdate()
    SetThrowFlag(STATE_FALL)
    if ExecDeath(LAND_UPWARD) == TRUE then
        return TRUE
    end
    
end

function FallStartDeathDownward_onUpdate()
    SetThrowFlag(STATE_FALL)
    if ExecDeath(LAND_DOWNWARD) == TRUE then
        return TRUE
    end
    
end

function FallingDeathDownward_onUpdate()
    SetThrowFlag(STATE_FALL)
    if ExecDeath(LAND_DOWNWARD) == TRUE then
        return TRUE
    end
    
end

function FallStartTrunk_onUpdate()
    SetThrowFlag(STATE_FALL)
    if FallCommonFunction(LAND_TRUNK) == TRUE then
        return TRUE
    end
    
end

function FallLoopTrunk_onUpdate()
    SetThrowFlag(STATE_FALL)
    if FallCommonFunction(LAND_TRUNK) == TRUE then
        return TRUE
    end
    
end

function LandDefault_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if LandCommonFunction(DAMAGE_TRANSITION_RANK__4) == TRUE then
        return TRUE
    end
    
end

function LandHeavy_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if LandCommonFunction(DAMAGE_TRANSITION_RANK__4) == TRUE then
        return TRUE
    end
    
end

function LandUpward_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if LandCommonFunction(DAMAGE_TRANSITION_RANK__4) == TRUE then
        return TRUE
    end
    
end

function LandDownward_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if LandCommonFunction(DAMAGE_TRANSITION_RANK__4) == TRUE then
        return TRUE
    end
    
end

function LandTrunk_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if env(GetBehaviorID, BEH_IDENTIFIER_KICK) == TRUE then
        FaceAttacker(0)
        Fire("W_TrunkCollapseLarge")
        return TRUE
    end
    if LandCommonFunction(DAMAGE_TRANSITION_RANK__2) == TRUE then
        return TRUE
    end
    
end

function ThrowAtk4000_onUpdate()
    if ThrowAtkCommonFunction() == TRUE then
        return TRUE
    end
    
end

function ThrowAtk4100_onUpdate()
    if ThrowAtkCommonFunction() == TRUE then
        return TRUE
    end
    
end

function ThrowAtk4110_onUpdate()
    if ThrowAtkCommonFunction() == TRUE then
        return TRUE
    end
    
end

function ThrowAtk4120_onUpdate()
    if ThrowAtkCommonFunction() == TRUE then
        return TRUE
    end
    
end

function ThrowDef12000_onUpdate()
    if ThrowDefCommonFunction() == TRUE then
        return TRUE
    end
    
end

function ThrowDef12090_onUpdate()
    SetThrowFlag(STATE_DEATH)
    FallPreventionAssist()
    if ExecEventTrandition() == TRUE then
        return TRUE
    end
    if ExecTransToDeathIdle(DEATH_TYPE_THROW_DEF, FALSE) == TRUE then
        return TRUE
    end
    
end

function ThrowDef12100_onUpdate()
    if ThrowDefCommonFunction() == TRUE then
        return TRUE
    end
    
end

function ThrowDef12110_onUpdate()
    if ThrowDefCommonFunction() == TRUE then
        return TRUE
    end
    
end

function ThrowDef12120_onUpdate()
    if ThrowDefCommonFunction() == TRUE then
        return TRUE
    end
    
end

function ThrowDef12190_onUpdate()
    SetThrowFlag(STATE_DEATH)
    FallPreventionAssist()
    if ExecEventTrandition() == TRUE then
        return TRUE
    end
    if ExecTransToDeathIdle(DEATH_TYPE_THROW_DEF, FALSE) == TRUE then
        return TRUE
    end
    
end

function ThrowDef12200_onUpdate()
    if ThrowDefCommonFunction() == TRUE then
        return TRUE
    end
    
end

function ThrowDef12210_onUpdate()
    SetThrowFlag(STATE_DEATH)
    FallPreventionAssist()
    if ExecSpDeath() == TRUE then
        return TRUE
    end
    if ExecTransToDeathIdle(DEATH_TYPE_THROW_DEF, FALSE) == TRUE then
        return TRUE
    end
    
end

function ThrowDef12220_onUpdate()
    if ThrowDefCommonFunction() == TRUE then
        return TRUE
    end
    
end

function ThrowDef12230_onUpdate()
    SetThrowFlag(STATE_DEATH)
    FallPreventionAssist()
    if ExecSpDeath() == TRUE then
        return TRUE
    end
    if ExecTransToDeathIdle(DEATH_TYPE_THROW_DEF, FALSE) == TRUE then
        return TRUE
    end
    
end

function ThrowDef12300_onUpdate()
    if ThrowDefCommonFunction() == TRUE then
        return TRUE
    end
    
end

function ThrowDef12310_onUpdate()
    if ThrowDefCommonFunction() == TRUE then
        return TRUE
    end
    
end

function ThrowDef12320_onUpdate()
    if ThrowDefCommonFunction() == TRUE then
        return TRUE
    end
    
end

function ThrowDef12400_onUpdate()
    if ThrowDefCommonFunction() == TRUE then
        return TRUE
    end
    
end

function ThrowDef12410_onUpdate()
    if ThrowDefCommonFunction() == TRUE then
        return TRUE
    end
    
end

function ThrowDef12500_onUpdate()
    if ThrowDefCommonFunction() == TRUE then
        return TRUE
    end
    
end

function ThrowDef12600_onUpdate()
    if ThrowDefCommonFunction() == TRUE then
        return TRUE
    end
    
end

function ThrowDef12700_onUpdate()
    if ThrowDefCommonFunction() == TRUE then
        return TRUE
    end
    
end

function ThrowDef12800_onUpdate()
    if ThrowDefCommonFunction() == TRUE then
        return TRUE
    end
    
end

function ThrowDef12900_onUpdate()
    if env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_5010_EVENT_TRANSITION) == TRUE then
        if env(IsAnimEnd, 1) == TRUE then
            Replanning()
            Fire("W_Event21003")
            return TRUE
        end
    elseif env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_SAME_THRWO_DEF) == TRUE then
        if ThrowDefCommonFunction() == TRUE then
            return TRUE
        end
    elseif env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_SAME_THRWO_DEF_DEATH) == TRUE then
        FallPreventionAssist()
        if ExecSpDeath() == TRUE then
            return TRUE
        end
        if ExecTransToDeathIdle(DEATH_TYPE_THROW_DEF, FALSE) == TRUE then
            return TRUE
        end
    else
        FallPreventionAssist()
        if ExecTransToDeathIdle(DEATH_TYPE_THROW_DEF, FALSE) == TRUE then
            return TRUE
        end
    end
    
end

function ThrowDef12950_onUpdate()
    if env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_SAME_THRWO_DEF) == TRUE then
        if ThrowDefCommonFunction() == TRUE then
            return TRUE
        end
    elseif env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_SAME_THRWO_DEF_DEATH) == TRUE then
        FallPreventionAssist()
        if ExecSpDeath() == TRUE then
            return TRUE
        end
        if ExecTransToDeathIdle(DEATH_TYPE_THROW_DEF, FALSE) == TRUE then
            return TRUE
        end
    else
        FallPreventionAssist()
        if ExecTransToDeathIdle(DEATH_TYPE_THROW_DEF, FALSE) == TRUE then
            return TRUE
        end
    end
    
end

function ThrowDef13000_onUpdate()
    if ThrowDefCommonFunction() == TRUE then
        return TRUE
    end
    
end

function ThrowDef13100_onUpdate()
    if ThrowDefCommonFunction() == TRUE then
        return TRUE
    end
    
end

function ThrowDef13110_onUpdate()
    if ThrowDefCommonFunction() == TRUE then
        return TRUE
    end
    
end

function ThrowDef13120_onUpdate()
    if ThrowDefCommonFunction() == TRUE then
        return TRUE
    end
    
end

function ThrowDef13200_onUpdate()
    if ThrowDefCommonFunction() == TRUE then
        return TRUE
    end
    
end

function ThrowDef13210_onUpdate()
    SetThrowFlag(STATE_DEATH)
    FallPreventionAssist()
    if ExecTransToDeathIdle(DEATH_TYPE_THROW_DEF, FALSE) == TRUE then
        return TRUE
    end
    
end

function ThrowDef13220_onUpdate()
    if ThrowDefCommonFunction() == TRUE then
        return TRUE
    end
    
end

function ThrowDef13230_onUpdate()
    SetThrowFlag(STATE_DEATH)
    FallPreventionAssist()
    if ExecTransToDeathIdle(DEATH_TYPE_THROW_DEF, FALSE) == TRUE then
        return TRUE
    end
    
end

function ThrowDef13290_onUpdate()
    SetThrowFlag(STATE_DEATH)
    FallPreventionAssist()
    if ExecEventTrandition() == TRUE then
        return TRUE
    end
    if ExecTransToDeathIdle(DEATH_TYPE_THROW_DEF, FALSE) == TRUE then
        return TRUE
    end
    
end

function ThrowDef13300_onUpdate()
    if LandingDecision(LAND_DEFAULT) == TRUE then
        act(SetThrowState, THROW_STATE_NONE)
        Replanning()
        Fire("W_LandDefault")
        return TRUE
    end
    if ThrowDefCommonFunction() == TRUE then
        return TRUE
    end
    
end

function ThrowDef13310_onUpdate()
    if ThrowDefCommonFunction() == TRUE then
        return TRUE
    end
    
end

function ThrowDef13400_onUpdate()
    if ThrowDefCommonFunction() == TRUE then
        return TRUE
    end
    
end

function ThrowDef13410_onUpdate()
    if ThrowDefCommonFunction() == TRUE then
        return TRUE
    end
    
end

function ThrowDef13500_onUpdate()
    if ThrowDefCommonFunction() == TRUE then
        return TRUE
    end
    
end

function ThrowDef13510_onUpdate()
    if ThrowDefCommonFunction() == TRUE then
        return TRUE
    end
    
end

function ThrowDef13600_onUpdate()
    if ThrowDefCommonFunction() == TRUE then
        return TRUE
    end
    
end

function ThrowDef13610_onUpdate()
    if ThrowDefCommonFunction() == TRUE then
        return TRUE
    end
    
end

function ThrowDef13690_onUpdate()
    SetThrowFlag(STATE_DEATH)
    FallPreventionAssist()
    if ExecEventTrandition() == TRUE then
        return TRUE
    end
    if ExecTransToDeathIdle(DEATH_TYPE_THROW_DEF, FALSE) == TRUE then
        return TRUE
    end
    
end

function ThrowDef13700_onUpdate()
    SetThrowFlag(STATE_DEATH)
    FallPreventionAssist()
    if ExecEventTrandition() == TRUE then
        return TRUE
    end
    if ExecTransToDeathIdle(DEATH_TYPE_THROW_DEF, FALSE) == TRUE then
        return TRUE
    end
    
end

function ThrowDef13800_onUpdate()
    if ThrowDefCommonFunction() == TRUE then
        return TRUE
    end
    
end

function ThrowDef13900_onUpdate()
    if ThrowDefCommonFunction() == TRUE then
        return TRUE
    end
    
end

function ThrowDef14000_onUpdate()
    SetThrowFlag(STATE_DEATH)
    FallPreventionAssist()
    if ExecTransToDeathIdle(DEATH_TYPE_THROW_DEF, FALSE) == TRUE then
        return TRUE
    end
    
end

function ThrowDef14100_onUpdate()
    SetThrowFlag(STATE_DEATH)
    FallPreventionAssist()
    if ExecTransToDeathIdle(DEATH_TYPE_THROW_DEF, FALSE) == TRUE then
        return TRUE
    end
    
end

function ThrowDef14200_onUpdate()
    SetThrowFlag(STATE_DEATH)
    FallPreventionAssist()
    if ExecTransToDeathIdle(DEATH_TYPE_THROW_DEF, FALSE) == TRUE then
        return TRUE
    end
    
end

function ThrowDef14300_onUpdate()
    SetThrowFlag(STATE_DEATH)
    FallPreventionAssist()
    if ExecSpDeath() == TRUE then
        return TRUE
    end
    if ExecTransToDeathIdle(DEATH_TYPE_THROW_DEF, FALSE) == TRUE then
        return TRUE
    end
    
end

function ThrowDef14400_onUpdate()
    if ThrowDefCommonFunction() == TRUE then
        return TRUE
    end
    
end

function ThrowDef14500_onUpdate()
    if ThrowDefCommonFunction() == TRUE then
        return TRUE
    end
    
end

function ThrowDef17000_onUpdate()
    if ThrowDefCommonFunction() == TRUE then
        return TRUE
    end
    
end

function ThrowDef17200_onUpdate()
    if ThrowDefCommonFunction() == TRUE then
        return TRUE
    end
    
end

function ThrowDef17210_onUpdate()
    SetThrowFlag(STATE_DEATH)
    FallPreventionAssist()
    if ExecSpDeath() == TRUE then
        return TRUE
    end
    if ExecTransToDeathIdle(DEATH_TYPE_THROW_DEF, FALSE) == TRUE then
        return TRUE
    end
    
end

function ThrowDef17220_onUpdate()
    if ThrowDefCommonFunction() == TRUE then
        return TRUE
    end
    
end

function ThrowDef17230_onUpdate()
    SetThrowFlag(STATE_DEATH)
    FallPreventionAssist()
    if ExecSpDeath() == TRUE then
        return TRUE
    end
    if ExecTransToDeathIdle(DEATH_TYPE_THROW_DEF, FALSE) == TRUE then
        return TRUE
    end
    
end

function ThrowDef17300_onUpdate()
    if ThrowDefCommonFunction() == TRUE then
        return TRUE
    end
    
end

function ThrowDef17310_onUpdate()
    if ThrowDefCommonFunction() == TRUE then
        return TRUE
    end
    
end

function ThrowDef18200_onUpdate()
    if ThrowDefCommonFunction() == TRUE then
        return TRUE
    end
    
end

function ThrowDef18210_onUpdate()
    SetThrowFlag(STATE_DEATH)
    FallPreventionAssist()
    if ExecSpDeath() == TRUE then
        return TRUE
    end
    if ExecTransToDeathIdle(DEATH_TYPE_THROW_DEF, FALSE) == TRUE then
        return TRUE
    end
    
end

function ThrowDef18220_onUpdate()
    if ThrowDefCommonFunction() == TRUE then
        return TRUE
    end
    
end

function ThrowDef18230_onUpdate()
    SetThrowFlag(STATE_DEATH)
    FallPreventionAssist()
    if ExecSpDeath() == TRUE then
        return TRUE
    end
    if ExecTransToDeathIdle(DEATH_TYPE_THROW_DEF, FALSE) == TRUE then
        return TRUE
    end
    
end

function ThrowDef18400_onUpdate()
    if ThrowDefCommonFunction() == TRUE then
        return TRUE
    end
    
end

function ThrowDef18410_onUpdate()
    if ThrowDefCommonFunction() == TRUE then
        return TRUE
    end
    
end

function ThrowDef18500_onUpdate()
    if ThrowDefCommonFunction() == TRUE then
        return TRUE
    end
    
end

function ThrowDef18510_onUpdate()
    if ThrowDefCommonFunction() == TRUE then
        return TRUE
    end
    
end

function ThrowRelease4102_onUpdate()
    SetThrowFlag(STATE_THROW_ATK)
    if ThrowCommonFunction() == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function ThrowRelease4112_onUpdate()
    SetThrowFlag(STATE_THROW_ATK)
    if ThrowCommonFunction() == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function ThrowRelease4122_onUpdate()
    SetThrowFlag(STATE_THROW_ATK)
    if ThrowCommonFunction() == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function ThrowRelease4132_onUpdate()
    SetThrowFlag(STATE_THROW_ATK)
    if ThrowCommonFunction() == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function ThrowKill4001_onUpdate()
    if ThrowKillCommonFunction() == TRUE then
        return TRUE
    end
    
end

function ThrowKill4101_onUpdate()
    if ThrowKillCommonFunction() == TRUE then
        return TRUE
    end
    
end

function ThrowKill4111_onUpdate()
    if ThrowKillCommonFunction() == TRUE then
        return TRUE
    end
    
end

function ThrowKill4121_onUpdate()
    if ThrowKillCommonFunction() == TRUE then
        return TRUE
    end
    
end

function ThrowDefDeath12001_onUpdate()
    if ThrowDefDeathCommonFunction() == TRUE then
        return TRUE
    end
    
end

function ThrowDefDeath12001_onDeativate()
    
end

function ThrowDefDeath12111_onUpdate()
    if ThrowDefDeathCommonFunction() == TRUE then
        return TRUE
    end
    
end

function ThrowDefDeath12111_onDeativate()
    
end

function ThrowDefDeath12201_onUpdate()
    if ThrowDefDeathCommonFunction() == TRUE then
        return TRUE
    end
    
end

function ThrowDefDeath12201_onDeativate()
    
end

function ThrowDefDeath12211_onUpdate()
    if ThrowDefDeathCommonFunction() == TRUE then
        return TRUE
    end
    
end

function ThrowDefDeath12211_onDeativate()
    
end

function ThrowDefDeath12231_onUpdate()
    if ThrowDefDeathCommonFunction() == TRUE then
        return TRUE
    end
    
end

function ThrowDefDeath12231_onDeativate()
    
end

function ThrowDefDeath12311_onUpdate()
    if ThrowDefDeathCommonFunction() == TRUE then
        return TRUE
    end
    
end

function ThrowDefDeath12311_onDeativate()
    
end

function ThrowDefDeath12411_onUpdate()
    if ThrowDefDeathCommonFunction() == TRUE then
        return TRUE
    end
    
end

function ThrowDefDeath12411_onDeativate()
    
end

function ThrowDefDeath12501_onUpdate()
    if ThrowDefDeathCommonFunction() == TRUE then
        return TRUE
    end
    
end

function ThrowDefDeath12501_onDeativate()
    
end

function ThrowDefDeath12601_onUpdate()
    if ThrowDefDeathCommonFunction() == TRUE then
        return TRUE
    end
    
end

function ThrowDefDeath12601_onDeativate()
    
end

function ThrowDefDeath12701_onUpdate()
    if ThrowDefDeathCommonFunction() == TRUE then
        return TRUE
    end
    
end

function ThrowDefDeath12701_onDeativate()
    
end

function ThrowDefDeath12901_onUpdate()
    if ThrowDefDeathCommonFunction() == TRUE then
        return TRUE
    end
    
end

function ThrowDefDeath12901_onDeativate()
    
end

function ThrowDefDeath12951_onUpdate()
    if ThrowDefDeathCommonFunction() == TRUE then
        return TRUE
    end
    
end

function ThrowDefDeath12951_onDeativate()
    
end

function ThrowDefDeath13111_onUpdate()
    if ThrowDefDeathCommonFunction() == TRUE then
        return TRUE
    end
    
end

function ThrowDefDeath13111_onDeativate()
    
end

function ThrowDefDeath13201_onUpdate()
    if ThrowDefDeathCommonFunction() == TRUE then
        return TRUE
    end
    
end

function ThrowDefDeath13201_onDeativate()
    
end

function ThrowDefDeath13411_onUpdate()
    if ThrowDefDeathCommonFunction() == TRUE then
        return TRUE
    end
    
end

function ThrowDefDeath13411_onDeativate()
    
end

function ThrowDefDeath13511_onUpdate()
    if ThrowDefDeathCommonFunction() == TRUE then
        return TRUE
    end
    
end

function ThrowDefDeath13511_onDeativate()
    
end

function ThrowDefDeath13611_onUpdate()
    if ThrowDefDeathCommonFunction() == TRUE then
        return TRUE
    end
    
end

function ThrowDefDeath13611_onDeativate()
    
end

function ThrowDefDeath14401_onUpdate()
    if ThrowDefDeathCommonFunction() == TRUE then
        return TRUE
    end
    
end

function ThrowDefDeath14401_onDeativate()
    
end

function ThrowDefDeath14501_onUpdate()
    if ThrowDefDeathCommonFunction() == TRUE then
        return TRUE
    end
    
end

function ThrowDefDeath14501_onDeativate()
    
end

function ThrowDefDeath17001_onUpdate()
    if ThrowDefDeathCommonFunction() == TRUE then
        return TRUE
    end
    
end

function ThrowDefDeath17001_onDeativate()
    
end

function ThrowDefDeath17201_onUpdate()
    if ThrowDefDeathCommonFunction() == TRUE then
        return TRUE
    end
    
end

function ThrowDefDeath17201_onDeativate()
    
end

function ThrowDefDeath17311_onUpdate()
    if ThrowDefDeathCommonFunction() == TRUE then
        return TRUE
    end
    
end

function ThrowDefDeath17311_onDeativate()
    
end

function ThrowDefDeath18201_onUpdate()
    if ThrowDefDeathCommonFunction() == TRUE then
        return TRUE
    end
    
end

function ThrowDefDeath18201_onDeativate()
    
end

function ThrowDefDeath18411_onUpdate()
    if ThrowDefDeathCommonFunction() == TRUE then
        return TRUE
    end
    
end

function ThrowDefDeath18411_onDeativate()
    
end

function ThrowDefDeath18511_onUpdate()
    if ThrowDefDeathCommonFunction() == TRUE then
        return TRUE
    end
    
end

function ThrowDefDeath18511_onDeativate()
    
end

function ThrowDefDeathIdle_onUpdate()
    SetThrowFlag(STATE_DEATH)
    
end

function FallingThrowDefFront_onUpdate()
    SetThrowFlag(STATE_FALL)
    if FallCommonFunction(LAND_THROWDEF_FRONT) == TRUE then
        return TRUE
    end
    
end

function FallingThrowDefFrontDeath_onUpdate()
    SetThrowFlag(STATE_DEATH)
    if ExecDeath(LAND_THROWDEF_FRONT) == TRUE then
        return TRUE
    end
    
end

function LandThrowDefFront_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if LandCommonFunction(DAMAGE_TRANSITION_RANK__4) == TRUE then
        return TRUE
    end
    
end

function DeathStartLandThrowDefFront_onUpdate()
    SetThrowFlag(STATE_DEATH)
    if ExecSpDeath() == TRUE then
        return TRUE
    end
    if ExecTransToDeathIdle(DEATH_TYPE_LAND_THROW_DEF_FRONT, FALSE) == TRUE then
        return TRUE
    end
    
end

function FallingThrowDefBack_onUpdate()
    SetThrowFlag(STATE_FALL)
    if FallCommonFunction(LAND_THROWDEF_BACK) == TRUE then
        return TRUE
    end
    
end

function FallingThrowDefBackDeath_onUpdate()
    SetThrowFlag(STATE_DEATH)
    if ExecDeath(LAND_THROWDEF_BACK) == TRUE then
        return TRUE
    end
    
end

function LandThrowDefBack_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if LandCommonFunction(DAMAGE_TRANSITION_RANK__4) == TRUE then
        return TRUE
    end
    
end

function DeathStartLandThrowDefBack_onUpdate()
    SetThrowFlag(STATE_DEATH)
    if ExecSpDeath() == TRUE then
        return TRUE
    end
    if ExecTransToDeathIdle(DEATH_TYPE_LAND_THROW_DEF_BACK, FALSE) == TRUE then
        return TRUE
    end
    
end

function FallingThrowDefAntiAir_onUpdate()
    SetThrowFlag(STATE_FALL)
    if FallCommonFunction(LAND_THROWDEF_ANTIAIR) == TRUE then
        return TRUE
    end
    
end

function FallingThrowDefAntiAirDeath_onUpdate()
    SetThrowFlag(STATE_DEATH)
    if ExecDeath(LAND_THROWDEF_ANTIAIR) == TRUE then
        return TRUE
    end
    
end

function LandThrowDefAntiAir_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if LandCommonFunction(DAMAGE_TRANSITION_RANK__4) == TRUE then
        return TRUE
    end
    
end

function DeathStartLandThrowDefAntiAir_onUpdate()
    SetThrowFlag(STATE_DEATH)
    if ExecSpDeath() == TRUE then
        return TRUE
    end
    if ExecTransToDeathIdle(DEATH_TYPE_LAND_THROW_DEF_ANTI_AIR, FALSE) == TRUE then
        return TRUE
    end
    
end

function GuardIdle_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if IdleCommonFunction(STYLE_GUARD, ANIME_ID_IDLE_GURD) == TRUE then
        return TRUE
    end
    
end

function GuardStart_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if TransStyleCommonFunction(STYLE_GUARD) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        Fire("W_GuardIdle")
        return TRUE
    end
    
end

function GuardEnd_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if TransStyleCommonFunction(STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function GuardAttack503000_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(503000, STYLE_GUARD) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        Fire("W_GuardIdle")
        return TRUE
    end
    
end

function GuardAttack503001_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(503001, STYLE_GUARD) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        Fire("W_GuardIdle")
        return TRUE
    end
    
end

function GuardAttack503002_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(503002, STYLE_GUARD) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        Fire("W_GuardIdle")
        return TRUE
    end
    
end

function GuardAttack503003_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(503003, STYLE_GUARD) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        Fire("W_GuardIdle")
        return TRUE
    end
    
end

function GuardAttack503004_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(503004, STYLE_GUARD) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        Fire("W_GuardIdle")
        return TRUE
    end
    
end

function GuardAttack503005_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(503005, STYLE_GUARD) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        Fire("W_GuardIdle")
        return TRUE
    end
    
end

function GuardAttack503006_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(503006, STYLE_GUARD) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        Fire("W_GuardIdle")
        return TRUE
    end
    
end

function GuardAttack503007_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(503007, STYLE_GUARD) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        Fire("W_GuardIdle")
        return TRUE
    end
    
end

function GuardAttack503008_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(503008, STYLE_GUARD) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        Fire("W_GuardIdle")
        return TRUE
    end
    
end

function GuardAttack503009_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(503009, STYLE_GUARD) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        Fire("W_GuardIdle")
        return TRUE
    end
    
end

function GuardWalkFront_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if MoveCommonFunction(STYLE_GUARD, MOVE_TYPE_WALK_FRONT) == TRUE then
        return TRUE
    end
    
end

function GuardWalkBack_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if MoveCommonFunction(STYLE_GUARD, MOVE_TYPE_WALK_BACK) == TRUE then
        return TRUE
    end
    
end

function GuardWalkLeft_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if MoveCommonFunction(STYLE_GUARD, MOVE_TYPE_WALK_LEFT) == TRUE then
        return TRUE
    end
    
end

function GuardWalkRight_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if MoveCommonFunction(STYLE_GUARD, MOVE_TYPE_WALK_RIGHT) == TRUE then
        return TRUE
    end
    
end

function GuardRun_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if MoveCommonFunction(STYLE_GUARD, MOVE_TYPE_RUN_FRONT) == TRUE then
        return TRUE
    end
    
end

function TurnGuard_Left90_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if TurnCommonFunction(STYLE_GUARD) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        Fire("W_GuardIdle")
        return TRUE
    end
    
end

function TurnGuard_Right90_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if TurnCommonFunction(STYLE_GUARD) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        Fire("W_GuardIdle")
        return TRUE
    end
    
end

function TurnGuard_Left180_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if TurnCommonFunction(STYLE_GUARD) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        Fire("W_GuardIdle")
        return TRUE
    end
    
end

function TurnGuard_Right180_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if TurnCommonFunction(STYLE_GUARD) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        Fire("W_GuardIdle")
        return TRUE
    end
    
end

function TurnGuard_Left45_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if TurnCommonFunction(STYLE_GUARD) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        Fire("W_GuardIdle")
        return TRUE
    end
    
end

function TurnGuard_Right45_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if TurnCommonFunction(STYLE_GUARD) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        Fire("W_GuardIdle")
        return TRUE
    end
    
end

function GeneralStanceIdle_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if IdleCommonFunction(STYLE_GENERAL_STANCE, ANIME_ID_IDLE_GENERAL_STANCE) == TRUE then
        return TRUE
    end
    
end

function GeneralStanceStart401060_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(401060, STYLE_GENERAL_STANCE) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        Fire("W_GeneralStanceIdle")
        return TRUE
    end
    
end

function GeneralStanceStart401061_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(401061, STYLE_GENERAL_STANCE) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        Fire("W_GeneralStanceIdle")
        return TRUE
    end
    
end

function GeneralStanceStart401062_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(401062, STYLE_GENERAL_STANCE) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        Fire("W_GeneralStanceIdle")
        return TRUE
    end
    
end

function GeneralStanceStart401063_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(401063, STYLE_GENERAL_STANCE) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        Fire("W_GeneralStanceIdle")
        return TRUE
    end
    
end

function GeneralStanceStart401064_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(401064, STYLE_GENERAL_STANCE) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        Fire("W_GeneralStanceIdle")
        return TRUE
    end
    
end

function GeneralStanceEnd601040_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(601040, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function GeneralStanceEnd601041_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(601041, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function GeneralStanceEnd601042_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(601042, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function GeneralStanceEnd601043_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(601043, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function GeneralStanceEnd601044_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(601044, STYLE_DEFAULT) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function GeneralStanceAttack603000_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(603000, STYLE_GENERAL_STANCE) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        Fire("W_GeneralStanceIdle")
        return TRUE
    end
    
end

function GeneralStanceAttack603001_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(603001, STYLE_GENERAL_STANCE) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        Fire("W_GeneralStanceIdle")
        return TRUE
    end
    
end

function GeneralStanceAttack603002_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(603002, STYLE_GENERAL_STANCE) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        Fire("W_GeneralStanceIdle")
        return TRUE
    end
    
end

function GeneralStanceAttack603003_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(603003, STYLE_GENERAL_STANCE) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        Fire("W_GeneralStanceIdle")
        return TRUE
    end
    
end

function GeneralStanceAttack603004_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(603004, STYLE_GENERAL_STANCE) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        Fire("W_GeneralStanceIdle")
        return TRUE
    end
    
end

function GeneralStanceAttack603005_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(603005, STYLE_GENERAL_STANCE) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        Fire("W_GeneralStanceIdle")
        return TRUE
    end
    
end

function GeneralStanceAttack603006_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(603006, STYLE_GENERAL_STANCE) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        Fire("W_GeneralStanceIdle")
        return TRUE
    end
    
end

function GeneralStanceAttack603007_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(603007, STYLE_GENERAL_STANCE) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        Fire("W_GeneralStanceIdle")
        return TRUE
    end
    
end

function GeneralStanceAttack603008_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(603008, STYLE_GENERAL_STANCE) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        Fire("W_GeneralStanceIdle")
        return TRUE
    end
    
end

function GeneralStanceAttack603009_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    FallPreventionAssist()
    if AttackCommonFunction(603009, STYLE_GENERAL_STANCE) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        Fire("W_GeneralStanceIdle")
        return TRUE
    end
    
end

function GeneralStanceWalkFront_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if MoveCommonFunction(STYLE_GENERAL_STANCE, MOVE_TYPE_WALK_FRONT) == TRUE then
        return TRUE
    end
    
end

function GeneralStanceWalkBack_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if MoveCommonFunction(STYLE_GENERAL_STANCE, MOVE_TYPE_WALK_BACK) == TRUE then
        return TRUE
    end
    
end

function GeneralStanceWalkLeft_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if MoveCommonFunction(STYLE_GENERAL_STANCE, MOVE_TYPE_WALK_LEFT) == TRUE then
        return TRUE
    end
    
end

function GeneralStanceWalkRight_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if MoveCommonFunction(STYLE_GENERAL_STANCE, MOVE_TYPE_WALK_RIGHT) == TRUE then
        return TRUE
    end
    
end

function GeneralStanceRunFront_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if MoveCommonFunction(STYLE_GENERAL_STANCE, MOVE_TYPE_RUN_FRONT) == TRUE then
        return TRUE
    end
    
end

function GeneralStanceTrun_Left90_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if TurnCommonFunction(STYLE_GENERAL_STANCE) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        Fire("W_GeneralStanceIdle")
        return TRUE
    end
    
end

function GeneralStanceTrun_Right90_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if TurnCommonFunction(STYLE_GENERAL_STANCE) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        Fire("W_GeneralStanceIdle")
        return TRUE
    end
    
end

function GeneralStanceTrun_Left180_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if TurnCommonFunction(STYLE_GENERAL_STANCE) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        Fire("W_GeneralStanceIdle")
        return TRUE
    end
    
end

function GeneralStanceTrun_Right180_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if TurnCommonFunction(STYLE_GENERAL_STANCE) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        Fire("W_GeneralStanceIdle")
        return TRUE
    end
    
end

function PartBlend_NoAdd01_onUpdate()
    SetVariable("BlendPart01", 0)
    
end

function PartBlend_NoAdd02_onUpdate()
    SetVariable("BlendPart02", 0)
    
end

function PartBlend_NoAdd03_onUpdate()
    SetVariable("BlendPart03", 0)
    
end

function PartBlend_NoAdd04_onUpdate()
    SetVariable("BlendPart04", 0)
    
end

function PartBlend_NoAdd05_onUpdate()
    SetVariable("BlendPart05", 0)
    
end

function PartBlend_NoAdd06_onUpdate()
    SetVariable("BlendPart06", 0)
    
end

function PartBlend_NoAdd07_onUpdate()
    SetVariable("BlendPart07", 0)
    
end

function PartBlend_NoAdd08_onUpdate()
    SetVariable("BlendPart08", 0)
    
end

function PartBlend_NoAdd09_onUpdate()
    SetVariable("BlendPart09", 0)
    
end

function PartBlend_NoAdd10_onUpdate()
    SetVariable("BlendPart10", 0)
    
end

function PartBlend_NoAdd11_onUpdate()
    SetVariable("BlendPart11", 0)
    
end

function PartBlend_NoAdd12_onUpdate()
    SetVariable("BlendPart12", 0)
    
end

function PartBlend_NoAdd13_onUpdate()
    SetVariable("BlendPart13", 0)
    
end

function PartBlend_NoAdd14_onUpdate()
    SetVariable("BlendPart14", 0)
    
end

function PartBlend_NoAdd15_onUpdate()
    SetVariable("BlendPart15", 0)
    
end

function PartBlend_NoAdd16_onUpdate()
    SetVariable("BlendPart16", 0)
    
end

function SABlend_NoAdd_onUpdate()
    SetVariable("BlendSA", 0)
    
end

function LipSync_onUpdate()
    local cur_val_IndexLipSync = GetVariable("IndexLipSync")
    local cur_val_LipSyncBlend00 = GetVariable("LipSyncBlend00")
    local min_val_LipSyncBlend00 = 0
    local max_val_LipSyncBlend00 = 1
    local max_inc_LipSyncBlend00 = 2.5
    local max_dec_LipSyncBlend00 = 10
    if env(LipSyncRequest) == FALSE then
        local set_val = ConvergeValue(min_val_LipSyncBlend00, cur_val_LipSyncBlend00, max_inc_LipSyncBlend00, max_dec_LipSyncBlend00)
        SetVariable("LipSyncBlend00", set_val)
    elseif cur_val_LipSyncBlend00 < max_val_LipSyncBlend00 then
        local set_val = ConvergeValue(max_val_LipSyncBlend00, cur_val_LipSyncBlend00, max_inc_LipSyncBlend00, max_dec_LipSyncBlend00)
        SetVariable("LipSyncBlend00", set_val)
    elseif env(IsAnimEnd, 1) == TRUE then
        local next_msg_value = GetRandomIndex(ANIME_ID_GENERAL_LIP_SYNC, 0, 9, 1, 0, "IndexLipSync", false)
        SetVariable("IndexLipSync", next_msg_value)
        Fire("W_LipSync")
    end
    
end

function GetNextIndexLipSync(base_anim_id, min, max, anime_id_offset, msg_offset, index_name, is_remove_cur_index)
    local msg_array = {}
    local ret = INVALID
    for anim_offset = min, max, 1 do
        local anim_offset = anim_offset * anime_id_offset
        local anim_id = base_anim_id + anim_offset
        if IsExistAnime(anim_id) == FALSE then
        elseif is_remove_cur_index and GetVariable(index_name) == anim_offset + msg_offset then
        else
            table.insert(msg_array, anim_offset + msg_offset)
        end
    end
    if #msg_array > 0 then
        local rand = math.random(1, #msg_array)
        ret = msg_array[rand]
    end
    return ret
    

end

function DamageBlend_NoAdd_onUpdate()
    SetVariable("BlendDamageDir", 0)
    
end

function LadderIdleLeft_onUpdate()
    LadderSetActionState(LADDER_ACTION_IDLE_LEFT)
    if LadderIdleCommonFunction(LADDER_HAND_LEFT) == TRUE then
        return TRUE
    end
    
end

function LadderIdleRight_onUpdate()
    LadderSetActionState(LADDER_ACTION_IDLE_RIGHT)
    if LadderIdleCommonFunction(LADDER_HAND_RIGHT) == TRUE then
        return TRUE
    end
    
end

function LadderUpRight_onActivate()
    LadderSendCommand(LADDER_COMMAND_UP)
    
end

function LadderUpRight_onUpdate()
    LadderSetActionState(LADDER_ACTION_UP_RIGHT)
    if LadderMoveCommonFunction(LADDER_HAND_LEFT) == TRUE then
        return TRUE
    end
    
end

function LadderUpRight_onActivate()
    LadderSendCommand(LADDER_COMMAND_UP)
    
end

function LadderUpRight_onUpdate()
    LadderSetActionState(LADDER_ACTION_UP_RIGHT)
    if LadderMoveCommonFunction(LADDER_HAND_LEFT) == TRUE then
        return TRUE
    end
    
end

function LadderUpLeft_onActivate()
    LadderSendCommand(LADDER_COMMAND_UP)
    
end

function LadderUpLeft_onUpdate()
    LadderSetActionState(LADDER_ACTION_UP_LEFT)
    if LadderMoveCommonFunction(LADDER_HAND_RIGHT) == TRUE then
        return TRUE
    end
    
end

function LadderDownRight_onActivate()
    LadderSendCommand(LADDER_COMMAND_DOWN)
    
end

function LadderDownRight_onUpdate()
    LadderSetActionState(LADDER_ACTION_DOWN_RIGHT)
    if LadderMoveCommonFunction(LADDER_HAND_LEFT) == TRUE then
        return TRUE
    end
    
end

function LadderDownLeft_onActivate()
    LadderSendCommand(LADDER_COMMAND_DOWN)
    
end

function LadderDownLeft_onUpdate()
    LadderSetActionState(LADDER_ACTION_DOWN_LEFT)
    if LadderMoveCommonFunction(LADDER_HAND_RIGHT) == TRUE then
        return TRUE
    end
    
end

function LadderStartTop_onActivate()
    LadderSendCommand(LADDER_COMMAND_DOWN)
    
end

function LadderStartTop_onUpdate()
    LadderSetActionState(LADDER_ACTION_START_TOP)
    if LadderStartEndCommonFunction() == TRUE then
        return TRUE
    end
    
end

function LadderStartBottom_onActivate()
    LadderSendCommand(LADDER_COMMAND_UP)
    
end

function LadderStartBottom_onUpdate()
    LadderSetActionState(LADDER_ACTION_START_BOTTOM)
    if LadderStartEndCommonFunction() == TRUE then
        return TRUE
    end
    
end

function LadderEndTopLeft_onActivate()
    LadderSendCommand(LADDER_COMMAND_UP)
    
end

function LadderEndTopLeft_onUpdate()
    LadderSetActionState(LADDER_ACTION_END_TOP)
    if LadderStartEndCommonFunction() == TRUE then
        return TRUE
    end
    
end

function LadderEndTopRight_onActivate()
    LadderSendCommand(LADDER_COMMAND_UP)
    
end

function LadderEndTopRight_onUpdate()
    LadderSetActionState(LADDER_ACTION_END_TOP)
    if LadderStartEndCommonFunction() == TRUE then
        return TRUE
    end
    
end

function LadderEndBottomLeft_onActivate()
    LadderSendCommand(LADDER_COMMAND_DOWN)
    
end

function LadderEndBottomLeft_onUpdate()
    LadderSetActionState(LADDER_ACTION_END_BOTTOM)
    if LadderStartEndCommonFunction() == TRUE then
        return TRUE
    end
    
end

function LadderEndBottomRight_onActivate()
    LadderSendCommand(LADDER_COMMAND_DOWN)
    
end

function LadderEndBottomRight_onUpdate()
    LadderSetActionState(LADDER_ACTION_END_BOTTOM)
    if LadderStartEndCommonFunction() == TRUE then
        return TRUE
    end
    
end

function LadderAttackDownLeft_onUpdate()
    LadderSetActionState(LADDER_ACTION_ATTACK_DOWN_LEFT)
    if LadderAttackCommonFunction(LADDER_HAND_LEFT) == TRUE then
        return TRUE
    end
    
end

function LadderAttackDownRight_onUpdate()
    LadderSetActionState(LADDER_ACTION_ATTACK_DOWN_RIGHT)
    if LadderAttackCommonFunction(LADDER_HAND_RIGHT) == TRUE then
        return TRUE
    end
    
end

function LadderAttackUpLeft_onUpdate()
    LadderSetActionState(LADDER_ACTION_ATTACK_UP_LEFT)
    if LadderAttackCommonFunction(LADDER_HAND_LEFT) == TRUE then
        return TRUE
    end
    
end

function LadderAttackUpRight_onUpdate()
    LadderSetActionState(LADDER_ACTION_ATTACK_UP_RIGHT)
    if LadderAttackCommonFunction(LADDER_HAND_RIGHT) == TRUE then
        return TRUE
    end
    
end

function LadderDamageSmallRight_onUpdate()
    LadderSetActionState(LADDER_ACTION_SMALL_DAMAGE)
    if LadderDamageCommonFunction(LADDER_HAND_RIGHT) == TRUE then
        return TRUE
    end
    
end

function LadderDamageSmallLeft_onUpdate()
    LadderSetActionState(LADDER_ACTION_SMALL_DAMAGE)
    if LadderDamageCommonFunction(LADDER_HAND_LEFT) == TRUE then
        return TRUE
    end
    
end

function LadderDamageLargeRight_onUpdate()
    LadderSetActionState(LADDER_ACTION_LARGE_DAMAGE)
    if LadderDamageCommonFunction(LADDER_HAND_RIGHT) == TRUE then
        return TRUE
    end
    
end

function LadderDamageLargeLeft_onUpdate()
    LadderSetActionState(LADDER_ACTION_LARGE_DAMAGE)
    if LadderDamageCommonFunction(LADDER_HAND_LEFT) == TRUE then
        return TRUE
    end
    
end

function LadderFallStart_onUpdate()
    LadderSetActionState(LADDER_ACTION_INVALID)
    
end

function LadderFall_onUpdate()
    if ExecLand(LAND_LADDER) == TRUE then
        return TRUE
    end
    
end

function LadderFallLand_onUpdate()
    if LandCommonFunction(DAMAGE_TRANSITION_RANK__4) == TRUE then
        return TRUE
    end
    
end

function LadderCoastStart_onUpdate()
    LadderSetActionState(LADDER_ACTION_COAST_START_LEFT)
    if LadderCoastCommonFunction(LADDER_HAND_LEFT) == TRUE then
        return TRUE
    end
    
end

function LadderCoastLeft_onActivate()
    LadderSendCommand(LADDER_COMMAND_DOWN)
    
end

function LadderCoastLeft_onUpdate()
    LadderSetActionState(LADDER_ACTION_COAST_LEFT)
    if LadderCoastCommonFunction(LADDER_HAND_RIGHT) == TRUE then
        return TRUE
    end
    
end

function LadderCoastRight_onActivate()
    LadderSendCommand(LADDER_COMMAND_DOWN)
    
end

function LadderCoastRight_onUpdate()
    LadderSetActionState(LADDER_ACTION_COAST_RIGHT)
    if LadderCoastCommonFunction(LADDER_HAND_LEFT) == TRUE then
        return TRUE
    end
    
end

function LadderCoastStopLeft_onUpdate()
    LadderSetActionState(LADDER_ACTION_COAST_STOP_LEFT)
    if LadderMoveCommonFunction(LADDER_HAND_LEFT) == TRUE then
        return TRUE
    end
    
end

function LadderCoastStopRight_onUpdate()
    LadderSetActionState(LADDER_ACTION_COAST_STOP_RIGHT)
    if LadderMoveCommonFunction(LADDER_HAND_RIGHT) == TRUE then
        return TRUE
    end
    
end

function LadderCoastEnd_onActivate()
    LadderSendCommand(LADDER_COMMAND_DOWN)
    
end

function LadderCoastEnd_onUpdate()
    LadderSetActionState(LADDER_ACTION_COAST_LANDING)
    if LadderStartEndCommonFunction() == TRUE then
        return TRUE
    end
    
end

function LadderDeath_onUpdate()
    LadderSetActionState(LADDER_ACTION_INVALID)
    
end

function LadderDeathFall_onUpdate()
    if ExecLand(LAND_LADDER) == TRUE then
        return TRUE
    end
    
end

function DeathStartLadder_onUpdate()
    if ExecSpDeath() == TRUE then
        return TRUE
    end
    if ExecTransToDeathIdle(DEATH_TYPE_LADDER) == TRUE then
        return TRUE
    end
    
end

function LadderRemoveWeaponBottom_onUpdate()
    if LadderStartEndCommonFunction() == TRUE then
        return TRUE
    end
    
end

function LadderRemoveWeaponTop_onUpdate()
    if LadderStartEndCommonFunction() == TRUE then
        return TRUE
    end
    
end

function LadderEquipWeapon_onUpdate()
    LadderSetActionState(LADDER_ACTION_INVALID)
    if LadderEquipWeaponCommonFunction() == TRUE then
        return TRUE
    end
    
end

function StandtoFlight_onActivate()
    act(AddSpEffect, 200012)
    
end

function StandtoFlight_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if TransIdleCommonFunction() == TRUE then
        return TRUE
    end
    
end

function FlighttoStand_onActivate()
    act(AddSpEffect, 200010)
    
end

function FlighttoStand_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if TransIdleCommonFunction() == TRUE then
        return TRUE
    end
    
end

function WalkUpward_onActivate()
    CallActionState(5004)
    
end

function WalkUpward_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if FlightCommonFunction(STYLE_DEFAULT, MOVE_TYPE_WALK_UPWARD, 5004) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        Fire("W_IdleDefault")
    end
    
end

function WalkDownward_onActivate()
    CallActionState(5005)
    
end

function WalkDownward_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if FlightCommonFunction(STYLE_DEFAULT, MOVE_TYPE_WALK_DOWNWARD, 5005) == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        Fire("W_IdleDefault")
    end
    
end

function StandtoCrouch_onActivate()
    act(AddSpEffect, SP_EFFECT_CROUCH)
    act(AddSpEffect, 200100)
    if env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_WEAPON_0) == TRUE then
        g_WeponType = 0
    elseif env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_WEAPON_1) == TRUE then
        g_WeponType = 1
    elseif env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_WEAPON_2) == TRUE then
        g_WeponType = 2
    elseif env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_WEAPON_3) == TRUE then
        g_WeponType = 3
    elseif env(IsSpEffectBehaviorRefID, SP_EFFECT_REF_WEAPON_4) == TRUE then
        g_WeponType = 4
    end
    act(AddSpEffect, 200030)
    
end

function StandtoCrouch_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if TransIdleCommonFunction() == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        Fire("W_IdleDefault")
    end
    
end

function CrouchtoStand_onActivate()
    act(AddSpEffect, SP_EFFECT_STAND)
    if g_WeponType == 0 then
        act(AddSpEffect, 200030)
    elseif g_WeponType == 1 then
        act(AddSpEffect, 200031)
    elseif g_WeponType == 2 then
        act(AddSpEffect, 200032)
    elseif g_WeponType == 3 then
        act(AddSpEffect, 200033)
    elseif g_WeponType == 4 then
        act(AddSpEffect, 200034)
    end
    
end

function CrouchtoStand_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if TransIdleCommonFunction() == TRUE then
        return TRUE
    end
    if env(IsAnimEnd, 1) == TRUE then
        IdleTransition()
        return TRUE
    end
    
end

function DeathStart_Activate()
    act(DenyEventAnimPlaybackRequest)
    
end

function DeathStart_Update()
    act(DenyEventAnimPlaybackRequest)
    
end

function Throw_Activate()
    local throw_id = env(GetThrowAnimID)
    SetVariable("ThrowID", throw_id)
    if throw_id == 20003 then
        SetVariable("ThrowID", ANIME_ID_THROW_DEF_SPECIAL)
        Fire("W_Event20003")
    end
    
end

function Throw_Deactivate()
    if env(IsThrowPosRealign) == FALSE and env(IsThrowActive) == FALSE then
        act(SetThrowState, THROW_STATE_NONE)
    end
    
end

function ThrowAtk_Activate()
    SetVariable("ThrowHoldBlendWeight", 0)
    SetVariable("ThrowHolding", false)
    SetVariable("ThrowNoRegistTime", 0)
    
end

function ThrowAtk_Update()
    if IsExistAnime(GetVariable("ThrowID") + 3) == FALSE then
        return
    end
    local regist_num = env(GetThrowDefenseCount)
    local dT = env(GetDT) / 1000
    local blend_weight = GetVariable("ThrowHoldBlendWeight")
    local is_holding = GetVariable("ThrowHolding")
    local no_regist_time = GetVariable("ThrowNoRegistTime")
    if regist_num > 0 then
        is_holding = true
    end
    if is_holding == true then
        if regist_num <= 0 then
            no_regist_time = no_regist_time + dT
        end
        if no_regist_time > 0.699999988079071 then
            is_holding = false
        else
            blend_weight = blend_weight + 2 * dT
            if blend_weight > 0.9900000095367432 then
                blend_weight = 0.9900000095367432
            end
            SetVariable("IsEnableTAEThrowHold", true)
        end
    else
        no_regist_time = 0
        blend_weight = blend_weight - 4 * dT
        if blend_weight < 0.009999999776482582 then
            blend_weight = 0.009999999776482582
            SetVariable("IsEnableTAEThrowHold", false)
        else
            SetVariable("IsEnableTAEThrowHold", true)
        end
    end
    SetVariable("ThrowHoldBlendWeight", blend_weight)
    SetVariable("ThrowHolding", is_holding)
    SetVariable("ThrowNoRegistTime", no_regist_time)
    
end

function Fall_Activate()
    
end

function Fall_Update()
    
end

function Ladder_Activate()
    act(DenyEventAnimPlaybackRequest)
    
end

function Ladder_Update()
    act(DenyEventAnimPlaybackRequest)
    LadderSetActionState(INVALID)
    
end

function ParallelMove_Update()
    local ret = nil
    local move_angle = GetVariable("MoveAngle")
    local move_angle_real = GetVariable("MoveAngleReal")
    local dT = env(GetDT) / 1000
    local threshold = 45 * dT
    local gap = move_angle - move_angle_real
    local gap_abs = math.abs(gap)
    local inverse = FALSE
    if gap_abs > 180 then
        gap_abs = 360 - gap_abs
        inverse = TRUE
    end
    if threshold < gap_abs then
        if move_angle_real < move_angle then
            if inverse == FALSE then
                ret = move_angle_real + threshold
            else
                ret = move_angle_real - threshold
            end
        elseif move_angle < move_angle_real then
            if inverse == FALSE then
                ret = move_angle_real - threshold
            else
                ret = move_angle_real + threshold
            end
        else
            ret = move_angle
        end
        if ret > 180 then
            ret = -180 + (ret - 180)
        elseif ret < -180 then
            ret = 180 + (180 + ret)
        end
    else
        ret = move_angle
    end
    SetVariable("MoveAngleReal", ret)
    SetParallelMoveTae(ret)
    
end

function SetParallelMoveTae(angle)
    local front, back, left, right = false
    if math.abs(angle) >= 135 then
        back = true
    elseif angle > 45 then
        right = true
    elseif angle < -45 then
        left = true
    else
        front = true
    end
    SetVariable("ParallelMoveTaeFront", front)
    SetVariable("ParallelMoveTaeBack", back)
    SetVariable("ParallelMoveTaeRight", right)
    SetVariable("ParallelMoveTaeLeft", left)
    
end

function Update()
    g_FrameCount = g_FrameCount + 1
    if env(LipSyncRequest) == TRUE and GetVariable("LipSyncBlend00") <= 0 then
        SetVariable("LipSyncBlend00", 0.10000000149011612)
        SetVariable("IndexLipSync", GetRandomIndex(ANIME_ID_GENERAL_LIP_SYNC, 0, 9, 1, 0, "IndexLipSync", false))
        Fire("W_LipSync")
    end
    
end

function AnimeTest_onUpdate()
    SetThrowFlag(STATE_NORMAL)
    if g_FrameCount <= 5 then
        IdleTransition()
    end
    
end

global = {}

function dummy()
    
end

global.__index = function (table, element)
    return dummy
    
end

setmetatable(_G, global)

