BEH_ADD_NONE = 0
BEH_ADD_R_SUB_WEAPON_EXPAND = 10
BEH_ADD_R_NIGHTVISION_START = 20
BEH_ADD_R_NIGHTVISION_END = 21
BEH_ADD_R_NON_COMBAT_AREA_ENTER = 22
BEH_ADD_R_NON_COMBAT_AREA_LEAVE = 23
BEH_ADD_R_BARE_HAND_RIGHT_START = 25
BEH_ADD_R_BARE_HAND_RIGHT_END = 26
BEH_ADD_R_HIT_DAMAGE = 30
BEH_ADD_R_GUARD_DAMAGE = 31
BEH_ADD_R_BREAK_DAMAGE = 32
BEH_ADD_R_SPECIAL_DAMAGE = 33
BEH_ADD_R_SWIM_HIT_DAMAGE = 34
BEH_ADD_R_ADD_ACTION_INPUT_RESEND = 40
BEH_NONE = 0
BEH_R_DEATH = 1
BEH_R_HIT_DAMAGE = 11
BEH_R_GUARD_DAMAGE = 12
BEH_R_BREAK_DAMAGE = 13
BEH_R_SPECIAL_DAMAGE = 14
BEH_R_AGING_DAMAGE = 16
BEH_R_CURE_AGING = 17
BEH_R_LAND = 21
BEH_R_LAND_WIRE = 22
BEH_R_LAND_READY = 23
BEH_R_LAND_WIRE_READY = 24
BEH_R_FALL = 27
BEH_R_THROW_DEATH = 28
BEH_R_THROW_ESCAPE = 29
BEH_R_THROW_KILL = 30
BEH_R_STAND_MOVE_TO_SWIM = 31
BEH_R_SWIM_TO_STAND_MOVE = 32
BEH_R_LAND_WATER = 33
BEH_R_DIVE_TO_SWIM = 34
BEH_R_ENEMY_JUMP = 38
BEH_R_SUB_WEAPON_EXPAND = 39
BEH_R_SWIM_HIT_DAMAGE = 41
BEH_R_SWIM_GUARD_DAMAGE = 42
BEH_R_AIR_BREAK_DAMAGE = 43
BEH_R_NPC_TALK_START = 44
BEH_R_NPC_TALK_END = 45
BEH_R_DOCKING_BREAK = 46
BEH_R_FORCE_CROUCH_END = 47
BEH_R_NPC_TALK_REACTION = 48
BEH_R_NPC_TALK_ACTION = 49
BEH_R_NON_COMBAT_AREA_ENTER = 50
BEH_R_NON_COMBAT_AREA_LEAVE = 51
BEH_R_TELESCOPE_END = 75
BEH_A_WALL_JUMP = 101
BEH_A_AIR_SP_ATTACK = 102
BEH_A_AIR_ATTACK = 103
BEH_A_SPRINT = 104
BEH_A_GROUND_JUMP = 105
BEH_A_GROUND_WIRE_SHOOT = 107
BEH_A_AIR_WIRE_SHOOT = 108
BEH_A_BACK_GRAB = 109
BEH_A_GROUND_ATTACK = 110
BEH_A_GROUND_SUB_ATTACK = 112
BEH_A_AIR_SUB_ATTACK = 113
BEH_A_CROUCH_START = 114
BEH_A_CROUCH_END = 115
BEH_A_COVER_START = 116
BEH_A_COVER_END = 117
BEH_A_COVER_LOOK_START = 118
BEH_A_COVER_LOOK_END = 119
BEH_A_HANG_CORNER_MOVE = 120
BEH_A_AIR_SP_ATTACK_RELEASE = 121
BEH_A_AIR_SP_ATTACK_GUARD_RELEASE = 1121
BEH_A_GROUND_MOVE_START = 122
BEH_A_GROUND_MOVE_STOP = 123
BEH_A_DEFLECT_GUARD_START = 124
BEH_A_DEFLECT_GUARD_CONTINUE = 1124
BEH_A_DEFLECT_GUARD_END = 125
BEH_A_AIR_HANG_START = 126
BEH_A_HANG_FALL = 127
BEH_A_HANG_CLIMB = 128
BEH_A_GROUND_HANG_START = 129
BEH_A_SPRINT_QUICK_TURN = 132
BEH_A_DOCKING_MOVE_START = 133
BEH_A_DOCKING_MOVE_STOP = 134
BEH_A_AIR_DEFLECT_START = 140
BEH_A_GROUND_RELEASE_ATTACK = 141
BEH_A_GROUND_SP_ATTACK = 142
BEH_A_GROUND_SP_ATTACK_RELEASE = 143
BEH_A_GROUND_SP_ATTACK_GUARD_RELEASE = 1143
BEH_R_GROUND_SP_ATTACK_HIT_JUMP = 144
BEH_A_GLIDER_SWITCH = 145
BEH_A_ITEM_USE = 150
BEH_A_AGING_ITEM_USE = 152
BEH_A_SWIM_MOVE_START = 180
BEH_A_SWIM_MOVE_STOP = 181
BEH_A_SWIM_TO_DIVE = 183
BEH_A_SWIM_JUMP = 184
BEH_A_DIVE_MOVE_START = 185
BEH_A_DIVE_MOVE_STOP = 186
BEH_A_DIVE_MOVE_UP_START = 188
BEH_A_DIVE_MOVE_DOWN_START = 189
BEH_A_DIVE_MOVE_UP_STOP = 190
BEH_A_DIVE_MOVE_DOWN_STOP = 191
BEH_A_AIR_KICK = 193
BEH_A_GROUND_STEP = 194
BEH_A_AIR_HANG_GRAB_START = 270
BEH_A_AIR_HANG_GRAB_END = 271
BEH_A_KICK_MOVE = 272
BEH_A_SWIM_QUICK_TURN = 273
BEH_A_KICK_MOVE_BRAKE = 274
BEH_A_DIVE_KICK_MOVE_UP = 275
BEH_A_DIVE_KICK_MOVE_UP_BRAKE = 276
BEH_A_DIVE_KICK_MOVE_DOWN = 277
BEH_A_DIVE_KICK_MOVE_DOWN_BRAKE = 278
BEH_A_SWIM_BACK_STEP = 279
BEH_A_DIVE_ATTACK = 280
BEH_A_DIVE_RELEASE_ATTACK = 281
BEH_A_DIVE_DEFLECT_GUARD_START = 282
BEH_A_DIVE_DEFLECT_GUARD_END = 283
BEH_A_AIR_STORM_JUMP = 290
BEH_A_AIR_DEFLECT_END = 291
BEH_A_GROUND_QUICK_TURN = 292
BEH_A_QUICK_TURN_MOVE_START = 293
BEH_A_STAND_MOVE_QUICK_TURN = 294
BEH_A_GROUND_SUB_ATTACK_RELEASE = 350
BEH_A_AIR_SUB_ATTACK_RELEASE = 351
BEH_A_GROUND_SUB_GUARD_RELEASE_CONNECT = 355
BEH_A_AIR_SUB_GUARD_RELEASE_CONNECT = 356
BEH_A_HANG_END_CONNECT = 357
BEH_A_COVER_END_CONNECT = 358
BEH_A_GROUND_SUB_ATTACK_KAWARIMI = 360
BEH_A_AIR_SUB_ATTACK_KAWARIMI = 361
BEH_A_GROUND_MOVE_SPEED_CHANGE = 500
BEH_A_ADD_SUB_WEAPON_CHANGE = 600
BEH_A_ADD_ACTION_INPUT_JUMP = 610
BEH_A_ADD_ACTION_INPUT_USE_ITEM = 620
BEH_A_ADD_ACTION_INPUT_CROUCH = 630
BEH_A_ADD_ACTION_INPUT_KICK = 640
BEH_A_ADD_ACTION_INPUT_WIRE_SHOOT = 650
BEH_A_ADD_ACTION_INPUT_SUB_ATTACK = 660
BEH_A_AGING_GROUND_MOVE_START = 700
BEH_A_AGING_GROUND_MOVE_STOP = 701
BEH_A_AGING_SPRINT = 702
BEH_A_AGING_GROUND_JUMP = 710
BEH_A_AGING_ATTACK = 720
BEH_A_AGING_ACTION = 721
BEH_A_DEBUG_MOVE_STYLE_SHIFT = 998
BEH_A_DEBUG_MOVE_STYLE_AUTO_RESET = 999

function ValidateOrderTableInit()
    g_behaviorValidateOrderByStyle = {}
    local index, behavior, behaviorId, validFunc = nil
    for f1_local6, f1_local7 in ipairs(g_behaviorValidateOrder) do
        behaviorId = f1_local7[1]
        for f1_local3 = 1, STYLE_TYPE_NUM, 1 do
            if g_behaviorTable[behaviorId][f1_local3] == TRUE then
                validFunc = f1_local7[2]
                if validFunc ~= nil then
                    if g_behaviorValidateOrderByStyle[f1_local3] == nil then
                        g_behaviorValidateOrderByStyle[f1_local3] = {}
                    end
                    table.insert(g_behaviorValidateOrderByStyle[f1_local3], f1_local7)
                end
            end
        end
    end
    g_addBehaviorReactionValidateOrderByStyle = {}
    local indexAddReaction, f1_local1 = nil
    for f1_local3, f1_local4 in ipairs(g_behaviorValidateOrderAddReaction) do
        behaviorId = f1_local4[1]
        for f1_local5 = 1, STYLE_TYPE_NUM, 1 do
            if g_addBehaviorTable[behaviorId][f1_local5] == TRUE then
                validFunc = f1_local4[2]
                if validFunc ~= nil then
                    if g_addBehaviorReactionValidateOrderByStyle[f1_local5] == nil then
                        g_addBehaviorReactionValidateOrderByStyle[f1_local5] = {}
                    end
                    table.insert(g_addBehaviorReactionValidateOrderByStyle[f1_local5], f1_local4)
                end
            end
        end
    end
    g_addBehaviorActionValidateOrderByStyle = {}
    local indexAddAction, f1_local6 = nil
    for f1_local5, f1_local8 in ipairs(g_behaviorValidateOrderAddAction) do
        behaviorId = f1_local8[1]
        for f1_local9 = 1, STYLE_TYPE_NUM, 1 do
            if g_addBehaviorTable[behaviorId][f1_local9] == TRUE then
                validFunc = f1_local8[2]
                if validFunc ~= nil then
                    if g_addBehaviorActionValidateOrderByStyle[f1_local9] == nil then
                        g_addBehaviorActionValidateOrderByStyle[f1_local9] = {}
                    end
                    table.insert(g_addBehaviorActionValidateOrderByStyle[f1_local9], f1_local8)
                end
            end
        end
    end
    



end

function Validate(current_hkb_state)
    local currentStyle = g_paramHkbState[current_hkb_state][PARAM_HKB_STATE__STYLE_TYPE]
    local currentState = g_paramHkbState[current_hkb_state][PARAM_HKB_STATE__STATE_TYPE]
    if env(IsThrowPosRealign) == FALSE and (g_isUpperAction == FALSE or currentState == STATE_TYPE_UPPER_ACTION or currentState == STATE_TYPE_UPPER_ACTION_ITEM_USE or currentState == STATE_TYPE_UPPER_ACTION_ATK) then
        local f2_local0 = function ()
            local functionTable = g_behaviorValidateOrderByStyle[currentStyle]
            if functionTable ~= nil then
                local index, behavior, behaviorId, validFunc = nil
                for f3_local3, f3_local4 in ipairs(functionTable) do
                    behaviorId = f3_local4[1]
                    validFunc = f3_local4[2]
                    if validFunc(current_hkb_state, currentState) == TRUE then
                        return behaviorId
                    end
                end
            end
            return BEH_NONE
            
        end

        local f2_local1 = function ()
            local functionTableReaction = g_addBehaviorReactionValidateOrderByStyle[currentStyle]
            if functionTableReaction ~= nil then
                local behaviorIdAddReaction, validFuncAddReaction, addReactionIndex, addReactionBehavior = nil
                for f4_local3, f4_local4 in ipairs(functionTableReaction) do
                    behaviorIdAddReaction = f4_local4[1]
                    validFuncAddReaction = f4_local4[2]
                    if validFuncAddReaction(current_hkb_state) == TRUE then
                        _ActivateAddBehavior(current_hkb_state, behaviorIdAddReaction)
                    end
                end
            end
            local functionTableAction = g_addBehaviorActionValidateOrderByStyle[currentStyle]
            if functionTableAction ~= nil then
                local behaviorIdAddAction, addReactionIndex, addReactionBehavior, f4_local0 = nil
                for f4_local4, f4_local5 in ipairs(functionTableAction) do
                    behaviorIdAddAction = f4_local5[1]
                    addReactionIndex = f4_local5[2]
                    if addReactionIndex(current_hkb_state) == TRUE then
                        _ActivateAddBehavior(current_hkb_state, behaviorIdAddAction)
                    end
                end
            end
            return
            
        end

        if currentState ~= STATE_TYPE_LOWER then
            f2_local1()
        end
        local nextBehavior = f2_local0()
        if nextBehavior ~= BEH_NONE then
            _StopAutoAim()
            _ActivateBehavior(current_hkb_state, nextBehavior)
            if nextBehavior ~= BEH_A_ADD_SUB_WEAPON_CHANGE and (currentState == STATE_TYPE_ACTION_THROW_ATK and nextBehavior ~= BEH_R_THROW_KILL or currentState == STATE_TYPE_REACTION_THROW_DEF and nextBehavior ~= BEH_R_THROW_DEATH and nextBehavior ~= BEH_R_THROW_ESCAPE or currentState == STATE_TYPE_ACTION_THROW_ATK_KILL) then
                act(SetThrowState, 0)
            end
            if nextBehavior ~= BEH_A_GROUND_MOVE_START and nextBehavior ~= BEH_A_GROUND_MOVE_STOP and nextBehavior ~= BEH_A_SWIM_MOVE_START and nextBehavior ~= BEH_A_DIVE_MOVE_START and nextBehavior ~= BEH_A_SWIM_MOVE_STOP and nextBehavior ~= BEH_A_DIVE_MOVE_STOP and nextBehavior ~= BEH_A_GROUND_MOVE_SPEED_CHANGE and nextBehavior ~= BEH_A_GROUND_QUICK_TURN and nextBehavior ~= BEH_A_SPRINT_QUICK_TURN and nextBehavior ~= BEH_A_STAND_MOVE_QUICK_TURN and nextBehavior ~= BEH_A_QUICK_TURN_MOVE_START and nextBehavior ~= BEH_A_SWIM_QUICK_TURN and nextBehavior ~= BEH_A_KICK_MOVE_BRAKE and nextBehavior ~= BEH_A_DIVE_KICK_MOVE_UP_BRAKE and nextBehavior ~= BEH_A_DIVE_KICK_MOVE_DOWN_BRAKE and nextBehavior ~= BEH_A_DIVE_MOVE_UP_STOP and nextBehavior ~= BEH_A_DIVE_MOVE_DOWN_STOP and nextBehavior ~= BEH_R_NON_COMBAT_AREA_ENTER and nextBehavior ~= BEH_R_NON_COMBAT_AREA_LEAVE and nextBehavior ~= BEH_A_CROUCH_START and nextBehavior ~= BEH_A_CROUCH_END and nextBehavior ~= BEH_R_SUB_WEAPON_EXPAND and nextBehavior ~= BEH_R_NPC_TALK_START and nextBehavior ~= BEH_R_NPC_TALK_END and nextBehavior ~= BEH_R_NPC_TALK_REACTION and nextBehavior ~= BEH_R_NPC_TALK_ACTION then
                act(SetTalkAnimState, EZ_STATE_REF_SND_NPC_TALK_INTERRUPT)
            end
        end
    end
    
end

function FireStateEndEvent(current_hkb_state)
    local currentStyle = g_paramHkbState[current_hkb_state][PARAM_HKB_STATE__STYLE_TYPE]
    local currentState = g_paramHkbState[current_hkb_state][PARAM_HKB_STATE__STATE_TYPE]
    if currentState == STATE_TYPE_UPPER_STANDBY or currentState == STATE_TYPE_UPPER_ACTION or currentState == STATE_TYPE_UPPER_ACTION_ITEM_USE or currentState == STATE_TYPE_UPPER_ACTION_ATK then
        g_isUpperAction = TRUE
    end
    g_beforeMoveSpeedIndex = hkbGetVariable("MoveSpeedIndex")
    g_beforeMoveDirection = hkbGetVariable("MoveDirection")
    if (currentState == STATE_TYPE_REACTION_DEATH_START or currentState == STATE_TYPE_REACTION_DEATH_REVIVAL_STAY_LOOP or currentState == STATE_TYPE_REACTION_THROW_DEATH_START or currentState == STATE_TYPE_REACTION_THROW_DEATH_REVIVAL_STAY_LOOP) and env(GetHP) > 0 and env(IsSpEffectBehaviorRefID, 607) == FALSE then
        if current_hkb_state == HKB_STATE_GROUND_DEATH_START or current_hkb_state == HKB_STATE_STAND_DAMAGE_DEATH_SMALL_BLOW or current_hkb_state == HKB_STATE_STAND_DAMAGE_DEATH_LARGE_BLOW_LAND or current_hkb_state == HKB_STATE_STAND_DAMAGE_DEATH_LARGE_POUND or current_hkb_state == HKB_STATE_STAND_DAMAGE_DEATH_LARGE_UPPER_LAND or current_hkb_state == HKB_STATE_STAND_DAMAGE_DEATH_EXLARGE_BLOW_LAND or current_hkb_state == HKB_STATE_AIR_DAMAGE_DEATH_LARGE_BLOW_LAND or current_hkb_state == HKB_STATE_AIR_DAMAGE_DEATH_LARGE_POUND_LAND or current_hkb_state == HKB_STATE_AIR_DAMAGE_DEATH_LARGE_UPPER_LAND or current_hkb_state == HKB_STATE_AIR_DAMAGE_DEATH_EX_LARGE_BLOW_LAND or current_hkb_state == HKB_STATE_GROUND_DEATH_START_FIRE or current_hkb_state == HKB_STATE_GROUND_DEATH_START_POISON or current_hkb_state == HKB_STATE_GROUND_DEATH_START_PRONE or current_hkb_state == HKB_STATE_GROUND_DEATH_START_INSANE or current_hkb_state == HKB_STATE_GROUND_DEATH_START_ELECTRIC_SHOCK or current_hkb_state == HKB_STATE_GROUND_DEATH_START_ELECTRIC_SHOCK_PRONE or current_hkb_state == HKB_STATE_GROUND_DEATH_START_ELECTRIC_SHOCK_WEAK or current_hkb_state == HKB_STATE_GROUND_DEATH_START_ELECTRIC_SHOCK_WEAK_PRONE or current_hkb_state == HKB_STATE_THROW_DEF_DEATH_LARGE_BLOW_LAND_600380 or current_hkb_state == HKB_STATE_GROUND_REVIVAL_STAY_LOOP or env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_REVIVAL) == TRUE then
            FireEvent("W_GroundRevival")
        elseif current_hkb_state == HKB_STATE_LAND_DEATH_START or current_hkb_state == HKB_STATE_LAND_FALL_DEATH_DMG or current_hkb_state == HKB_STATE_LAND_FALL_DEATH_ELECTRO_CHARGE or current_hkb_state == HKB_STATE_LAND_FALL_DEATH_ELECTRO_CHARGE_WEAK or current_hkb_state == HKB_STATE_LAND_REVIVAL_STAY_LOOP then
            FireEvent("W_LandRevival")
        elseif current_hkb_state == HKB_STATE_SWIM_DEATH_START or current_hkb_state == HKB_STATE_LAND_WATER_DEATH_START or current_hkb_state == HKB_STATE_SWIM_DEATH_START_INSANE or current_hkb_state == HKB_STATE_SWIM_DEATH_START_ELECTRIC_SHOCK_WEAK or current_hkb_state == HKB_STATE_SWIM_REVIVAL_STAY_LOOP then
            FireEvent("W_SwimRevival")
        elseif current_hkb_state == HKB_STATE_DIVE_DEATH_START or current_hkb_state == HKB_STATE_DIVE_DEATH_START_INSANE or current_hkb_state == HKB_STATE_DIVE_DEATH_START_ELECTRIC_SHOCK_WEAK or current_hkb_state == HKB_STATE_DIVE_REVIVAL_STAY_LOOP then
            FireEvent("W_DiveRevival")
        elseif currentState == STATE_TYPE_REACTION_THROW_DEATH_START or currentState == STATE_TYPE_REACTION_THROW_DEATH_REVIVAL_STAY_LOOP then
            act(SetThrowState, 0)
            FireEvent("W_ThrowDefRevival" .. hkbGetVariable("Selector_ThrowId"))
        elseif current_hkb_state == HKB_STATE_CROUCH_DEATH_START or current_hkb_state == HKB_STATE_CROUCH_REVIVAL_STAY_LOOP then
            FireEvent("W_CrouchRevival")
        end
    end
    if (currentState == STATE_TYPE_REACTION_DEATH_REVIVAL_STAY_LOOP or currentState == STATE_TYPE_REACTION_THROW_DEATH_REVIVAL_STAY_LOOP) and env(IsTrueDeath) == TRUE then
        if current_hkb_state == HKB_STATE_GROUND_DEATH_START or current_hkb_state == HKB_STATE_GROUND_REVIVAL_STAY_LOOP then
            FireEvent("W_GroundDeathLoop")
        elseif current_hkb_state == HKB_STATE_LAND_REVIVAL_STAY_LOOP then
            FireEvent("W_LandDeathLoop")
        elseif current_hkb_state == HKB_STATE_SWIM_DEATH_START or current_hkb_state == HKB_STATE_SWIM_REVIVAL_STAY_LOOP then
            FireEvent("W_SwimDeathLoop")
        elseif current_hkb_state == HKB_STATE_DIVE_DEATH_START or current_hkb_state == HKB_STATE_DIVE_REVIVAL_STAY_LOOP then
            FireEvent("W_DiveDeathLoop")
        elseif currentState == STATE_TYPE_REACTION_THROW_DEATH_START or currentState == STATE_TYPE_REACTION_THROW_DEATH_REVIVAL_STAY_LOOP then
            act(SetThrowState, 0)
            FireEvent("W_ThrowDefDeathLoop" .. hkbGetVariable("Selector_ThrowId"))
        elseif current_hkb_state == HKB_STATE_CROUCH_DEATH_START or current_hkb_state == HKB_STATE_CROUCH_REVIVAL_STAY_LOOP then
            FireEvent("W_CrouchDeathLoop")
        end
    end
    if env(IsAnimEnd, 0) == TRUE then
        if current_hkb_state == HKB_STATE_CROUCH_THROW_GRAB then
            FireEvent("W_CrouchIdle")
        elseif current_hkb_state == HKB_STATE_COVER_LOOK_THROW_GRAB then
            FireEvent("W_CoverIdle")
        elseif current_hkb_state == HKB_STATE_HANG_THROW_GRAB then
            ExecHangIdle(current_hkb_state)
        elseif current_hkb_state == HKB_STATE_THROW_ATK_TO_CROUCH then
            FireEvent("W_CrouchIdle")
        elseif current_hkb_state == HKB_STATE_THROW_ATK_TO_COVER then
            FireEvent("W_CoverIdle")
        elseif current_hkb_state == HKB_STATE_THROW_ATK_TO_HANG then
            ExecHangIdle(current_hkb_state)
        elseif current_hkb_state == HKB_STATE_ITEM_RECOVER_MOVE then
            FireEvent("W_StandMove")
        elseif current_hkb_state == HKB_STATE_CROUCH_ATK_FIRST or current_hkb_state == HKB_STATE_CROUCH_ITEM_RECOVER or current_hkb_state == HKB_STATE_CROUCH_ITEM_RECOVER_MOVE or current_hkb_state == HKB_STATE_CROUCH_ITEM_FAILED or current_hkb_state == HKB_STATE_CROUCH_ITEM_FAILED_MOVE or current_hkb_state == HKB_STATE_EAVESDROP_CROUCH_END or current_hkb_state == HKB_STATE_EVENT710400 or current_hkb_state == HKB_STATE_EVENT710410 or current_hkb_state == HKB_STATE_EVENT710420 or current_hkb_state == HKB_STATE_EVENT710430 or current_hkb_state == HKB_STATE_CROUCH_SUB_ATTACK_COMBO_1_MOVEABLE or current_hkb_state == HKB_STATE_CROUCH_SUB_ATTACK_COMBO_1_RELEASE_MOVEABLE or current_hkb_state == HKB_STATE_CROUCH_SUB_ATTACK_LOCK_ON_MOVEABLE or current_hkb_state == HKB_STATE_CROUCH_SUB_ATTACK_LOCK_ON_RELEASE_MOVEABLE or current_hkb_state == HKB_STATE_CROUCH_ITEM_GOURD_DRINK or current_hkb_state == HKB_STATE_CROUCH_ITEM_GOURD_DRINK_REPEAT or current_hkb_state == HKB_STATE_CROUCH_ITEM_GOURD_DRINK_FAILED or current_hkb_state == HKB_STATE_CROUCH_ITEM_GOURD_DRINK_REPEAT_FAILED or current_hkb_state == HKB_STATE_CROUCH_ITEM_GOURD_DRINK_MOVE or current_hkb_state == HKB_STATE_CROUCH_ITEM_GOURD_DRINK_REPEAT_MOVE or current_hkb_state == HKB_STATE_CROUCH_ITEM_GOURD_DRINK_FAILED_MOVE or current_hkb_state == HKB_STATE_CROUCH_ITEM_GOURD_DRINK_REPEAT_FAILED_MOVE or current_hkb_state == HKB_STATE_CROUCH_REVIVAL then
            FireEvent("W_CrouchIdle")
        elseif current_hkb_state == HKB_STATE_THROW_ATK_TO_FREE_FALL then
            FireEvent("W_FreeFall")
        elseif current_hkb_state == HKB_STATE_LAND_CROUCH_FREE_FALL then
            FireEvent("W_CrouchIdle")
        elseif currentState == STATE_TYPE_REACTION_DEATH_START or currentState == STATE_TYPE_REACTION_THROW_DEATH_START then
            if current_hkb_state == HKB_STATE_GROUND_DEATH_START or current_hkb_state == HKB_STATE_STAND_DAMAGE_DEATH_SMALL_BLOW or current_hkb_state == HKB_STATE_STAND_DAMAGE_DEATH_LARGE_BLOW_LAND or current_hkb_state == HKB_STATE_STAND_DAMAGE_DEATH_LARGE_POUND or current_hkb_state == HKB_STATE_STAND_DAMAGE_DEATH_LARGE_UPPER_LAND or current_hkb_state == HKB_STATE_STAND_DAMAGE_DEATH_EXLARGE_BLOW_LAND or current_hkb_state == HKB_STATE_AIR_DAMAGE_DEATH_LARGE_BLOW_LAND or current_hkb_state == HKB_STATE_AIR_DAMAGE_DEATH_LARGE_POUND_LAND or current_hkb_state == HKB_STATE_AIR_DAMAGE_DEATH_LARGE_UPPER_LAND or current_hkb_state == HKB_STATE_AIR_DAMAGE_DEATH_EX_LARGE_BLOW_LAND or current_hkb_state == HKB_STATE_GROUND_DEATH_START_FIRE or current_hkb_state == HKB_STATE_GROUND_DEATH_START_POISON or current_hkb_state == HKB_STATE_GROUND_DEATH_START_PRONE or current_hkb_state == HKB_STATE_GROUND_DEATH_START_INSANE or current_hkb_state == HKB_STATE_GROUND_DEATH_START_ELECTRIC_SHOCK or current_hkb_state == HKB_STATE_GROUND_DEATH_START_ELECTRIC_SHOCK_PRONE or current_hkb_state == HKB_STATE_GROUND_DEATH_START_ELECTRIC_SHOCK_WEAK or current_hkb_state == HKB_STATE_GROUND_DEATH_START_ELECTRIC_SHOCK_WEAK_PRONE or current_hkb_state == HKB_STATE_THROW_DEF_DEATH_LARGE_BLOW_LAND_600380 or current_hkb_state == HKB_STATE_ITEM_SUICIDE then
                if env(IsTrueDeath) == TRUE then
                    FireEvent("W_GroundDeathLoop")
                else
                    FireEvent("W_GroundRevivalStayLoop")
                end
            elseif current_hkb_state == HKB_STATE_LAND_DEATH_START or current_hkb_state == HKB_STATE_LAND_FALL_DEATH_DMG or current_hkb_state == HKB_STATE_LAND_FALL_DEATH_ELECTRO_CHARGE or current_hkb_state == HKB_STATE_LAND_FALL_DEATH_ELECTRO_CHARGE_WEAK then
                if env(IsTrueDeath) == TRUE then
                    FireEvent("W_LandDeathLoop")
                else
                    FireEvent("W_LandRevivalStayLoop")
                end
            elseif current_hkb_state == HKB_STATE_SWIM_DEATH_START or current_hkb_state == HKB_STATE_LAND_WATER_DEATH_START or current_hkb_state == HKB_STATE_SWIM_DEATH_START_INSANE or current_hkb_state == HKB_STATE_SWIM_DEATH_START_ELECTRIC_SHOCK_WEAK then
                if env(IsTrueDeath) == TRUE then
                    FireEvent("W_SwimDeathLoop")
                else
                    FireEvent("W_SwimRevivalStayLoop")
                end
            elseif current_hkb_state == HKB_STATE_DIVE_DEATH_START or current_hkb_state == HKB_STATE_DIVE_DEATH_START_INSANE or current_hkb_state == HKB_STATE_DIVE_DEATH_START_ELECTRIC_SHOCK_WEAK then
                if env(IsTrueDeath) == TRUE then
                    FireEvent("W_DiveDeathLoop")
                else
                    FireEvent("W_DiveRevivalStayLoop")
                end
            elseif currentState == STATE_TYPE_REACTION_THROW_DEATH_START then
                if env(IsTrueDeath) == TRUE then
                    FireEvent("W_ThrowDefDeathLoop" .. hkbGetVariable("Selector_ThrowId"))
                else
                    FireEvent("W_ThrowDefRevivalStayLoop" .. hkbGetVariable("Selector_ThrowId"))
                end
            elseif current_hkb_state == HKB_STATE_CROUCH_DEATH_START then
                if env(IsTrueDeath) == TRUE then
                    FireEvent("W_CrouchDeathLoop")
                else
                    FireEvent("W_CrouchRevivalStayLoop")
                end
            elseif current_hkb_state == HKB_STATE_AGING_GROUND_DEATH_START or current_hkb_state == HKB_STATE_LAND_DEATH_AGING_FREE_FALL or current_hkb_state == HKB_STATE_LAND_AGING_FALL_DEATH then
                FireEvent("W_AgingGroundDeathLoop")
            end
        elseif currentState == STATE_TYPE_ACTION_THROW_ATK or currentState == STATE_TYPE_ACTION_THROW_ATK_KILL then
            if env(IsThrowActive) == FALSE and env(IsThrowPosRealign) == FALSE then
                act(SetThrowState, 0)
                if currentStyle == STYLE_TYPE_CROUCH then
                    FireEvent("W_CrouchIdle")
                elseif currentStyle == STYLE_TYPE_COVER then
                    FireEvent("W_CoverIdle")
                elseif currentStyle == STYLE_TYPE_HANG then
                    ExecHangIdle(current_hkb_state)
                elseif currentStyle == STYLE_TYPE_FREE_FALL then
                    FireEvent("W_FreeFall")
                elseif currentStyle == STYLE_TYPE_DIVE then
                    FireEvent("W_DiveIdle")
                elseif env("特殊効果発動中か_Behavior参照ID_寿命延長を厳密に取得", SP_EF_REF_AGING) == TRUE then
                    FireEvent("W_AgingIdle")
                else
                    FireEvent("W_Idle")
                end
            end
        elseif currentState == STATE_TYPE_REACTION_THROW_DEF then
            local throwId = hkbGetVariable("Selector_ThrowId")
            if throwId == 600030 or throwId == 600040 then
                SetVariable("DamageDirection", SELECTOR_DAMAGE_DIR_B)
                SetVariable("Selector_ProneDirection", SELECTOR_PRONE_DIR_FACE_DOWN)
                FireEventNoReset("W_ThrowDefLargeBlowStart")
            elseif throwId == 600380 then
                SetVariable("DamageDirection", SELECTOR_DAMAGE_DIR_B)
                SetVariable("Selector_ProneDirection", SELECTOR_PRONE_DIR_FACE_DOWN)
                if env(GetHP) <= 0 then
                    SetVariable("IndexDeath", DEATH_TYPE_COMMON_BACK)
                    FireEventNoReset("W_ThrowDefDeathLargeBlowStart600380")
                else
                    FireEventNoReset("W_ThrowDefLargeBlowStart600380")
                end
            elseif currentStyle == STYLE_TYPE_DIVE then
                FireEvent("W_DiveIdle")
            else
                FireEvent("W_Idle")
            end
        elseif current_hkb_state == HKB_STATE_SPRINT_TO_CROUCH_READY then
            local angle = hkbGetVariable("TurnAngle")
            if angle > 0 then
                FireEventNoReset("W_SprintToCrouchLeft")
            else
                FireEventNoReset("W_SprintToCrouchRight")
            end
        elseif current_hkb_state == HKB_STATE_SWIM_REVIVAL then
            FireEvent("W_SwimIdle")
        elseif current_hkb_state == HKB_STATE_DIVE_REVIVAL or current_hkb_state == HKB_STATE_THROW_DEF_REVIVAL_600340 then
            FireEvent("W_DiveIdle")
        elseif currentState == STATE_TYPE_UPPER_ACTION or currentState == STATE_TYPE_UPPER_ACTION_ITEM_USE or currentState == STATE_TYPE_UPPER_ACTION_ATK then
            if GetLocomotionType() == LOCOMOTION_TYPE_MOVE then
                if currentStyle == STYLE_TYPE_CROUCH then
                    FireEvent("W_CrouchMoveLoop")
                else
                    SetVariable("Selector_UseTransitionEffect", SELECTOR_USE_TE_TAE_BLEND_IGNOR_FROM_GENERATOR)
                    FireEvent("W_StandMoveLoop")
                end
            elseif currentStyle == STYLE_TYPE_CROUCH then
                FireEvent("W_CrouchIdle")
            else
                FireEvent("W_StandIdle")
            end
        elseif current_hkb_state == HKB_STATE_WALL_JUMP_READY or current_hkb_state == HKB_STATE_HANG_JUMP_READY or current_hkb_state == HKB_STATE_HANG_FOOT_HOLD_JUMP_READY or current_hkb_state == HKB_STATE_COVER_TO_WALL_JUMP_READY then
            if env(IsLocked) == TRUE then
                local contactWallAngle = hkbGetVariable("ContactWallAngle")
                local turnAngle = hkbGetVariable("TurnAngle")
                if current_hkb_state == HKB_STATE_COVER_TO_WALL_JUMP_READY then
                    if turnAngle >= 0 then
                        contactWallAngle = 180 - turnAngle
                    else
                        contactWallAngle = -180 - turnAngle
                    end
                end
                if current_hkb_state == HKB_STATE_HANG_JUMP_READY or current_hkb_state == HKB_STATE_HANG_FOOT_HOLD_JUMP_READY then
                    contactWallAngle = -turnAngle
                end
                _SetJumpDirection(contactWallAngle, 1)
                local wallContactDir = hkbGetVariable("Selector_GroundJumpType")
                _SetJumpDirection(hkbGetVariable("JumpAngle"), hkbGetVariable("JumpStickLevel"))
                local groundJumpType = hkbGetVariable("Selector_GroundJumpType")
                if groundJumpType == wallContactDir then
                    SetVariable("Selector_GroundJumpType", SELECTOR_GROUND_JUMP_TYPE_VERTICAL)
                end
                act(TurnToLockonTargetImmediately)
                SetVariable("EnablePositioningJumpLand", TRUE)
                _setPositioningJumpTilt(hkbGetVariable("JumpAngle"))
                if current_hkb_state == HKB_STATE_HANG_JUMP_READY or current_hkb_state == HKB_STATE_HANG_FOOT_HOLD_JUMP_READY then
                    FireEventNoReset("W_HangPositioningJumpStart")
                else
                    FireEventNoReset("W_WallPositioningJumpStart")
                end
            else
                if hkbGetVariable("MoveSpeedLevel") == 0 then
                    SetVariable("Selector_WallJumpType", SELECTOR_WALL_JUMP_TYPE_VERTICAL)
                else
                    local wallContactType = hkbGetVariable("Selector_WallContactType")
                    local stickAngle = 0
                    stickAngle = hkbGetVariable("TurnAngle")
                    local contactWallAngle = hkbGetVariable("ContactWallAngle")
                    local wallJumpFrontAngleMin = 45
                    local wallJumpFrontAngleMax = 135
                    local wallJumpSideAngleMin = wallJumpFrontAngleMax
                    local wallJumpSideAngleMax = 225
                    local wallJumpBackAngleMin = wallJumpSideAngleMax
                    local wallJumpBackAngleMax = 270
                    local wallJumpBackAngleMinMinus = -270
                    local wallJumpBackAngleMaxMinus = -45
                    if wallContactType == SELECTOR_WALL_CONTACT_TYPE_F or wallContactType == SELECTOR_WALL_CONTACT_TYPE_B then
                        if stickAngle > -45 and stickAngle < 45 then
                            SetVariable("Selector_WallJumpType", SELECTOR_WALL_JUMP_TYPE_HORIZONTAL_F)
                        elseif stickAngle > 135 or stickAngle < -135 then
                            SetVariable("Selector_WallJumpType", SELECTOR_WALL_JUMP_TYPE_HORIZONTAL_B)
                        elseif stickAngle > -135 and stickAngle < -45 then
                            SetVariable("Selector_WallJumpType", SELECTOR_WALL_JUMP_TYPE_HORIZONTAL_L)
                        else
                            SetVariable("Selector_WallJumpType", SELECTOR_WALL_JUMP_TYPE_HORIZONTAL_R)
                        end
                        if hkbGetVariable("Selector_WallContactType") == hkbGetVariable("Selector_WallJumpType") - 1 then
                            SetVariable("Selector_WallJumpType", SELECTOR_WALL_JUMP_TYPE_VERTICAL)
                        end
                    elseif wallContactType == SELECTOR_WALL_CONTACT_TYPE_L then
                        if contactWallAngle + wallJumpFrontAngleMin < stickAngle and stickAngle <= contactWallAngle + wallJumpFrontAngleMax then
                            SetVariable("Selector_WallJumpType", SELECTOR_WALL_JUMP_TYPE_HORIZONTAL_F)
                        elseif contactWallAngle + wallJumpSideAngleMin < stickAngle and stickAngle <= contactWallAngle + wallJumpSideAngleMax then
                            SetVariable("Selector_WallJumpType", SELECTOR_WALL_JUMP_TYPE_HORIZONTAL_R)
                        elseif contactWallAngle + wallJumpBackAngleMin < stickAngle and stickAngle <= contactWallAngle + wallJumpBackAngleMax or contactWallAngle + wallJumpBackAngleMinMinus <= stickAngle and stickAngle < contactWallAngle + wallJumpBackAngleMaxMinus then
                            SetVariable("Selector_WallJumpType", SELECTOR_WALL_JUMP_TYPE_HORIZONTAL_B)
                        else
                            SetVariable("Selector_WallJumpType", SELECTOR_WALL_JUMP_TYPE_VERTICAL)
                        end
                    elseif wallContactType == SELECTOR_WALL_CONTACT_TYPE_R then
                        if stickAngle < contactWallAngle - wallJumpFrontAngleMin and contactWallAngle - wallJumpFrontAngleMax <= stickAngle then
                            SetVariable("Selector_WallJumpType", SELECTOR_WALL_JUMP_TYPE_HORIZONTAL_F)
                        elseif stickAngle < contactWallAngle - wallJumpSideAngleMin and contactWallAngle - wallJumpSideAngleMax <= stickAngle then
                            SetVariable("Selector_WallJumpType", SELECTOR_WALL_JUMP_TYPE_HORIZONTAL_L)
                        elseif stickAngle < contactWallAngle - wallJumpBackAngleMin and contactWallAngle - wallJumpBackAngleMax <= stickAngle or stickAngle <= contactWallAngle - wallJumpBackAngleMinMinus and contactWallAngle - wallJumpBackAngleMaxMinus < stickAngle then
                            SetVariable("Selector_WallJumpType", SELECTOR_WALL_JUMP_TYPE_HORIZONTAL_B)
                        else
                            SetVariable("Selector_WallJumpType", SELECTOR_WALL_JUMP_TYPE_VERTICAL)
                        end
                    end
                    act(TurnToDirection, stickAngle)
                end
                if current_hkb_state == HKB_STATE_HANG_JUMP_READY or current_hkb_state == HKB_STATE_HANG_FOOT_HOLD_JUMP_READY then
                    FireEventNoReset("W_HangJumpStart")
                else
                    FireEventNoReset("W_WallJumpStart")
                end
            end
        elseif current_hkb_state == HKB_STATE_BOUNCE_WALL_JUMP_READY then
            local turnAngle = hkbGetVariable("TurnAngle")
            local bounceJumpAngle = 0
            local limitAngle = 10
            if hkbGetVariable("MoveSpeedLevel") == 0 then
                bounceJumpAngle = 180
            elseif turnAngle > 0 then
                if 180 - limitAngle < turnAngle then
                    bounceJumpAngle = turnAngle
                else
                    bounceJumpAngle = 180 - limitAngle
                end
            elseif turnAngle < limitAngle - 180 then
                bounceJumpAngle = turnAngle
            else
                bounceJumpAngle = limitAngle - 180
            end
            act(TurnToDirection, bounceJumpAngle)
            FireEventNoReset("W_BounceWallJumpStart")
        elseif current_hkb_state == HKB_STATE_SUB_ATTACK_JUMP_READY or current_hkb_state == HKB_STATE_SUB_ATTACK_JUMP_PRONE_READY or current_hkb_state == HKB_STATE_AIR_SUB_ATTACK_MOVE_READY or current_hkb_state == HKB_STATE_LAND_AIR_SUB_ATTACK_MOVE_READY then
            local stickAngle = 0
            local stickLevel = 0
            if env(IsLocked) == TRUE then
                if current_hkb_state == HKB_STATE_SUB_ATTACK_JUMP_PRONE_READY then
                    stickAngle = hkbGetVariable("MoveAngle")
                else
                    stickAngle = hkbGetVariable("SubAttackAngle")
                end
                stickLevel = hkbGetVariable("SubAttackStickLevel")
            else
                stickAngle = hkbGetVariable("TurnAngle")
                stickLevel = hkbGetVariable("MoveSpeedLevel")
            end
            _SetJumpDirection(stickAngle, stickLevel)
            _setPositioningJumpTilt(stickAngle)
            if current_hkb_state == HKB_STATE_AIR_SUB_ATTACK_MOVE_READY then
                FireEvent("W_AirSubAttackMoveStart")
            else
                FireEvent("W_SubAttackJumpStart")
            end
        elseif current_hkb_state == HKB_STATE_SUB_ATTACK_JUMP_START or current_hkb_state == HKB_STATE_AIR_SUB_ATTACK_MOVE_START then
            if env(IsTrulyLanding) == TRUE then
                FireEventNoReset("W_LandAirSubAttackMove")
            else
                FireEventNoReset("W_AirSubAttackMoveStartToLoop")
            end
        elseif current_hkb_state == HKB_STATE_GROUND_SUB_ATTACK_HOLD_START then
            if env(ActionDuration, ACTION_ARM_SUB_ATTACK) > 0 or env(ActionDuration, ACTION_ARM_SHINOBI_WEP_ACTION) > 0 then
                FireEventNoReset("W_GroundSubAttackHoldLoop")
            else
                FireEventNoReset("W_GroundSubAttackHoldEnd")
            end
        elseif current_hkb_state == HKB_STATE_SPRINT_STOP_READY then
            local angle = hkbGetVariable("TurnAngle")
            if angle > PRM_SPRINT_STOP_FORCE_QUICK_TURN_ANGLE_R then
                FireEventNoReset("W_SprintQuickTurnRight180")
            elseif angle < PRM_SPRINT_STOP_FORCE_QUICK_TURN_ANGLE_L then
                FireEventNoReset("W_SprintQuickTurnLeft180")
            elseif angle >= PRM_SPRINT_STOP_QUICK_TURN_ANGLE_F_MIN and angle <= PRM_SPRINT_STOP_QUICK_TURN_ANGLE_F_MAX then
                FireEventNoReset("W_SprintStopQuickTurnFront")
            elseif angle >= PRM_SPRINT_STOP_QUICK_TURN_ANGLE_F_L_MIN and angle < PRM_SPRINT_STOP_QUICK_TURN_ANGLE_F_L_MAX then
                FireEventNoReset("W_SprintStopQuickTurnLeft")
            elseif angle > PRM_SPRINT_STOP_QUICK_TURN_ANGLE_F_R_MIN and angle <= PRM_SPRINT_STOP_QUICK_TURN_ANGLE_F_R_MAX then
                FireEventNoReset("W_SprintStopQuickTurnRight")
            elseif angle > PRM_SPRINT_STOP_QUICK_TURN_ANGLE_B_L_MIN and angle < PRM_SPRINT_STOP_QUICK_TURN_ANGLE_B_L_MAX then
                FireEventNoReset("W_SprintStopQuickTurnLeftBack")
            else
                FireEventNoReset("W_SprintStopQuickTurnRightBack")
            end
        elseif current_hkb_state == HKB_STATE_SPRINT_QUICK_TURN_READY then
            local rollingDir = hkbGetVariable("TurnAngle")
            if rollingDir > 0 then
                FireEventNoReset("W_SprintQuickTurnRight180")
            else
                FireEventNoReset("W_SprintQuickTurnLeft180")
            end
        end
    end
    
end

function _ActivateAddBehavior(current_hkb_state, next_add_behavior)
    local currentStyle = GetStyleType(current_hkb_state)
    local currentState = GetStateType(current_hkb_state)
    if next_add_behavior == BEH_ADD_NONE then
        return
    elseif next_add_behavior == BEH_ADD_R_SUB_WEAPON_EXPAND then
        g_EndSubWeaponChange = FALSE
        SetVariable("AddSubWeaponBlend", 1)
        if currentStyle == STYLE_TYPE_SWIM or env(IsSpEffectBehaviorRefID, SP_EF_REF_IN_WATERSIDE_AREA) == TRUE then
            FireEventNoReset("W_AddSwimSubWeaponExpand")
        elseif currentStyle == STYLE_TYPE_DIVE then
            FireEventNoReset("W_AddDiveSubWeaponExpand")
        else
            FireEventNoReset("W_AddSubWeaponExpand")
        end
    elseif next_add_behavior == BEH_ADD_R_NIGHTVISION_START then
        SetVariable("AddActionBlend", 1)
        FireEventNoReset("W_AddNightvisionStart")
    elseif next_add_behavior == BEH_ADD_R_NIGHTVISION_END then
        SetVariable("AddActionBlend", 1)
        FireEvent("W_AddNightvisionEnd")
    elseif next_add_behavior == BEH_ADD_R_NON_COMBAT_AREA_ENTER then
        SetVariable("AddNonCombatBlend", 1)
        FireEventNoReset("W_AddNonCombatAreaEnter")
    elseif next_add_behavior == BEH_ADD_R_NON_COMBAT_AREA_LEAVE then
        SetVariable("AddNonCombatBlend", 1)
        FireEventNoReset("W_AddNonCombatAreaLeave")
    elseif next_add_behavior == BEH_ADD_R_HIT_DAMAGE then
        act(CloseMenuWhenUsingItem)
        if currentStyle == STYLE_TYPE_FREE_FALL or currentStyle == STYLE_TYPE_WIRE_FALL then
            local subWeaponCategory = env(GetEquipWeaponCategory, HAND_LEFT)
            if subWeaponCategory == WEP_MOTION_CATEGORY_074 and env(IsUserJumpRequest, ACTION_ARM_SHINOBI_WEP_ACTION) == TRUE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ATEMI_KAWARIMI) == TRUE then
                act(WeaponParameterReference, HAND_LEFT)
                FireEvent("W_AirSubAttackMoveReady")
            else
                SetVariable("AddDamageBlend", 1)
                FireEventNoReset("W_AirDamageMinimumAdd")
            end
        else
            local subWeaponCategory = env(GetEquipWeaponCategory, HAND_LEFT)
            if subWeaponCategory == WEP_MOTION_CATEGORY_074 and env(IsUserJumpRequest, ACTION_ARM_SHINOBI_WEP_ACTION) == TRUE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ATEMI_KAWARIMI) == TRUE then
                act(WeaponParameterReference, HAND_LEFT)
                FireEvent("W_SubAttackJumpReady")
            else
                local damage_angle = env(GetReceivedDamageDirection)
                SetVariable("AddDamageDirection", damage_angle)
                SetVariable("AddDamageBlend", 1)
                FireEventNoReset("W_AddDamageStart")
            end
        end
    elseif next_add_behavior == BEH_ADD_R_SWIM_HIT_DAMAGE then
        act(CloseMenuWhenUsingItem)
        SetVariable("AddDamageBlend", 1)
        if currentStyle == STYLE_TYPE_SWIM then
            FireEventNoReset("W_AddSwimDamageMinimum")
        elseif currentStyle == STYLE_TYPE_DIVE then
            FireEventNoReset("W_AddDiveDamageMinimum")
        end
    elseif next_add_behavior == BEH_ADD_R_GUARD_DAMAGE then
        if currentStyle == STYLE_TYPE_FREE_FALL or currentStyle == STYLE_TYPE_WIRE_FALL then
            if currentState == STATE_TYPE_STANDBY_SUB_GUARD or currentState == STATE_TYPE_ACTION_SUB_GUARD or currentState == STATE_TYPE_REACTION_SUB_GUARD then
                act(WeaponParameterReference, HAND_LEFT)
                SetVariable("AddDamageBlend", 1)
                if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_JUST_DEFLECT) == TRUE then
                    FireEventNoReset("W_AirSubAttackDeflectHardAdd")
                else
                    FireEventNoReset("W_AirSubAttackDeflectEasyAdd")
                end
            elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_JUST_DEFLECT) == TRUE then
                if env(GetSpecialAttribute) == DAMAGE_ELEMENT_LIGHTNING or env(GetSpecialAttribute) == DAMAGE_ELEMENT_BLUE_LIGHTNING then
                    g_AddElectroCharge = TRUE
                else
                    SetVariable("AddDamageBlend", 1)
                    FireEventNoReset("W_AirDeflectHardMinimumAdd")
                end
            elseif env(GetSpecialAttribute) == DAMAGE_ELEMENT_LIGHTNING or env(GetSpecialAttribute) == DAMAGE_ELEMENT_BLUE_LIGHTNING then
                g_AddElectroCharge = TRUE
            else
                SetVariable("AddDamageBlend", 1)
                FireEventNoReset("W_AirDeflectEasyMinimumAdd")
            end
        elseif currentState == STATE_TYPE_STANDBY_SUB_GUARD or currentState == STATE_TYPE_ACTION_SUB_GUARD or currentState == STATE_TYPE_REACTION_SUB_GUARD then
            act(WeaponParameterReference, HAND_LEFT)
            SetVariable("AddDamageBlend", 1)
            if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_JUST_DEFLECT) == TRUE then
                local damageType = env(GetReceivedDamageType)
                if damageType == DAMAGE_TYPE_GUARDATTACKER_STAMZERO then
                    FireEventNoReset("W_GroundSubAttackBreakDeflectAdd")
                else
                    FireEventNoReset("W_GroundSubAttackDeflectHardAdd")
                end
            else
                FireEventNoReset("W_GroundSubAttackDeflectEasyAdd")
            end
        elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_JUST_DEFLECT) == TRUE then
            SetVariable("AddDamageBlend", 1)
            FireEventNoReset("W_StandDeflectHardMinimum")
        else
            SetVariable("AddDamageBlend", 1)
            FireEventNoReset("W_StandDeflectEasyMinimum")
        end
    elseif next_add_behavior == BEH_ADD_R_BREAK_DAMAGE then
        local damageType = env(GetReceivedDamageType)
        if currentStyle == STYLE_TYPE_FREE_FALL or currentStyle == STYLE_TYPE_WIRE_FALL then
            if damageType == DAMAGE_TYPE_GUARDED or damageType == DAMAGE_TYPE_GUARDED_LEFT or damageType == DAMAGE_TYPE_DEF_REAPEL_STAM_DAMAGE_BREAK then
                SetVariable("AddDamageBlend", 1)
                FireEventNoReset("W_AirDeflectedAdd")
            elseif damageType == DAMAGE_TYPE_GUARDED_NO_DEFLECT_RIGHT or damageType == DAMAGE_TYPE_GUARDED_NO_DEFLECT_LEFT then
                SetVariable("AddDamageBlend", 1)
                FireEventNoReset("W_AirDeflectedAdd")
            end
        end
    elseif next_add_behavior == BEH_ADD_R_SPECIAL_DAMAGE then
        act(CloseMenuWhenUsingItem)
        local damageElement = env(GetSpecialAttribute)
        if damageElement == DAMAGE_ELEMENT_FIRE or env(IsSpEffectBehaviorRefID, SP_EF_REF_FIRE_ADD_DAMAGE_BURN) == TRUE then
            SetVariable("AddDamageFireBlend", 1)
            FireEventNoReset("W_DamageFireAdd")
        end
    elseif next_add_behavior == BEH_ADD_R_ADD_ACTION_INPUT_RESEND then
        if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_JUMP) == TRUE then
            FireEventNoReset("W_AddActionInputJump")
        elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_USE_ITEM) == TRUE then
            FireEventNoReset("W_AddActionInputUseItem")
        elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_CROUCH) == TRUE then
            FireEventNoReset("W_AddActionInputCrouch")
        elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_ATTACK) == TRUE then
            FireEventNoReset("W_AddActionInputAttack")
        elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_GUARD) == TRUE then
            FireEventNoReset("W_AddActionInputGuard")
        elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_SUB_ATTACK) == TRUE then
            FireEventNoReset("W_AddActionInputSubAttack")
        elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_WIRE_SHOOT) == TRUE then
            FireEventNoReset("W_AddActionInputWireShoot")
        elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_WALL_HANG) == TRUE then
            FireEventNoReset("W_AddActionInputWallHang")
        elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_KICK) == TRUE then
            FireEventNoReset("W_AddActionInputKick")
        elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_SUB_WEAPON_CHANGE) == TRUE then
            FireEventNoReset("W_AddActionInputSubWeaponChange")
        end
    elseif next_add_behavior == BEH_ADD_R_BARE_HAND_RIGHT_START then
        FireEventNoReset("W_AddBlendFingerRightFadeIn")
    elseif next_add_behavior == BEH_ADD_R_BARE_HAND_RIGHT_END then
        FireEventNoReset("W_AddBlendFingerRightFadeOut")
    end
    return
    
end

function _ActivateBehavior(current_hkb_state, next_behavior)
    local currentStyle = GetStyleType(current_hkb_state)
    local currentState = GetStateType(current_hkb_state)
    if next_behavior == BEH_NONE then
        return
    elseif next_behavior == BEH_R_THROW_DEATH then
        FireEvent("W_ThrowDefDeathStart" .. hkbGetVariable("Selector_ThrowId"))
    elseif next_behavior == BEH_R_THROW_KILL then
        local animeId = env(GetThrowAnimID)
        SetVariable("Selector_ThrowAnimId", animeId)
        FireEvent("W_ThrowKill" .. animeId)
    elseif next_behavior == BEH_R_THROW_ESCAPE then
        FireEvent("W_ThrowEscape" .. hkbGetVariable("Selector_ThrowId"))
    elseif next_behavior == BEH_R_DEATH then
        SetVariable("EnablePositioningJumpLand", FALSE)
        SetVariable("FallState", 0)
        local damageType = env(GetReceivedDamageType)
        if damageType == DAMAGE_TYPE_FORCE_DEATH then
            FireEvent("W_DiveForceDeath")
        elseif damageType == DAMAGE_TYPE_DEATH_FALLING then
            FireEvent("W_FallDeathStart")
        elseif damageType == DAMAGE_TYPE_FALL_DEAD_RETURN then
            FireEvent("W_FallDeadReturnStart")
        elseif damageType == DAMAGE_TYPE_LAND_DEAD_RETURN then
            if env(IsSwimContact) == TRUE then
                FireEvent("W_LandWaterDeathReturnStart")
            else
                FireEvent("W_LandDeadReturnStart")
            end
        elseif damageType == DAMAGE_TYPE_LAND_DEAD then
            if env(IsSwimContact) == TRUE then
                FireEvent("W_LandWaterDeathNoRevivalStart")
            else
                FireEvent("W_LandDeathNoRevivalStart")
            end
        elseif currentStyle == STYLE_TYPE_FREE_FALL or currentStyle == STYLE_TYPE_WIRE_FALL or currentStyle == STYLE_TYPE_AGING_FALL then
            local damage_angle = env(GetDamageDirection)
            local damage_level = env(GetDamageLevel)
            if env(GetSpecialAttribute) == DAMAGE_ELEMENT_LIGHTNING then
                SetVariable("IndexDeath", DEATH_TYPE_COMMON_BACK)
                FireEvent("W_FallDeathElectroChargeStart")
            elseif env(GetSpecialAttribute) == DAMAGE_ELEMENT_BLUE_LIGHTNING then
                SetVariable("IndexDeath", DEATH_TYPE_COMMON)
                FireEvent("W_FallDeathElectroChargeWeakStart")
            elseif damage_level == DAMAGE_LEVEL_EXLARGE then
                SetVariable("DamageDirection", damage_angle)
                _setDamageAbsorption(damage_angle)
                SetVariable("IndexDeath", DEATH_TYPE_COMMON_BACK)
                FireEvent("W_AirDamageDeathLargeBlowStart")
            elseif damage_level == DAMAGE_LEVEL_EX_BLAST then
                SetVariable("DamageDirection", damage_angle)
                _setDamageAbsorption(damage_angle)
                SetVariable("IndexDeath", DEATH_TYPE_COMMON_BACK)
                FireEvent("W_AirDamageDeathExLargeBlowStart")
            elseif damage_level == DAMAGE_LEVEL_BREATH then
                SetVariable("DamageDirection", damage_angle)
                _setDamageAbsorption(damage_angle)
                SetVariable("IndexDeath", DEATH_TYPE_COMMON_BACK)
                FireEvent("W_AirDamageDeathSpecialLargeBlowStart")
            elseif damage_level == DAMAGE_LEVEL_UPPER then
                SetVariable("IndexDeath", DEATH_TYPE_COMMON_BACK)
                FireEvent("W_AirDamageDeathLargeUpperStart")
            elseif damage_level == DAMAGE_LEVEL_FLING then
                SetVariable("IndexDeath", DEATH_TYPE_COMMON_BACK)
                FireEvent("W_AirDamageDeathLargePoundStart")
            elseif damage_level == DAMAGE_LEVEL_NONE then
                SetVariable("Selector_FallDmgDir", SELECTOR_FALL_DMG_DIR_B)
                SetVariable("IndexDeath", DEATH_TYPE_COMMON_BACK)
                SetVariable("DamageDirection", DAMAGE_DIR_BACK)
                FireEvent("W_FallDeathDmgStartNaturalDeath")
            elseif currentStyle == STYLE_TYPE_AGING_FALL then
                FireEvent("W_AgingFallDeathStart")
            else
                if damage_angle == SELECTOR_DAMAGE_DIR_B then
                    SetVariable("Selector_FallDmgDir", SELECTOR_FALL_DMG_DIR_B)
                    SetVariable("IndexDeath", DEATH_TYPE_COMMON_BACK)
                    SetVariable("DamageDirection", DAMAGE_DIR_BACK)
                else
                    SetVariable("Selector_FallDmgDir", SELECTOR_FALL_DMG_DIR_F)
                    SetVariable("IndexDeath", DEATH_TYPE_COMMON)
                    SetVariable("DamageDirection", DAMAGE_DIR_FRONT)
                end
                _setDamageAbsorption(damage_angle)
                FireEvent("W_FallDeathDmgStart")
            end
        elseif currentStyle == STYLE_TYPE_SWIM then
            if env(IsSpEffectBehaviorRefID, SP_EF_REF_ENABLE_INSANE) == TRUE then
                FireEvent("W_SwimDeathStartInsane")
            elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_ENABLE_ELECTRIC_SHOCK_WEAK) == TRUE or env(GetSpecialAttribute) == DAMAGE_ELEMENT_BLUE_LIGHTNING then
                FireEvent("W_SwimDeathStartElectricShockWeak")
            else
                FireEvent("W_SwimDeathStart")
            end
        elseif currentStyle == STYLE_TYPE_DIVE then
            if env(IsSpEffectBehaviorRefID, SP_EF_REF_ENABLE_INSANE) == TRUE then
                FireEvent("W_DiveDeathStartInsane")
            elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_ENABLE_ELECTRIC_SHOCK_WEAK) == TRUE or env(GetSpecialAttribute) == DAMAGE_ELEMENT_BLUE_LIGHTNING then
                FireEvent("W_DiveDeathStartElectricShockWeak")
            else
                FireEvent("W_DiveDeathStart")
            end
        else
            local damage_angle = env(GetReceivedDamageDirection)
            local damage_angle_FB = env(GetDamageDirection)
            local attack_dir = env(GetAtkDirection)
            local damage_level = env(GetDamageLevel)
            if env(GetKnockbackDistance) < 0 then
                if damage_angle == DAMAGE_DIR_LEFT then
                    damage_angle = DAMAGE_DIR_RIGHT
                elseif damage_angle == DAMAGE_DIR_RIGHT then
                    damage_angle = DAMAGE_DIR_LEFT
                elseif damage_angle == DAMAGE_DIR_FRONT then
                    damage_angle = DAMAGE_DIR_BACK
                elseif damage_angle == DAMAGE_DIR_BACK then
                    damage_angle = DAMAGE_DIR_FRONT
                end
            end
            if damage_angle == DAMAGE_DIR_LEFT then
                damage_angle = SELECTOR_DAMAGE_DIR_L
            elseif damage_angle == DAMAGE_DIR_RIGHT then
                damage_angle = SELECTOR_DAMAGE_DIR_R
            elseif damage_angle == DAMAGE_DIR_FRONT then
                damage_angle = SELECTOR_DAMAGE_DIR_F
            elseif damage_angle == DAMAGE_DIR_BACK then
                damage_angle = SELECTOR_DAMAGE_DIR_B
            end
            if g_forceCrouch == TRUE then
                if env(IsSpEffectBehaviorRefID, SP_EF_REF_ENABLE_INSANE) == TRUE then
                    SetVariable("IndexDeath", DEATH_TYPE_COMMON_BACK)
                    FireEvent("W_CrouchDeathStart")
                else
                    local prone_dir = nil
                    if damage_angle_FB == SELECTOR_DAMAGE_DIR_B then
                        prone_dir = DEATH_TYPE_COMMON_BACK
                    else
                        prone_dir = DEATH_TYPE_COMMON
                    end
                    SetVariable("IndexDeath", prone_dir)
                    FireEvent("W_CrouchDeathStart")
                end
            elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_ENABLE_ELECTRIC_SHOCK) == TRUE or env(GetSpecialAttribute) == DAMAGE_ELEMENT_LIGHTNING then
                if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_PRONE_DEATH) == TRUE then
                    local proneDir = hkbGetVariable("Selector_ProneDirection")
                    local deathType = DEATH_TYPE_COMMON
                    if proneDir == SELECTOR_PRONE_DIR_FACE_UP then
                        deathType = DEATH_TYPE_COMMON
                    else
                        deathType = DEATH_TYPE_COMMON_BACK
                    end
                    SetVariable("IndexDeath", deathType)
                    FireEvent("W_GroundDeathStartElectricShockProne")
                else
                    SetVariable("IndexDeath", DEATH_TYPE_COMMON_BACK)
                    FireEvent("W_GroundDeathStartElectricShock")
                end
            elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_ENABLE_ELECTRIC_SHOCK_WEAK) == TRUE or env(GetSpecialAttribute) == DAMAGE_ELEMENT_BLUE_LIGHTNING then
                if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_PRONE_DEATH) == TRUE then
                    local proneDir = hkbGetVariable("Selector_ProneDirection")
                    local deathType = DEATH_TYPE_COMMON
                    if proneDir == SELECTOR_PRONE_DIR_FACE_UP then
                        deathType = DEATH_TYPE_COMMON
                    else
                        deathType = DEATH_TYPE_COMMON_BACK
                    end
                    SetVariable("IndexDeath", deathType)
                    FireEvent("W_GroundDeathStartElectricShockWeakProne")
                else
                    SetVariable("IndexDeath", DEATH_TYPE_COMMON_BACK)
                    FireEvent("W_GroundDeathStartElectricShockWeak")
                end
            elseif damage_level == DAMAGE_LEVEL_EXLARGE then
                SetVariable("DamageDirection", damage_angle_FB)
                _setDamageAbsorption(damage_angle_FB)
                SetVariable("IndexDeath", DEATH_TYPE_COMMON_BACK)
                FireEvent("W_StandDamageDeathLargeBlowStart")
            elseif damage_level == DAMAGE_LEVEL_EX_BLAST then
                SetVariable("DamageDirection", damage_angle_FB)
                _setDamageAbsorption(damage_angle_FB)
                SetVariable("IndexDeath", DEATH_TYPE_COMMON_BACK)
                FireEvent("W_StandDamageDeathExLargeBlowStart")
            elseif damage_level == DAMAGE_LEVEL_BREATH then
                SetVariable("DamageDirection", damage_angle_FB)
                _setDamageAbsorption(damage_angle_FB)
                SetVariable("IndexDeath", DEATH_TYPE_COMMON_BACK)
                FireEvent("W_StandDamageDeathSpecialLargeBlowStart")
            elseif damage_level == DAMAGE_LEVEL_SMALL_BLOW then
                SetVariable("DamageDirection", damage_angle_FB)
                _setDamageAbsorption(damage_angle_FB)
                local prone_dir = nil
                if damage_angle == SELECTOR_DAMAGE_DIR_B then
                    prone_dir = DEATH_TYPE_COMMON_BACK
                else
                    prone_dir = DEATH_TYPE_COMMON
                end
                SetVariable("IndexDeath", prone_dir)
                act(SetDamageAnimType, DAMAGE_FLAG_SMALL_BLOW)
                FireEvent("W_StandDamageDeathSmallBlow")
            elseif damage_level == DAMAGE_LEVEL_UPPER then
                SetVariable("IndexDeath", DEATH_TYPE_COMMON_BACK)
                FireEvent("W_StandDamageDeathLargeUpperStart")
            elseif damage_level == DAMAGE_LEVEL_FLING then
                SetVariable("IndexDeath", DEATH_TYPE_COMMON_BACK)
                act(SetDamageAnimType, DAMAGE_FLAG_FLING)
                FireEvent("W_StandDamageDeathLargePound")
            elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_PRONE_DEATH) == TRUE then
                local proneDir = hkbGetVariable("Selector_ProneDirection")
                local deathType = DEATH_TYPE_COMMON
                if proneDir == SELECTOR_PRONE_DIR_FACE_UP then
                    deathType = DEATH_TYPE_COMMON
                else
                    deathType = DEATH_TYPE_COMMON_BACK
                end
                SetVariable("IndexDeath", deathType)
                FireEvent("W_GroundDeathStartProne")
            elseif (env(GetSpecialAttribute) == DAMAGE_ELEMENT_FIRE or env(IsSpEffectBehaviorRefID, SP_EF_REF_FIRE_ADD_DAMAGE_BURN) == TRUE) and (damage_level == DAMAGE_LEVEL_NONE or damage_level == DAMAGE_LEVEL_SMALL or damage_level == DAMAGE_LEVEL_MIDDLE or damage_level == DAMAGE_LEVEL_LARGE or damage_level == DAMAGE_LEVEL_PUSH or damage_level == DAMAGE_LEVEL_MINIMUM) then
                SetVariable("IndexDeath", DEATH_TYPE_COMMON_BACK)
                FireEvent("W_GroundDeathStartFire")
            elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_ENABLE_INSANE) == TRUE then
                SetVariable("IndexDeath", DEATH_TYPE_COMMON_BACK)
                FireEvent("W_GroundDeathStartInsane")
            elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_POISON) == TRUE and damage_level == DAMAGE_LEVEL_NONE then
                SetVariable("IndexDeath", DEATH_TYPE_COMMON_BACK)
                FireEvent("W_GroundDeathStartPoison")
            elseif currentStyle == STYLE_TYPE_AGING_STAND then
                FireEvent("W_AgingGroundDeathStart")
            else
                local prone_dir = nil
                if damage_angle_FB == SELECTOR_DAMAGE_DIR_B then
                    prone_dir = DEATH_TYPE_COMMON_BACK
                else
                    prone_dir = DEATH_TYPE_COMMON
                end
                SetVariable("IndexDeath", prone_dir)
                SetVariable("DamageDirection", damage_angle_FB)
                _setDamageAbsorption(damage_angle_FB)
                FireEvent("W_GroundDeathStart")
            end
        end
    elseif next_behavior == BEH_R_SPECIAL_DAMAGE then
        act(CloseMenuWhenUsingItem)
        if env(IsSpEffectBehaviorRefID, SP_EF_REF_ENABLE_INSANE) == TRUE then
            if g_forceCrouch == TRUE then
                SetVariable("DamageDirection", SELECTOR_DAMAGE_DIR_B)
                FireEvent("W_CrouchDamageLarge")
            elseif currentStyle == STYLE_TYPE_SWIM then
                FireEvent("W_SwimDamageInsane")
            elseif currentStyle == STYLE_TYPE_DIVE then
                FireEvent("W_DiveDamageInsane")
            elseif currentStyle == STYLE_TYPE_FREE_FALL or currentStyle == STYLE_TYPE_WIRE_FALL or currentStyle == STYLE_TYPE_AGING_FALL then
                FireEvent("W_AirDamageInsane")
            elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_PRONE_DEATH) == TRUE then
                SetVariable("AddDamageDirection", DAMAGE_DIR_FRONT)
                SetVariable("AddDamageBlend", 1)
                FireEventNoReset("W_AddDamageStart")
            else
                FireEvent("W_StandDamageInsane")
            end
        elseif env(GetBehaviorID, BEHAVIOR_IDENTIFICATION_VALUE_SXL_BLAST) == TRUE then
            FireEvent("W_AirDamageElectroReceiveExplosionStart")
        elseif env(GetBehaviorID, BEHAVIOR_IDENTIFICATION_VALUE_STORM_BACK_JUMP) == TRUE then
            act(TurnTowardAttacker, DAMAGE_ABSORPTION_DIGREE_F)
            if currentStyle == STYLE_TYPE_FREE_FALL or currentStyle == STYLE_TYPE_WIRE_FALL then
                FireEvent("W_AirStormJumpBackStart")
            else
                FireEvent("W_GroundStormJumpBackReady")
            end
        elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_ENABLE_ELECTRIC_SHOCK) == TRUE then
            if g_forceCrouch == TRUE then
                SetVariable("DamageDirection", SELECTOR_DAMAGE_DIR_B)
                FireEvent("W_CrouchDamageLarge")
            elseif currentStyle == STYLE_TYPE_SWIM then
                SetVariable("DamageDirection", DAMAGE_DIR_FRONT)
                FireEvent("W_SwimDamageLarge")
            elseif currentStyle == STYLE_TYPE_DIVE then
                SetVariable("DamageDirection", DAMAGE_DIR_FRONT)
                FireEvent("W_DiveDamageLarge")
            elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_PRONE_DEATH) == TRUE then
                FireEvent("W_GroundDamageElectricShockProne")
            else
                FireEvent("W_GroundDamageElectricShock")
            end
        elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_ENABLE_ELECTRIC_SHOCK_WEAK) == TRUE then
            if g_forceCrouch == TRUE then
                SetVariable("DamageDirection", SELECTOR_DAMAGE_DIR_B)
                FireEvent("W_CrouchDamageLarge")
            elseif currentStyle == STYLE_TYPE_SWIM then
                FireEvent("W_SwimDamageElectricShockWeak")
            elseif currentStyle == STYLE_TYPE_DIVE then
                FireEvent("W_DiveDamageElectricShockWeak")
            elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_PRONE_DEATH) == TRUE then
                FireEvent("W_GroundDamageElectricShockWeakProne")
            else
                FireEvent("W_GroundDamageElectricShockWeak")
            end
        end
    elseif next_behavior == BEH_R_AGING_DAMAGE then
        act(CloseMenuWhenUsingItem)
        if currentStyle == STYLE_TYPE_FREE_FALL or currentStyle == STYLE_TYPE_WIRE_FALL then
            FireEvent("W_FreeFallAging")
        elseif currentStyle == STYLE_TYPE_SWIM then
            FireEvent("W_SwimDeathAgingStart")
        elseif currentStyle == STYLE_TYPE_DIVE then
            FireEvent("W_DiveDeathAgingStart")
        else
            FireEvent("W_StandAging")
        end
    elseif next_behavior == BEH_R_CURE_AGING then
        if currentStyle == STYLE_TYPE_AGING_FALL then
            FireEventNoReset("W_FreeFall")
        elseif GetLocomotionType() == LOCOMOTION_TYPE_MOVE then
            SetVariable("StartTime_02", 0)
            SetVariable("Selector_UseTransitionEffect", SELECTOR_USE_TE_TAE_BLEND_IGNOR_FROM_GENERATOR)
            FireEventNoReset("W_StandMoveLoop")
        else
            FireEventNoReset("W_Idle")
        end
    elseif next_behavior == BEH_R_HIT_DAMAGE then
        act(CloseMenuWhenUsingItem)
        local damage_angle = env(GetReceivedDamageDirection)
        local damage_angle_FB = env(GetDamageDirection)
        local attack_dir = env(GetAtkDirection)
        local damage_level = env(GetDamageLevel)
        if env(GetKnockbackDistance) < 0 then
            if damage_angle == DAMAGE_DIR_LEFT then
                damage_angle = DAMAGE_DIR_RIGHT
            elseif damage_angle == DAMAGE_DIR_RIGHT then
                damage_angle = DAMAGE_DIR_LEFT
            elseif damage_angle == DAMAGE_DIR_FRONT then
                damage_angle = DAMAGE_DIR_BACK
            elseif damage_angle == DAMAGE_DIR_BACK then
                damage_angle = DAMAGE_DIR_FRONT
            end
        end
        if damage_angle == DAMAGE_DIR_LEFT then
            damage_angle = SELECTOR_DAMAGE_DIR_L
        elseif damage_angle == DAMAGE_DIR_RIGHT then
            damage_angle = SELECTOR_DAMAGE_DIR_R
        elseif damage_angle == DAMAGE_DIR_FRONT then
            damage_angle = SELECTOR_DAMAGE_DIR_F
        elseif damage_angle == DAMAGE_DIR_BACK then
            damage_angle = SELECTOR_DAMAGE_DIR_B
        end
        local currentStyle = GetStyleType(current_hkb_state)
        if currentStyle == STYLE_TYPE_FREE_FALL or currentStyle == STYLE_TYPE_WIRE_FALL or currentStyle == STYLE_TYPE_HANG then
            local subWeaponCategory = env(GetEquipWeaponCategory, HAND_LEFT)
            if subWeaponCategory == WEP_MOTION_CATEGORY_074 and env(IsUserJumpRequest, ACTION_ARM_SHINOBI_WEP_ACTION) == TRUE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ATEMI_KAWARIMI) == TRUE then
                act(WeaponParameterReference, HAND_LEFT)
                FireEvent("W_AirSubAttackMoveReady")
            elseif env(GetSpecialAttribute) == DAMAGE_ELEMENT_LIGHTNING then
                act(TurnTowardAttacker, DAMAGE_ABSORPTION_DIGREE_F)
                FireEvent("W_AirDamageElectroChargeStart")
            elseif env(GetSpecialAttribute) == DAMAGE_ELEMENT_BLUE_LIGHTNING then
                if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ELECTRO_WEAK_DAMAGE_SUPER_ARMOR_SP_ATK_110) == TRUE then
                else
                    FireEvent("W_AirDamageElectroChargeWeakStart")
                end
            elseif damage_level == DAMAGE_LEVEL_NONE and env(GetBehaviorID, BEHAVIOR_IDENTIFICATION_VALUE_BLINDING) == TRUE then
                FireEvent("W_AirDamageBlinding")
            elseif damage_level == DAMAGE_LEVEL_SMALL or damage_level == DAMAGE_LEVEL_MIDDLE then
                SetVariable("DamageDirection", damage_angle_FB)
                _setDamageAbsorption(damage_angle_FB)
                FireEvent("W_AirDamageSmall")
            elseif damage_level == DAMAGE_LEVEL_LARGE or damage_level == DAMAGE_LEVEL_PUSH then
                SetVariable("DamageDirection", damage_angle_FB)
                SetVariable("Selector_ProneDirection", SELECTOR_PRONE_DIR_FACE_DOWN)
                _setDamageAbsorption(damage_angle_FB)
                FireEvent("W_AirDamageLargeStart")
            elseif damage_level == DAMAGE_LEVEL_EXLARGE or damage_level == DAMAGE_LEVEL_SMALL_BLOW then
                SetVariable("DamageDirection", damage_angle_FB)
                SetVariable("Selector_ProneDirection", SELECTOR_PRONE_DIR_FACE_DOWN)
                _setDamageAbsorption(damage_angle_FB)
                FireEvent("W_AirDamageLargeBlowStart")
            elseif damage_level == DAMAGE_LEVEL_EX_BLAST then
                SetVariable("DamageDirection", damage_angle_FB)
                SetVariable("Selector_ProneDirection", SELECTOR_PRONE_DIR_FACE_DOWN)
                _setDamageAbsorption(damage_angle_FB)
                FireEvent("W_AirDamageExLargeBlowStart")
            elseif damage_level == DAMAGE_LEVEL_UPPER then
                SetVariable("DamageDirection", damage_angle_FB)
                SetVariable("Selector_ProneDirection", SELECTOR_PRONE_DIR_FACE_DOWN)
                FireEvent("W_AirDamageLargeUpperStart")
            elseif damage_level == DAMAGE_LEVEL_FLING then
                SetVariable("DamageDirection", damage_angle_FB)
                SetVariable("Selector_ProneDirection", SELECTOR_PRONE_DIR_FACE_DOWN)
                FireEvent("W_AirDamageLargePoundStart")
            elseif damage_level == DAMAGE_LEVEL_BREATH then
                SetVariable("DamageDirection", damage_angle_FB)
                SetVariable("Selector_ProneDirection", SELECTOR_PRONE_DIR_FACE_DOWN)
                _setDamageAbsorption(damage_angle_FB)
                FireEvent("W_AirDamageSpecialLargeBlowStart")
            end
        else
            local subWeaponCategory = env(GetEquipWeaponCategory, HAND_LEFT)
            if g_forceCrouch == TRUE then
                if damage_level == DAMAGE_LEVEL_SMALL or damage_level == DAMAGE_LEVEL_MIDDLE or damage_level == DAMAGE_LEVEL_PUSH then
                    SetVariable("DamageDirection", damage_angle_FB)
                    _setDamageAbsorption(damage_angle_FB)
                    act(SetDamageAnimType, DAMAGE_FLAG_SMALL)
                    FireEvent("W_CrouchDamageSmall")
                else
                    SetVariable("DamageDirection", damage_angle_FB)
                    _setDamageAbsorption(damage_angle_FB)
                    FireEvent("W_CrouchDamageLarge")
                end
            elseif subWeaponCategory == WEP_MOTION_CATEGORY_074 and env(IsUserJumpRequest, ACTION_ARM_SHINOBI_WEP_ACTION) == TRUE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ATEMI_KAWARIMI) == TRUE then
                act(WeaponParameterReference, HAND_LEFT)
                FireEvent("W_SubAttackJumpReady")
            elseif damage_level == DAMAGE_LEVEL_NONE and env(GetBehaviorID, BEHAVIOR_IDENTIFICATION_VALUE_BLINDING) == TRUE then
                FireEvent("W_StandDamageBlinding")
            elseif env(GetSpecialAttribute) == DAMAGE_ELEMENT_BLUE_LIGHTNING and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ELECTRO_WEAK_DAMAGE_SUPER_ARMOR_SP_ATK_110) == TRUE then
            elseif (current_hkb_state == HKB_STATE_STAND_DAMAGE_BREAK or current_hkb_state == HKB_STATE_STAND_DEFLECT_BREAK or current_hkb_state == HKB_STATE_LAND_AIR_DAMAGE_BREAK or current_hkb_state == HKB_STATE_LAND_AIR_DEFLECT_GUARD_BREAK) and (damage_level == DAMAGE_LEVEL_PUSH or damage_level == DAMAGE_LEVEL_SMALL or damage_level == DAMAGE_LEVEL_MIDDLE or damage_level == DAMAGE_LEVEL_LARGE) then
                act(SetDamageAnimType, DAMAGE_FLAG_LARGE)
                SetVariable("Selector_ProneDirection", SELECTOR_PRONE_DIR_FACE_DOWN)
                FireEvent("W_StandDamageBreakDamage")
            elseif damage_level == DAMAGE_LEVEL_MINIMUM then
            elseif damage_level == DAMAGE_LEVEL_SMALL then
                SetVariable("DamageDirection", damage_angle)
                act(SetDamageAnimType, DAMAGE_FLAG_SMALL)
                FireEvent("W_StandDamageSmall")
            elseif damage_level == DAMAGE_LEVEL_MIDDLE or damage_level == DAMAGE_LEVEL_PUSH then
                SetVariable("DamageDirection", damage_angle)
                act(SetDamageAnimType, DAMAGE_FLAG_MEDIUM)
                FireEvent("W_StandDamageMiddle")
            elseif damage_level == DAMAGE_LEVEL_LARGE then
                SetVariable("DamageDirection", damage_angle_FB)
                _setProneDir(damage_angle_FB)
                _setDamageAbsorption(damage_angle_FB)
                act(SetDamageAnimType, DAMAGE_FLAG_LARGE)
                FireEvent("W_StandDamageLarge")
            elseif damage_level == DAMAGE_LEVEL_EXLARGE then
                SetVariable("DamageDirection", damage_angle_FB)
                _setDamageAbsorption(damage_angle_FB)
                SetVariable("Selector_ProneDirection", SELECTOR_PRONE_DIR_FACE_DOWN)
                FireEvent("W_StandDamageLargeBlowStart")
            elseif damage_level == DAMAGE_LEVEL_EX_BLAST then
                SetVariable("DamageDirection", damage_angle_FB)
                _setDamageAbsorption(damage_angle_FB)
                SetVariable("Selector_ProneDirection", SELECTOR_PRONE_DIR_FACE_DOWN)
                FireEvent("W_StandDamageExLargeBlowStart")
            elseif damage_level == DAMAGE_LEVEL_SMALL_BLOW then
                SetVariable("DamageDirection", damage_angle_FB)
                _setProneDir(damage_angle_FB)
                _setDamageAbsorption(damage_angle_FB)
                act(SetDamageAnimType, DAMAGE_FLAG_SMALL_BLOW)
                FireEvent("W_StandDamageSmallBlow")
            elseif damage_level == DAMAGE_LEVEL_UPPER then
                SetVariable("Selector_ProneDirection", SELECTOR_PRONE_DIR_FACE_DOWN)
                FireEvent("W_StandDamageLargeUpperStart")
            elseif damage_level == DAMAGE_LEVEL_FLING then
                SetVariable("Selector_ProneDirection", SELECTOR_PRONE_DIR_FACE_DOWN)
                act(SetDamageAnimType, DAMAGE_FLAG_FLING)
                FireEvent("W_StandDamageLargePound")
            elseif damage_level == DAMAGE_LEVEL_BREATH then
                SetVariable("DamageDirection", damage_angle_FB)
                _setDamageAbsorption(damage_angle_FB)
                SetVariable("Selector_ProneDirection", SELECTOR_PRONE_DIR_FACE_DOWN)
                FireEvent("W_StandDamageSpecialLargeBlowStart")
            end
        end
    elseif next_behavior == BEH_R_SWIM_HIT_DAMAGE then
        act(CloseMenuWhenUsingItem)
        local damage_angle = env(GetDamageDirection)
        local attack_dir = env(GetAtkDirection)
        local damage_level = env(GetDamageLevel)
        if env(GetKnockbackDistance) < 0 then
            if damage_angle == DAMAGE_DIR_LEFT then
                damage_angle = DAMAGE_DIR_RIGHT
            elseif damage_angle == DAMAGE_DIR_RIGHT then
                damage_angle = DAMAGE_DIR_LEFT
            elseif damage_angle == DAMAGE_DIR_FRONT then
                damage_angle = DAMAGE_DIR_BACK
            elseif damage_angle == DAMAGE_DIR_BACK then
                damage_angle = DAMAGE_DIR_FRONT
            end
        end
        SetVariable("DamageDirection", damage_angle)
        if damage_angle == SELECTOR_DAMAGE_DIR_B then
            act(TurnTowardAttacker, DAMAGE_ABSORPTION_DIGREE_B)
        else
            act(TurnTowardAttacker, DAMAGE_ABSORPTION_DIGREE_F)
        end
        if damage_level == DAMAGE_LEVEL_SMALL then
            act(SetDamageAnimType, DAMAGE_FLAG_SMALL)
        elseif damage_level == DAMAGE_LEVEL_MIDDLE then
            act(SetDamageAnimType, DAMAGE_FLAG_MEDIUM)
        end
        local currentStyle = GetStyleType(current_hkb_state)
        if currentStyle == STYLE_TYPE_SWIM then
            if damage_level == DAMAGE_LEVEL_SMALL or damage_level == DAMAGE_LEVEL_MIDDLE then
                FireEvent("W_SwimDamageSmall")
            else
                FireEvent("W_SwimDamageLarge")
            end
        elseif currentStyle == STYLE_TYPE_DIVE then
            if damage_level == DAMAGE_LEVEL_SMALL or damage_level == DAMAGE_LEVEL_MIDDLE then
                FireEvent("W_DiveDamageSmall")
            else
                FireEvent("W_DiveDamageLarge")
            end
        end
    elseif next_behavior == BEH_R_GUARD_DAMAGE then
        if env(HasReceivedAnyDamage) == TRUE and env(IsCOMPlayer) == FALSE then
            act(AddSpEffect, SP_EFFECT_DEACTIVATE_HP_AUTO_CHARGE)
        end
        if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_MOVING_SPRINT) == TRUE then
            return
        end
        act(WeaponParameterReference, HAND_RIGHT)
        local currentStyle = GetStyleType(current_hkb_state)
        if currentStyle == STYLE_TYPE_FREE_FALL or currentStyle == STYLE_TYPE_WIRE_FALL then
            local _setDeflectDir = function ()
                local attackDir = DEFLECT_DIR_R
                if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_JUST_DEFLECT) == TRUE then
                    attackDir = env(GetJustGuardDeflectBehavior)
                else
                    attackDir = env(GetGuardDeflectBehavior)
                end
                local deflectDir = 0
                if attackDir == DEFLECT_DIR_L then
                    deflectDir = 0
                elseif attackDir == DEFLECT_DIR_R then
                    deflectDir = 1
                end
                SetVariable("Selector_DeflectDir", deflectDir)
                
            end

            if currentState == STATE_TYPE_STANDBY_SUB_GUARD or currentState == STATE_TYPE_ACTION_SUB_GUARD or currentState == STATE_TYPE_REACTION_SUB_GUARD or current_hkb_state == HKB_STATE_AIR_SUB_ATTACK_GUARD_END or current_hkb_state == HKB_STATE_LAND_AIR_SUB_ATTACK_GUARD_END then
                act(WeaponParameterReference, HAND_LEFT)
                FireEvent("W_AirSubAttackDeflectEasySmall")
            elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_JUST_DEFLECT) == TRUE then
                if env(GetSpecialAttribute) == DAMAGE_ELEMENT_LIGHTNING then
                    act(TurnTowardAttacker, DAMAGE_ABSORPTION_DIGREE_F)
                    FireEvent("W_AirElectroChargeDeflectHard")
                elseif env(GetSpecialAttribute) == DAMAGE_ELEMENT_BLUE_LIGHTNING then
                    FireEvent("W_AirWeakElectroChargeDeflectHard")
                else
                    local damageLevel = env(GetDamageLevel)
                    local hardDeflectDmgLv = SELECTOR_HARD_DEFLECT_DMG_LV_S
                    if damageLevel == DAMAGE_LEVEL_SMALL then
                        hardDeflectDmgLv = SELECTOR_HARD_DEFLECT_DMG_LV_S
                    elseif damageLevel == DAMAGE_LEVEL_MIDDLE then
                        hardDeflectDmgLv = SELECTOR_HARD_DEFLECT_DMG_LV_S
                    elseif damageLevel == DAMAGE_LEVEL_LARGE then
                        hardDeflectDmgLv = SELECTOR_HARD_DEFLECT_DMG_LV_L
                    elseif damageLevel == DAMAGE_LEVEL_EXLARGE then
                        hardDeflectDmgLv = SELECTOR_HARD_DEFLECT_DMG_LV_L
                    elseif damageLevel == DAMAGE_LEVEL_PUSH then
                        hardDeflectDmgLv = SELECTOR_HARD_DEFLECT_DMG_LV_L
                    elseif damageLevel == DAMAGE_LEVEL_FLING then
                        hardDeflectDmgLv = SELECTOR_HARD_DEFLECT_DMG_LV_L
                    elseif damageLevel == DAMAGE_LEVEL_UPPER then
                        hardDeflectDmgLv = SELECTOR_HARD_DEFLECT_DMG_LV_L
                    elseif damageLevel == DAMAGE_LEVEL_EX_BLAST then
                        hardDeflectDmgLv = SELECTOR_HARD_DEFLECT_DMG_LV_XL
                    elseif damageLevel == DAMAGE_LEVEL_BREATH then
                        hardDeflectDmgLv = SELECTOR_HARD_DEFLECT_DMG_LV_XL
                    end
                    if hardDeflectDmgLv == SELECTOR_HARD_DEFLECT_DMG_LV_S then
                        _setDeflectDir()
                        FireEvent("W_AirDeflectHardSmall")
                    elseif hardDeflectDmgLv == SELECTOR_HARD_DEFLECT_DMG_LV_L then
                        _setDeflectDir()
                        FireEvent("W_AirDeflectHardLarge")
                    elseif hardDeflectDmgLv == SELECTOR_HARD_DEFLECT_DMG_LV_XL then
                        FireEvent("W_AirDeflectHardExLarge")
                    end
                end
            elseif env(GetSpecialAttribute) == DAMAGE_ELEMENT_LIGHTNING then
                act(TurnTowardAttacker, DAMAGE_ABSORPTION_DIGREE_F)
                FireEvent("W_AirElectroChargeDeflectEasy")
            elseif env(GetSpecialAttribute) == DAMAGE_ELEMENT_BLUE_LIGHTNING then
                FireEvent("W_AirWeakElectroChargeDeflectEasy")
            else
                local damageLevel = env(GetDamageLevel)
                local easyDeflectDmgLv = SELECTOR_EASY_DEFLECT_DMG_LV_S
                if damageLevel == DAMAGE_LEVEL_SMALL then
                    easyDeflectDmgLv = SELECTOR_EASY_DEFLECT_DMG_LV_S
                elseif damageLevel == DAMAGE_LEVEL_MIDDLE then
                    easyDeflectDmgLv = SELECTOR_EASY_DEFLECT_DMG_LV_S
                elseif damageLevel == DAMAGE_LEVEL_LARGE then
                    easyDeflectDmgLv = SELECTOR_EASY_DEFLECT_DMG_LV_L
                elseif damageLevel == DAMAGE_LEVEL_EXLARGE then
                    easyDeflectDmgLv = SELECTOR_EASY_DEFLECT_DMG_LV_L
                elseif damageLevel == DAMAGE_LEVEL_PUSH then
                    easyDeflectDmgLv = SELECTOR_EASY_DEFLECT_DMG_LV_L
                elseif damageLevel == DAMAGE_LEVEL_FLING then
                    easyDeflectDmgLv = SELECTOR_EASY_DEFLECT_DMG_LV_L
                elseif damageLevel == DAMAGE_LEVEL_UPPER then
                    easyDeflectDmgLv = SELECTOR_EASY_DEFLECT_DMG_LV_L
                elseif damageLevel == DAMAGE_LEVEL_EX_BLAST then
                    easyDeflectDmgLv = SELECTOR_EASY_DEFLECT_DMG_LV_XL
                elseif damageLevel == DAMAGE_LEVEL_BREATH then
                    easyDeflectDmgLv = SELECTOR_EASY_DEFLECT_DMG_LV_XL
                end
                if easyDeflectDmgLv == SELECTOR_EASY_DEFLECT_DMG_LV_S then
                    _setDeflectDir()
                    FireEvent("W_AirDeflectEasySmall")
                elseif easyDeflectDmgLv == SELECTOR_EASY_DEFLECT_DMG_LV_L then
                    _setDeflectDir()
                    FireEvent("W_AirDeflectEasyLarge")
                elseif easyDeflectDmgLv == SELECTOR_EASY_DEFLECT_DMG_LV_XL then
                    FireEvent("W_AirDeflectEasyExLarge")
                end
            end
        else
            local _setDeflectDir = function ()
                local attackDir = DEFLECT_DIR_R
                if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_JUST_DEFLECT) == TRUE then
                    attackDir = env(GetJustGuardDeflectBehavior)
                else
                    attackDir = env(GetGuardDeflectBehavior)
                end
                local deflectDir = SELECTOR_DEFLECT_DIR_F
                if attackDir == DEFLECT_DIR_L then
                    deflectDir = SELECTOR_DEFLECT_DIR_L
                elseif attackDir == DEFLECT_DIR_R then
                    deflectDir = SELECTOR_DEFLECT_DIR_R
                end
                SetVariable("Selector_DeflectDir", deflectDir)
                
            end

            if currentState == STATE_TYPE_STANDBY_SUB_GUARD or currentState == STATE_TYPE_ACTION_SUB_GUARD or currentState == STATE_TYPE_REACTION_SUB_GUARD or current_hkb_state == HKB_STATE_GROUND_SUB_ATTACK_GUARD_END then
                act(WeaponParameterReference, HAND_LEFT)
                local damageLevel = env(GetDamageLevel)
                if damageLevel == DAMAGE_LEVEL_SMALL or damageLevel == DAMAGE_LEVEL_MIDDLE or damageLevel == DAMAGE_LEVEL_LARGE or damageLevel == DAMAGE_LEVEL_PUSH or damageLevel == DAMAGE_LEVEL_SMALL_BLOW or damageLevel == DAMAGE_LEVEL_FLING then
                    act(SetDamageAnimType, DAMAGE_FLAG_GUARD_SMALL)
                    FireEvent("W_GroundSubAttackDeflectEasy")
                elseif damageLevel == DAMAGE_LEVEL_EXLARGE or damageLevel == DAMAGE_LEVEL_UPPER or damageLevel == DAMAGE_LEVEL_EX_BLAST then
                    local damage_angle_FB = env(GetDamageDirection)
                    SetVariable("DamageDirection", damage_angle_FB)
                    if damage_angle_FB == SELECTOR_DAMAGE_DIR_B then
                        act(TurnTowardAttacker, DAMAGE_ABSORPTION_DIGREE_B)
                    else
                        act(TurnTowardAttacker, DAMAGE_ABSORPTION_DIGREE_F)
                    end
                    act(SetDamageAnimType, DAMAGE_FLAG_GUARD_LARGE)
                    FireEvent("W_GroundSubAttackDeflectEasyLarge")
                end
            elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_JUST_DEFLECT) == TRUE then
                local damageType = env(GetReceivedDamageType)
                if env(GetBehaviorID, BEHAVIOR_IDENTIFICATION_VALUE_SP_GUARD_REACTION_1) == TRUE then
                    FireEvent("W_StandDeflectHardRepartition")
                elseif env(GetBehaviorID, BEHAVIOR_IDENTIFICATION_VALUE_SP_GUARD_REACTION_2) == TRUE then
                    FireEvent("W_StandDeflectHardRepartitionRival")
                elseif env(GetBehaviorID, BEHAVIOR_IDENTIFICATION_VALUE_SP_GUARD_REACTION_3) == TRUE then
                    FireEvent("W_StandDeflectHardRepartitionIsei")
                elseif env(GetBehaviorID, BEHAVIOR_IDENTIFICATION_VALUE_SP_GUARD_REACTION_4) == TRUE then
                    FireEvent("W_StandDeflectHardRepartitionOsa")
                elseif damageType == DAMAGE_TYPE_GUARDATTACKER_STAMZERO then
                    _setDeflectDir()
                    FireEvent("W_HardDeflectStagger")
                else
                    local damageLevel = env(GetDamageLevel)
                    local hardDeflectDmgLv = SELECTOR_HARD_DEFLECT_DMG_LV_S
                    if damageLevel == DAMAGE_LEVEL_SMALL then
                        hardDeflectDmgLv = SELECTOR_HARD_DEFLECT_DMG_LV_S
                    elseif damageLevel == DAMAGE_LEVEL_MIDDLE then
                        hardDeflectDmgLv = SELECTOR_HARD_DEFLECT_DMG_LV_S
                    elseif damageLevel == DAMAGE_LEVEL_LARGE then
                        hardDeflectDmgLv = SELECTOR_HARD_DEFLECT_DMG_LV_M
                    elseif damageLevel == DAMAGE_LEVEL_EXLARGE then
                        hardDeflectDmgLv = SELECTOR_HARD_DEFLECT_DMG_LV_L
                    elseif damageLevel == DAMAGE_LEVEL_PUSH then
                        hardDeflectDmgLv = SELECTOR_HARD_DEFLECT_DMG_LV_S
                    elseif damageLevel == DAMAGE_LEVEL_FLING then
                        hardDeflectDmgLv = SELECTOR_HARD_DEFLECT_DMG_LV_L
                    elseif damageLevel == DAMAGE_LEVEL_SMALL_BLOW then
                        hardDeflectDmgLv = SELECTOR_HARD_DEFLECT_DMG_LV_M
                    elseif damageLevel == DAMAGE_LEVEL_MINIMUM then
                        hardDeflectDmgLv = SELECTOR_HARD_DEFLECT_DMG_LV_XS
                    elseif damageLevel == DAMAGE_LEVEL_UPPER then
                        hardDeflectDmgLv = SELECTOR_HARD_DEFLECT_DMG_LV_L
                    elseif damageLevel == DAMAGE_LEVEL_EX_BLAST then
                        hardDeflectDmgLv = SELECTOR_HARD_DEFLECT_DMG_LV_XL
                    elseif damageLevel == DAMAGE_LEVEL_BREATH then
                        hardDeflectDmgLv = SELECTOR_HARD_DEFLECT_DMG_LV_XL
                    end
                    SetVariable("Selector_HardDeflectDmgLv", hardDeflectDmgLv)
                    if hardDeflectDmgLv == SELECTOR_HARD_DEFLECT_DMG_LV_S then
                        act(SetDamageAnimType, DAMAGE_FLAG_GUARD_SMALL)
                    elseif hardDeflectDmgLv == SELECTOR_HARD_DEFLECT_DMG_LV_M then
                        act(SetDamageAnimType, DAMAGE_FLAG_GUARD_LARGE)
                    elseif hardDeflectDmgLv == SELECTOR_HARD_DEFLECT_DMG_LV_L then
                        act(SetDamageAnimType, DAMAGE_FLAG_GUARD_LARGE)
                    end
                    if hardDeflectDmgLv == SELECTOR_HARD_DEFLECT_DMG_LV_S or hardDeflectDmgLv == SELECTOR_HARD_DEFLECT_DMG_LV_M or hardDeflectDmgLv == SELECTOR_HARD_DEFLECT_DMG_LV_L then
                        _setDeflectDir()
                    end
                    if hardDeflectDmgLv == SELECTOR_HARD_DEFLECT_DMG_LV_S then
                        FireEvent("W_StandDeflectHardSmall")
                    elseif hardDeflectDmgLv == SELECTOR_HARD_DEFLECT_DMG_LV_M then
                        FireEvent("W_StandDeflectHardMiddle")
                    elseif hardDeflectDmgLv == SELECTOR_HARD_DEFLECT_DMG_LV_L then
                        FireEvent("W_StandDeflectHardLarge")
                    elseif hardDeflectDmgLv == SELECTOR_HARD_DEFLECT_DMG_LV_XS then
                        SetVariable("AddDamageBlend", 1)
                        FireEvent("W_StandDeflectHardMinimum")
                    elseif hardDeflectDmgLv == SELECTOR_HARD_DEFLECT_DMG_LV_XL then
                        FireEvent("W_StandDeflectHardExLarge")
                    end
                end
            elseif env(GetBehaviorID, BEHAVIOR_IDENTIFICATION_VALUE_SP_GUARD_REACTION_2) == TRUE then
                FireEvent("W_StandDeflectEasyRepartitionRival")
            elseif env(GetBehaviorID, BEHAVIOR_IDENTIFICATION_VALUE_SP_GUARD_REACTION_3) == TRUE then
                FireEvent("W_StandDeflectEasyRepartitionIsei")
            elseif env(GetBehaviorID, BEHAVIOR_IDENTIFICATION_VALUE_SP_GUARD_REACTION_4) == TRUE then
                FireEvent("W_StandDeflectEasyRepartitionOsa")
            else
                local damageLevel = env(GetDamageLevel)
                local easyDeflectDmgLv = SELECTOR_EASY_DEFLECT_DMG_LV_S
                if damageLevel == DAMAGE_LEVEL_SMALL then
                    easyDeflectDmgLv = SELECTOR_EASY_DEFLECT_DMG_LV_S
                elseif damageLevel == DAMAGE_LEVEL_MIDDLE then
                    easyDeflectDmgLv = SELECTOR_EASY_DEFLECT_DMG_LV_S
                elseif damageLevel == DAMAGE_LEVEL_LARGE then
                    easyDeflectDmgLv = SELECTOR_EASY_DEFLECT_DMG_LV_M
                elseif damageLevel == DAMAGE_LEVEL_EXLARGE then
                    easyDeflectDmgLv = SELECTOR_EASY_DEFLECT_DMG_LV_L
                elseif damageLevel == DAMAGE_LEVEL_PUSH then
                    easyDeflectDmgLv = SELECTOR_EASY_DEFLECT_DMG_LV_S
                elseif damageLevel == DAMAGE_LEVEL_FLING then
                    easyDeflectDmgLv = SELECTOR_EASY_DEFLECT_DMG_LV_L
                elseif damageLevel == DAMAGE_LEVEL_SMALL_BLOW then
                    easyDeflectDmgLv = SELECTOR_EASY_DEFLECT_DMG_LV_M
                elseif damageLevel == DAMAGE_LEVEL_MINIMUM then
                    easyDeflectDmgLv = SELECTOR_EASY_DEFLECT_DMG_LV_XS
                elseif damageLevel == DAMAGE_LEVEL_UPPER then
                    easyDeflectDmgLv = SELECTOR_EASY_DEFLECT_DMG_LV_L
                elseif damageLevel == DAMAGE_LEVEL_EX_BLAST then
                    easyDeflectDmgLv = SELECTOR_EASY_DEFLECT_DMG_LV_XL
                elseif damageLevel == DAMAGE_LEVEL_BREATH then
                    easyDeflectDmgLv = SELECTOR_EASY_DEFLECT_DMG_LV_XL
                end
                SetVariable("Selector_EasyDeflectDmgLv", easyDeflectDmgLv)
                if easyDeflectDmgLv == SELECTOR_EASY_DEFLECT_DMG_LV_S then
                    act(SetDamageAnimType, DAMAGE_FLAG_GUARD_SMALL)
                elseif easyDeflectDmgLv == SELECTOR_EASY_DEFLECT_DMG_LV_M then
                    act(SetDamageAnimType, DAMAGE_FLAG_GUARD_LARGE)
                elseif easyDeflectDmgLv == SELECTOR_EASY_DEFLECT_DMG_LV_L then
                    act(SetDamageAnimType, DAMAGE_FLAG_GUARD_EXLARGE)
                end
                if easyDeflectDmgLv == SELECTOR_EASY_DEFLECT_DMG_LV_S or easyDeflectDmgLv == SELECTOR_EASY_DEFLECT_DMG_LV_M or easyDeflectDmgLv == SELECTOR_EASY_DEFLECT_DMG_LV_L then
                    _setDeflectDir()
                    if math.random() > 0.5 then
                        SetVariable("Selector_DeflectVariation", 1)
                    else
                        SetVariable("Selector_DeflectVariation", 0)
                    end
                end
                if easyDeflectDmgLv == SELECTOR_EASY_DEFLECT_DMG_LV_S then
                    FireEvent("W_StandDeflectEasySmall")
                elseif easyDeflectDmgLv == SELECTOR_EASY_DEFLECT_DMG_LV_M then
                    FireEvent("W_StandDeflectEasyMiddle")
                elseif easyDeflectDmgLv == SELECTOR_EASY_DEFLECT_DMG_LV_L then
                    FireEvent("W_StandDeflectEasyLarge")
                elseif easyDeflectDmgLv == SELECTOR_EASY_DEFLECT_DMG_LV_XS then
                    SetVariable("AddDamageBlend", 1)
                    FireEvent("W_StandDeflectEasyMinimum")
                elseif easyDeflectDmgLv == SELECTOR_EASY_DEFLECT_DMG_LV_XL then
                    FireEvent("W_StandDeflectEasyExLarge")
                end
            end
        end
    elseif next_behavior == BEH_R_SWIM_GUARD_DAMAGE then
        if env(HasReceivedAnyDamage) == TRUE and env(IsCOMPlayer) == FALSE then
            act(AddSpEffect, SP_EFFECT_DEACTIVATE_HP_AUTO_CHARGE)
        end
        act(WeaponParameterReference, HAND_RIGHT)
        local damageLevel = env(GetDamageLevel)
        if damageLevel == DAMAGE_LEVEL_MINIMUM then
            act(SetDamageAnimType, DAMAGE_FLAG_MINIMUM)
        elseif damageLevel == DAMAGE_LEVEL_SMALL then
            act(SetDamageAnimType, DAMAGE_FLAG_SMALL)
        elseif damageLevel == DAMAGE_LEVEL_MIDDLE then
            act(SetDamageAnimType, DAMAGE_FLAG_MEDIUM)
        end
        local currentStyle = GetStyleType(current_hkb_state)
        if currentStyle == STYLE_TYPE_SWIM then
            if damageLevel == DAMAGE_LEVEL_SMALL or damageLevel == DAMAGE_LEVEL_MIDDLE or damageLevel == DAMAGE_LEVEL_MINIMUM then
                if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_JUST_DEFLECT) == TRUE then
                    FireEvent("W_SwimDeflectHardSmall")
                else
                    FireEvent("W_SwimDeflectEasySmall")
                end
            elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_JUST_DEFLECT) == TRUE then
                FireEvent("W_SwimDeflectHardLarge")
            else
                FireEvent("W_SwimDeflectEasyLarge")
            end
        elseif currentStyle == STYLE_TYPE_DIVE then
            if damageLevel == DAMAGE_LEVEL_SMALL or damageLevel == DAMAGE_LEVEL_MIDDLE or damageLevel == DAMAGE_LEVEL_MINIMUM then
                if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_JUST_DEFLECT) == TRUE then
                    FireEvent("W_DiveDeflectHardSmall")
                else
                    FireEvent("W_DiveDeflectEasySmall")
                end
            elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_JUST_DEFLECT) == TRUE then
                FireEvent("W_DiveDeflectHardLarge")
            else
                FireEvent("W_DiveDeflectEasyLarge")
            end
        end
    elseif next_behavior == BEH_R_BREAK_DAMAGE then
        act(CloseMenuWhenUsingItem)
        if env(HasReceivedAnyDamage) == TRUE and env(IsCOMPlayer) == FALSE then
            act(AddSpEffect, SP_EFFECT_DEACTIVATE_HP_AUTO_CHARGE)
        end
        local damage_type = env(GetReceivedDamageType)
        local weapon_change_type = env(GetWeaponSwitchState)
        local currentStyle = GetStyleType(current_hkb_state)
        if currentStyle == STYLE_TYPE_SWIM then
            act(SetDamageAnimType, DAMAGE_FLAG_MEDIUM)
            if damage_type == DAMAGE_TYPE_DAMAGEBREAK then
                local damage_angle = env(GetDamageDirection)
                SetVariable("DamageDirection", damage_angle)
                if damage_angle == SELECTOR_DAMAGE_DIR_B then
                    act(TurnTowardAttacker, DAMAGE_ABSORPTION_DIGREE_B)
                else
                    act(TurnTowardAttacker, DAMAGE_ABSORPTION_DIGREE_F)
                end
                FireEvent("W_SwimDamageBreak")
            elseif damage_type == DAMAGE_TYPE_GUARDBREAK or damage_type == DAMAGE_TYPE_GUARDBREAK_BLAST or damage_type == DAMAGE_TYPE_GUARDBREAK_FLING then
                FireEvent("W_SwimDeflectBreak")
            end
        elseif currentStyle == STYLE_TYPE_DIVE then
            act(SetDamageAnimType, DAMAGE_FLAG_MEDIUM)
            if damage_type == DAMAGE_TYPE_DAMAGEBREAK then
                local damage_angle = env(GetDamageDirection)
                SetVariable("DamageDirection", damage_angle)
                if damage_angle == SELECTOR_DAMAGE_DIR_B then
                    act(TurnTowardAttacker, DAMAGE_ABSORPTION_DIGREE_B)
                else
                    act(TurnTowardAttacker, DAMAGE_ABSORPTION_DIGREE_F)
                end
                FireEvent("W_DiveDamageBreak")
            elseif damage_type == DAMAGE_TYPE_GUARDBREAK or damage_type == DAMAGE_TYPE_GUARDBREAK_BLAST or damage_type == DAMAGE_TYPE_GUARDBREAK_FLING then
                FireEvent("W_DiveDeflectBreak")
            end
        elseif g_forceCrouch == TRUE then
            local damage_angle_FB = env(GetDamageDirection)
            SetVariable("DamageDirection", damage_angle_FB)
            _setDamageAbsorption(damage_angle_FB)
            FireEvent("W_CrouchDamageBreak")
        elseif damage_type == DAMAGE_TYPE_GUARDED or damage_type == DAMAGE_TYPE_GUARDED_LEFT or damage_type == DAMAGE_TYPE_DEF_REAPEL_STAM_DAMAGE_BREAK then
            if env(GetJustGuardBounceBehavior) == DEFLECTED_REACTION_TYPE_RIGHT then
                SetVariable("Selector_DeflectedDir", SELECTOR_DEFLECTED_DIR_R)
            else
                SetVariable("Selector_DeflectedDir", SELECTOR_DEFLECTED_DIR_L)
            end
            FireEvent("W_HardDeflected")
        elseif damage_type == DAMAGE_TYPE_GUARDED_NO_DEFLECT_RIGHT or damage_type == DAMAGE_TYPE_GUARDED_NO_DEFLECT_LEFT then
            if env(GetGuardBounceBehavior) == DEFLECTED_REACTION_TYPE_RIGHT then
                SetVariable("Selector_DeflectedDir", SELECTOR_DEFLECTED_DIR_R)
            else
                SetVariable("Selector_DeflectedDir", SELECTOR_DEFLECTED_DIR_L)
            end
            FireEventNoReset("W_EasyDeflected")
        elseif damage_type == DAMAGE_TYPE_GUARDBREAK or damage_type == DAMAGE_TYPE_GUARDBREAK_BLAST or damage_type == DAMAGE_TYPE_GUARDBREAK_FLING then
            act(SetDamageAnimType, DAMAGE_FLAG_GUARD_BREAK)
            if currentState == STATE_TYPE_STANDBY_SUB_GUARD or currentState == STATE_TYPE_ACTION_SUB_GUARD or currentState == STATE_TYPE_REACTION_SUB_GUARD then
                FireEvent("W_StandSubGuardDeflectBreak")
            else
                FireEvent("W_StandDeflectBreak")
            end
        elseif damage_type == DAMAGE_TYPE_DAMAGEBREAK then
            if current_hkb_state == HKB_STATE_STAND_DAMAGE_BREAK then
                act(SetDamageAnimType, DAMAGE_FLAG_LARGE)
                SetVariable("Selector_ProneDirection", SELECTOR_PRONE_DIR_FACE_DOWN)
                FireEvent("W_StandDamageBreakDamage")
            else
                local damage_angle = env(GetReceivedDamageDirection)
                local damage_angle_FB = env(GetDamageDirection)
                local attack_dir = env(GetAtkDirection)
                local damage_level = env(GetDamageLevel)
                if env(GetKnockbackDistance) < 0 then
                    if damage_angle == DAMAGE_DIR_LEFT then
                        damage_angle = DAMAGE_DIR_RIGHT
                    elseif damage_angle == DAMAGE_DIR_RIGHT then
                        damage_angle = DAMAGE_DIR_LEFT
                    elseif damage_angle == DAMAGE_DIR_FRONT then
                        damage_angle = DAMAGE_DIR_BACK
                    elseif damage_angle == DAMAGE_DIR_BACK then
                        damage_angle = DAMAGE_DIR_FRONT
                    end
                end
                if damage_angle == DAMAGE_DIR_LEFT then
                    damage_angle = SELECTOR_DAMAGE_DIR_L
                elseif damage_angle == DAMAGE_DIR_RIGHT then
                    damage_angle = SELECTOR_DAMAGE_DIR_R
                elseif damage_angle == DAMAGE_DIR_FRONT then
                    damage_angle = SELECTOR_DAMAGE_DIR_F
                elseif damage_angle == DAMAGE_DIR_BACK then
                    damage_angle = SELECTOR_DAMAGE_DIR_B
                end
                if damage_level == DAMAGE_LEVEL_EXLARGE then
                    SetVariable("DamageDirection", damage_angle_FB)
                    if damage_angle_FB == SELECTOR_DAMAGE_DIR_B then
                        act(TurnTowardAttacker, DAMAGE_ABSORPTION_DIGREE_B)
                    else
                        act(TurnTowardAttacker, DAMAGE_ABSORPTION_DIGREE_F)
                    end
                    SetVariable("Selector_ProneDirection", SELECTOR_PRONE_DIR_FACE_DOWN)
                    FireEvent("W_StandDamageBreakLargeBlowStart")
                elseif damage_level == DAMAGE_LEVEL_EX_BLAST then
                    SetVariable("DamageDirection", damage_angle_FB)
                    if damage_angle_FB == SELECTOR_DAMAGE_DIR_B then
                        act(TurnTowardAttacker, DAMAGE_ABSORPTION_DIGREE_B)
                    else
                        act(TurnTowardAttacker, DAMAGE_ABSORPTION_DIGREE_F)
                    end
                    SetVariable("Selector_ProneDirection", SELECTOR_PRONE_DIR_FACE_DOWN)
                    FireEvent("W_StandDamageBreakExLargeBlowStart")
                elseif damage_level == DAMAGE_LEVEL_BREATH then
                    SetVariable("DamageDirection", damage_angle_FB)
                    if damage_angle_FB == SELECTOR_DAMAGE_DIR_B then
                        act(TurnTowardAttacker, DAMAGE_ABSORPTION_DIGREE_B)
                    else
                        act(TurnTowardAttacker, DAMAGE_ABSORPTION_DIGREE_F)
                    end
                    SetVariable("Selector_ProneDirection", SELECTOR_PRONE_DIR_FACE_DOWN)
                    FireEvent("W_StandDamageBreakSpecialLargeBlowStart")
                elseif damage_level == DAMAGE_LEVEL_SMALL_BLOW then
                    SetVariable("DamageDirection", damage_angle_FB)
                    if damage_angle_FB == SELECTOR_DAMAGE_DIR_B then
                        act(TurnTowardAttacker, DAMAGE_ABSORPTION_DIGREE_B)
                    else
                        act(TurnTowardAttacker, DAMAGE_ABSORPTION_DIGREE_F)
                    end
                    local prone_dir = nil
                    if damage_angle == SELECTOR_DAMAGE_DIR_B then
                        prone_dir = SELECTOR_PRONE_DIR_FACE_DOWN
                    else
                        prone_dir = SELECTOR_PRONE_DIR_FACE_UP
                    end
                    SetVariable("Selector_ProneDirection", prone_dir)
                    act(SetDamageAnimType, DAMAGE_FLAG_SMALL_BLOW)
                    FireEvent("W_StandDamageBreakSmallBlow")
                elseif damage_level == DAMAGE_LEVEL_UPPER then
                    SetVariable("Selector_ProneDirection", SELECTOR_PRONE_DIR_FACE_DOWN)
                    FireEvent("W_StandDamageBreakLargeUpperStart")
                elseif damage_level == DAMAGE_LEVEL_FLING then
                    SetVariable("Selector_ProneDirection", SELECTOR_PRONE_DIR_FACE_DOWN)
                    act(SetDamageAnimType, DAMAGE_FLAG_FLING)
                    FireEvent("W_StandDamageBreakLargePound")
                elseif damage_level == DAMAGE_LEVEL_BREATH then
                elseif damage_level == DAMAGE_LEVEL_MINIMUM then
                else
                    SetVariable("DamageDirection", damage_angle_FB)
                    act(SetDamageAnimType, DAMAGE_FLAG_MEDIUM)
                    _setDamageAbsorption(damage_angle_FB)
                    FireEvent("W_StandDamageBreak")
                end
            end
        elseif damage_type == DAMAGE_TYPE_DEF_CONTACT_PARRY or damage_type == DAMAGE_TYPE_DEF_CONTACT_PARRY_STAMZERO then
        elseif damage_type == DAMAGE_TYPE_GUARDBREAK_BLAST then
        elseif damage_type == DAMAGE_TYPE_GUARDBREAK_FLING then
        end
    elseif next_behavior == BEH_R_AIR_BREAK_DAMAGE then
        local damage_type = env(GetReceivedDamageType)
        if damage_type == DAMAGE_TYPE_GUARDBREAK or damage_type == DAMAGE_TYPE_GUARDBREAK_BLAST or damage_type == DAMAGE_TYPE_GUARDBREAK_FLING then
            if currentState == STATE_TYPE_STANDBY_SUB_GUARD or currentState == STATE_TYPE_ACTION_SUB_GUARD or currentState == STATE_TYPE_REACTION_SUB_GUARD then
                FireEvent("W_AirSubGuardDeflectBreak")
            else
                FireEvent("W_AirDeflectGuardBreak")
            end
        elseif damage_type == DAMAGE_TYPE_DAMAGEBREAK then
            local damage_angle = env(GetDamageDirection)
            local attack_dir = env(GetAtkDirection)
            local damage_level = env(GetDamageLevel)
            if damage_level == DAMAGE_LEVEL_EXLARGE then
                SetVariable("DamageDirection", damage_angle)
                _setDamageAbsorption(damage_angle)
                SetVariable("Selector_ProneDirection", SELECTOR_PRONE_DIR_FACE_DOWN)
                FireEvent("W_AirDamageBreakLargeBlowStart")
            elseif damage_level == DAMAGE_LEVEL_BREATH then
                SetVariable("DamageDirection", damage_angle)
                _setDamageAbsorption(damage_angle)
                SetVariable("Selector_ProneDirection", SELECTOR_PRONE_DIR_FACE_DOWN)
                FireEvent("W_AirDamageBreakSpecialLargeBlowStart")
            elseif damage_level == DAMAGE_LEVEL_UPPER then
                SetVariable("Selector_ProneDirection", SELECTOR_PRONE_DIR_FACE_DOWN)
                FireEvent("W_AirDamageBreakLargeUpperStart")
            elseif damage_level == DAMAGE_LEVEL_FLING then
                SetVariable("Selector_ProneDirection", SELECTOR_PRONE_DIR_FACE_DOWN)
                FireEvent("W_AirDamageBreakLargePoundStart")
            elseif damage_level == DAMAGE_LEVEL_BREATH then
            elseif damage_level == DAMAGE_LEVEL_MINIMUM then
            else
                FireEvent("W_AirDamageBreak")
            end
        end
    elseif next_behavior == BEH_R_FALL then
        act(CloseMenuWhenUsingItem)
        if env("特殊効果発動中か_Behavior参照ID_寿命延長を厳密に取得", SP_EF_REF_AGING) == TRUE then
            FireEvent("W_AgingFreeFallStart")
        elseif currentState == STATE_TYPE_REACTION_DEATH or currentState == STATE_TYPE_REACTION_DEATH_START or currentState == STATE_TYPE_REACTION_DEATH_LOOP or currentState == STATE_TYPE_REACTION_DEATH_REVIVAL_STAY_LOOP or currentState == STATE_TYPE_REACTION_THROW_DEATH_START or currentState == STATE_TYPE_REACTION_THROW_DEATH_LOOP or currentState == STATE_TYPE_REACTION_THROW_DEATH_REVIVAL_STAY_LOOP then
            if hkbGetVariable("DamageDirection") == SELECTOR_DAMAGE_DIR_B or env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_SET_PRONE_DIR_FACE_DOWN_THROW_DEF) == TRUE then
                SetVariable("Selector_FallDmgDir", SELECTOR_FALL_DMG_DIR_B)
                SetVariable("IndexDeath", DEATH_TYPE_COMMON_BACK)
                SetVariable("Selector_ProneDirection", SELECTOR_PRONE_DIR_FACE_DOWN)
            else
                SetVariable("Selector_FallDmgDir", SELECTOR_FALL_DMG_DIR_F)
                SetVariable("IndexDeath", DEATH_TYPE_COMMON)
                SetVariable("Selector_ProneDirection", SELECTOR_PRONE_DIR_FACE_UP)
            end
            FireEvent("W_DeadFallStart")
        elseif currentStyle == STYLE_TYPE_CROUCH then
            FireEvent("W_SelfCrouchFreeFallStart")
        elseif currentState == STATE_TYPE_STANDBY_SUB_GUARD or currentState == STATE_TYPE_ACTION_SUB_GUARD or currentState == STATE_TYPE_REACTION_SUB_GUARD then
            FireEvent("W_SubGuardEndSelfFallStart")
        else
            FireEvent("W_SelfFallStart")
        end
    elseif next_behavior == BEH_R_LAND then
        act(CloseMenuWhenUsingItem)
        g_beforeFireLand = 0
        local enablePositioningJumpLand = hkbGetVariable("EnablePositioningJumpLand")
        SetVariable("EnablePositioningJumpLand", FALSE)
        local fallState = hkbGetVariable("FallState")
        SetVariable("FallState", 0)
        local fallHeight = env(GetFallHeight) * 0.009999999776482582
        local stickLevel = hkbGetVariable("MoveSpeedLevel")
        local spAtkType = env(GetEquipWeaponSpecialCategoryNumber, HAND_RIGHT)
        local subWeaponCategory = env(GetEquipWeaponCategory, HAND_LEFT)
        if env("特殊効果発動中か_Behavior参照ID_寿命延長を厳密に取得", SP_EF_REF_AGING) == TRUE then
            if current_hkb_state == HKB_STATE_AGING_GROUND_JUMP_START or current_hkb_state == HKB_STATE_AGING_GROUND_JUMP_FALL_LOOP then
                FireEvent("W_LandAgingGroundJump")
            elseif current_hkb_state == HKB_STATE_AGING_FALL_DEATH_START or current_hkb_state == HKB_STATE_AGING_FALL_DEATH_LOOP then
                FireEvent("W_LandAgingFallDeath")
            else
                FireEvent("W_LandAgingFreeFall")
            end
        elseif current_hkb_state == HKB_STATE_FALL_HIT_DMG_LARGE_START or current_hkb_state == HKB_STATE_FALL_HIT_DMG_LARGE_LOOP then
            FireEvent("W_LandFallHitDmgLarge")
        elseif current_hkb_state == HKB_STATE_FALL_DEATH_DMG_START or current_hkb_state == HKB_STATE_FALL_DEATH_DMG_LOOP or current_hkb_state == HKB_STATE_FALL_DEATH_DMG_START_NATURAL_DEATH or current_hkb_state == HKB_STATE_DEAD_FALL_START then
            FireEvent("W_LandFallDeathDmg")
        elseif current_hkb_state == HKB_STATE_STAND_DAMAGE_DEATH_LARGE_BLOW_START or current_hkb_state == HKB_STATE_STAND_DAMAGE_DEATH_LARGE_BLOW_FALL_LOOP then
            FireEvent("W_StandDamageDeathLargeBlowLand")
        elseif current_hkb_state == HKB_STATE_STAND_DAMAGE_DEATH_LARGE_UPPER_START or current_hkb_state == HKB_STATE_STAND_DAMAGE_DEATH_LARGE_UPPER_FALL_LOOP then
            FireEvent("W_StandDamageDeathLargeUpperLand")
        elseif current_hkb_state == HKB_STATE_STAND_DAMAGE_DEATH_EXLARGE_BLOW_START or current_hkb_state == HKB_STATE_STAND_DAMAGE_DEATH_SPECIAL_LARGE_BLOW_START or current_hkb_state == HKB_STATE_STAND_DAMAGE_DEATH_EXLARGE_BLOW_FALL_LOOP then
            FireEvent("W_StandDamageDeathExLargeBlowLand")
        elseif current_hkb_state == HKB_STATE_AIR_DAMAGE_DEATH_LARGE_BLOW_START or current_hkb_state == HKB_STATE_AIR_DAMAGE_DEATH_LARGE_BLOW_FALL_LOOP then
            FireEvent("W_AirDamageDeathLargeBlowLand")
        elseif current_hkb_state == HKB_STATE_AIR_DAMAGE_DEATH_LARGE_POUND_START or current_hkb_state == HKB_STATE_AIR_DAMAGE_DEATH_LARGE_POUND_FALL_LOOP then
            FireEvent("W_AirDamageDeathLargePoundLand")
        elseif current_hkb_state == HKB_STATE_AIR_DAMAGE_DEATH_LARGE_UPPER_START or current_hkb_state == HKB_STATE_AIR_DAMAGE_DEATH_LARGE_UPPER_FALL_LOOP then
            FireEvent("W_AirDamageDeathLargeUpperLand")
        elseif current_hkb_state == HKB_STATE_AIR_DAMAGE_DEATH_EX_LARGE_BLOW_START or current_hkb_state == HKB_STATE_AIR_DAMAGE_DEATH_SPECIAL_LARGE_BLOW_START or current_hkb_state == HKB_STATE_AIR_DAMAGE_DEATH_EX_LARGE_BLOW_FALL_LOOP then
            FireEvent("W_AirDamageDeathExLargeBlowLand")
        elseif current_hkb_state == HKB_STATE_FALL_DEATH_ELECTRO_CHARGE_START or current_hkb_state == HKB_STATE_FALL_DEATH_ELECTRO_CHARGE_LOOP then
            FireEvent("W_LandFallDeathElectroCharge")
        elseif current_hkb_state == HKB_STATE_FALL_DEATH_ELECTRO_CHARGE_WEAK_START or current_hkb_state == HKB_STATE_FALL_DEATH_ELECTRO_CHARGE_WEAK_LOOP then
            FireEvent("W_LandFallDeathElectroChargeWeak")
        elseif current_hkb_state == HKB_STATE_THROW_DEF_DEATH_LARGE_BLOW_START_600380 or current_hkb_state == HKB_STATE_THROW_DEF_DEATH_LARGE_BLOW_LOOP_600380 then
            FireEvent("W_ThrowDefDeathLargeBlowLand600380")
        elseif current_hkb_state == HKB_STATE_STAND_DAMAGE_BREAK_LARGE_BLOW_START or current_hkb_state == HKB_STATE_STAND_DAMAGE_BREAK_LARGE_BLOW_FALL_LOOP then
            FireEvent("W_StandDamageBreakLargeBlowLand")
        elseif current_hkb_state == HKB_STATE_STAND_DAMAGE_BREAK_LARGE_UPPER_START or current_hkb_state == HKB_STATE_STAND_DAMAGE_BREAK_LARGE_UPPER_FALL_LOOP then
            FireEvent("W_StandDamageBreakLargeUpperLand")
        elseif current_hkb_state == HKB_STATE_STAND_DAMAGE_BREAK_EXLARGE_BLOW_START or current_hkb_state == HKB_STATE_STAND_DAMAGE_BREAK_SPECIAL_LARGE_BLOW_START or current_hkb_state == HKB_STATE_STAND_DAMAGE_BREAK_EXLARGE_BLOW_FALL_LOOP then
            FireEvent("W_StandDamageBreakExLargeBlowLand")
        elseif current_hkb_state == HKB_STATE_AIR_DAMAGE_BREAK and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ORIGINAL_LAND_ACTION) == TRUE then
            SetVariable("StartTime_00", env(GetVariableChangeValue, 0) / 1000)
            FireEventNoReset("W_LandAirDamageBreak")
        elseif current_hkb_state == HKB_STATE_AIR_DAMAGE_BREAK_LARGE_BLOW_START or current_hkb_state == HKB_STATE_AIR_DAMAGE_BREAK_LARGE_BLOW_FALL_LOOP then
            FireEvent("W_AirDamageBreakLargeBlowLand")
        elseif current_hkb_state == HKB_STATE_AIR_DAMAGE_BREAK_LARGE_POUND_START or current_hkb_state == HKB_STATE_AIR_DAMAGE_BREAK_LARGE_POUND_FALL_LOOP then
            FireEvent("W_AirDamageBreakLargePoundLand")
        elseif current_hkb_state == HKB_STATE_AIR_DAMAGE_BREAK_LARGE_UPPER_START or current_hkb_state == HKB_STATE_AIR_DAMAGE_BREAK_LARGE_UPPER_FALL_LOOP then
            FireEvent("W_AirDamageBreakLargeUpperLand")
        elseif current_hkb_state == HKB_STATE_AIR_DAMAGE_BREAK_EX_LARGE_BLOW_START or current_hkb_state == HKB_STATE_AIR_DAMAGE_BREAK_SPECIAL_LARGE_BLOW_START or current_hkb_state == HKB_STATE_AIR_DAMAGE_BREAK_EX_LARGE_BLOW_FALL_LOOP then
            FireEvent("W_AirDamageBreakExLargeBlowLand")
        elseif current_hkb_state == HKB_STATE_AIR_DAMAGE_SMALL and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ORIGINAL_LAND_ACTION) == TRUE then
            SetVariable("StartTime_00", env(GetVariableChangeValue, 0) / 1000)
            FireEventNoReset("W_LandAirDamageSmall")
        elseif current_hkb_state == HKB_STATE_STAND_DAMAGE_LARGE_BLOW_START or current_hkb_state == HKB_STATE_STAND_DAMAGE_LARGE_BLOW_FALL_LOOP or current_hkb_state == HKB_STATE_THROW_DEF_LARGE_BLOW_START or current_hkb_state == HKB_STATE_THROW_DEF_LARGE_BLOW_FALL_LOOP then
            FireEvent("W_StandDamageLargeBlowLand")
        elseif current_hkb_state == HKB_STATE_STAND_DAMAGE_LARGE_UPPER_START or current_hkb_state == HKB_STATE_STAND_DAMAGE_LARGE_UPPER_FALL_LOOP then
            FireEvent("W_StandDamageLargeUpperLand")
        elseif current_hkb_state == HKB_STATE_STAND_DAMAGE_EXLARGE_BLOW_START or current_hkb_state == HKB_STATE_STAND_DAMAGE_SPECIAL_LARGE_BLOW_START or current_hkb_state == HKB_STATE_STAND_DAMAGE_EXLARGE_BLOW_FALL_LOOP then
            FireEvent("W_StandDamageExLargeBlowLand")
        elseif current_hkb_state == HKB_STATE_AIR_DAMAGE_BREAK then
            FireEvent("W_LandAirDamageBreak")
        elseif current_hkb_state == HKB_STATE_AIR_DAMAGE_LARGE_START or current_hkb_state == HKB_STATE_AIR_DAMAGE_LARGE_FALL_LOOP then
            FireEvent("W_AirDamageLargeLand")
        elseif current_hkb_state == HKB_STATE_AIR_DAMAGE_LARGE_BLOW_START or current_hkb_state == HKB_STATE_AIR_DAMAGE_LARGE_BLOW_FALL_LOOP then
            FireEvent("W_AirDamageLargeBlowLand")
        elseif current_hkb_state == HKB_STATE_AIR_DAMAGE_LARGE_POUND_START or current_hkb_state == HKB_STATE_AIR_DAMAGE_LARGE_POUND_FALL_LOOP then
            FireEvent("W_AirDamageLargePoundLand")
        elseif current_hkb_state == HKB_STATE_AIR_DAMAGE_LARGE_UPPER_START or current_hkb_state == HKB_STATE_AIR_DAMAGE_LARGE_UPPER_FALL_LOOP then
            FireEvent("W_AirDamageLargeUpperLand")
        elseif current_hkb_state == HKB_STATE_AIR_DAMAGE_EX_LARGE_BLOW_START or current_hkb_state == HKB_STATE_AIR_DAMAGE_SPECIAL_LARGE_BLOW_START or current_hkb_state == HKB_STATE_AIR_DAMAGE_EX_LARGE_BLOW_FALL_LOOP then
            FireEvent("W_AirDamageExLargeBlowLand")
        elseif current_hkb_state == HKB_STATE_AIR_DEFLECT_EASY_SMALL and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ORIGINAL_LAND_ACTION) == TRUE then
            SetVariable("StartTime_00", env(GetVariableChangeValue, 0) / 1000)
            FireEventNoReset("W_LandAirDeflectEasySmall")
        elseif current_hkb_state == HKB_STATE_AIR_DEFLECT_EASY_LARGE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ORIGINAL_LAND_ACTION) == TRUE then
            SetVariable("StartTime_00", env(GetVariableChangeValue, 0) / 1000)
            FireEventNoReset("W_LandAirDeflectEasyLarge")
        elseif current_hkb_state == HKB_STATE_AIR_DEFLECT_EASY_EX_LARGE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ORIGINAL_LAND_ACTION) == TRUE then
            SetVariable("StartTime_00", env(GetVariableChangeValue, 0) / 1000)
            FireEventNoReset("W_LandAirDeflectEasyExLarge")
        elseif current_hkb_state == HKB_STATE_AIR_DEFLECT_HARD_SMALL and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ORIGINAL_LAND_ACTION) == TRUE then
            SetVariable("StartTime_00", env(GetVariableChangeValue, 0) / 1000)
            FireEventNoReset("W_LandAirDeflectHardSmall")
        elseif current_hkb_state == HKB_STATE_AIR_DEFLECT_HARD_LARGE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ORIGINAL_LAND_ACTION) == TRUE then
            SetVariable("StartTime_00", env(GetVariableChangeValue, 0) / 1000)
            FireEventNoReset("W_LandAirDeflectHardLarge")
        elseif current_hkb_state == HKB_STATE_AIR_DEFLECT_HARD_EX_LARGE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ORIGINAL_LAND_ACTION) == TRUE then
            SetVariable("StartTime_00", env(GetVariableChangeValue, 0) / 1000)
            FireEventNoReset("W_LandAirDeflectHardExLarge")
        elseif current_hkb_state == HKB_STATE_AIR_DEFLECT_GUARD_BREAK and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ORIGINAL_LAND_ACTION) == TRUE then
            SetVariable("StartTime_00", env(GetVariableChangeValue, 0) / 1000)
            FireEventNoReset("W_LandAirDeflectGuardBreak")
        elseif current_hkb_state == HKB_STATE_AIR_SUB_ATTACK_DEFLECT_EASY_SMALL then
            FireEventNoReset("W_LandAirSubAttackGuardLoop")
        elseif current_hkb_state == HKB_STATE_AIR_SUB_GUARD_DEFLECT_BREAK and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ORIGINAL_LAND_ACTION) == TRUE then
            SetVariable("StartTime_00", env(GetVariableChangeValue, 0) / 1000)
            FireEventNoReset("W_LandAirSubGuardDeflectBreak")
        elseif current_hkb_state == HKB_STATE_AIR_DAMAGE_ELECTRO_CHARGE_START or current_hkb_state == HKB_STATE_AIR_DAMAGE_ELECTRO_CHARGE_LOOP then
            SetVariable("StartTime_00", env(GetVariableChangeValue, 0) / 1000)
            FireEventNoReset("W_LandAirDamageElectroCharge")
        elseif current_hkb_state == HKB_STATE_AIR_DAMAGE_ELECTRO_CHARGE_WEAK_START or current_hkb_state == HKB_STATE_AIR_DAMAGE_ELECTRO_CHARGE_WEAK_LOOP then
            SetVariable("StartTime_00", env(GetVariableChangeValue, 0) / 1000)
            FireEventNoReset("W_LandAirDamageElectroChargeWeak")
        elseif current_hkb_state == HKB_STATE_AIR_DAMAGE_BLINDING and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ORIGINAL_LAND_ACTION) == TRUE then
            SetVariable("StartTime_00", env(GetVariableChangeValue, 0) / 1000)
            FireEventNoReset("W_LandAirDamageBlinding")
        elseif current_hkb_state == HKB_STATE_AIR_DAMAGE_INSANE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ORIGINAL_LAND_ACTION) == TRUE then
            SetVariable("StartTime_00", env(GetVariableChangeValue, 0) / 1000)
            FireEventNoReset("W_LandAirDamageInsane")
        elseif current_hkb_state == HKB_STATE_THROW_DEF_LARGE_BLOW_START_600380 or current_hkb_state == HKB_STATE_THROW_DEF_LARGE_BLOW_LOOP_600380 then
            FireEventNoReset("W_ThrowDefLargeBlowLand600380")
        elseif current_hkb_state == HKB_STATE_STORM_JUMP_FALL or current_hkb_state == HKB_STATE_GROUND_STORM_JUMP_START or current_hkb_state == HKB_STATE_AIR_STORM_JUMP_START or current_hkb_state == HKB_STATE_GROUND_STORM_JUMP_WEAK_START or current_hkb_state == HKB_STATE_AIR_STORM_JUMP_WEAK_START or current_hkb_state == HKB_STATE_GROUND_STORM_JUMP_BACK_START or current_hkb_state == HKB_STATE_AIR_STORM_JUMP_BACK_START then
            FireEventNoReset("W_LandStormJumpFall")
        elseif current_hkb_state == HKB_STATE_AIR_DAMAGE_ELECTRO_RECEIVE_EXPLOSION_START or current_hkb_state == HKB_STATE_AIR_DAMAGE_ELECTRO_RECEIVE_EXPLOSION_FALL_LOOP then
            FireEventNoReset("W_AirDamageElectroReceiveExplosionLand")
        elseif subWeaponCategory == WEP_MOTION_CATEGORY_073 and current_hkb_state == HKB_STATE_AIR_SUB_ATTACK_START and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ORIGINAL_LAND_ACTION) == TRUE then
            SetVariable("StartTime_00", env(GetVariableChangeValue, 0) / 1000)
            FireEventNoReset("W_LandAirSubAttackStart")
        elseif subWeaponCategory == WEP_MOTION_CATEGORY_073 and (current_hkb_state == HKB_STATE_AIR_SUB_ATTACK_START or current_hkb_state == HKB_STATE_AIR_SUB_ATTACK_LOOP) then
            FireEventNoReset("W_LandAirSubAttackLoop")
        elseif spAtkType == SP_ATK_TYPE_107 and current_hkb_state == HKB_STATE_GROUND_SPECIAL_ATTACK_JUMP_START and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ORIGINAL_LAND_ACTION) == TRUE then
            SetVariable("StartTime_00", env(GetVariableChangeValue, 0) / 1000)
            FireEventNoReset("W_LandGroundSpecialAttackJumpStart")
        elseif spAtkType == SP_ATK_TYPE_107 and current_hkb_state == HKB_STATE_GROUND_SPECIAL_ATTACK_JUMP_FALL_LOOP then
            FireEventNoReset("W_LandGroundSpecialAttackJumpFallLoop")
        elseif (spAtkType == SP_ATK_TYPE_101 or spAtkType == SP_ATK_TYPE_107) and current_hkb_state == HKB_STATE_AIR_SPECIAL_ATTACK_START and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ORIGINAL_LAND_ACTION) == TRUE then
            SetVariable("StartTime_00", env(GetVariableChangeValue, 0) / 1000)
            FireEventNoReset("W_LandAirSpecialAttackStart")
        elseif (spAtkType == SP_ATK_TYPE_101 or spAtkType == SP_ATK_TYPE_107) and current_hkb_state == HKB_STATE_AIR_SPECIAL_ATTACK_LOOP then
            FireEventNoReset("W_LandAirSpecialAttackLoop")
        elseif current_hkb_state == HKB_STATE_AIR_SUB_ATTACK_DERIVE_ATTACK and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ORIGINAL_LAND_ACTION) == TRUE then
            SetVariable("StartTime_00", env(GetVariableChangeValue, 0) / 1000)
            FireEventNoReset("W_LandAirSubAttackDeriveAttack")
        elseif current_hkb_state == HKB_STATE_AIR_SUB_ATTACK_DERIVE_ATTACK_LOOP and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ORIGINAL_LAND_ACTION) == TRUE then
            FireEventNoReset("W_LandAirSubAttackDeriveAttackLoop")
        elseif fallHeight >= FALL_HEIGHT_LONG_STIFF_LAND then
            SetVariable("Selector_LandStiff", SELECTOR_LAND_STIFF_LONG)
            _LandFreeFall(current_hkb_state, fallState)
        elseif current_hkb_state == HKB_STATE_AIR_COMBO_ATTACK_1 and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ORIGINAL_LAND_ACTION) == TRUE then
            SetVariable("StartTime_00", env(GetVariableChangeValue, 0) / 1000)
            FireEventNoReset("W_LandAirComboAttack1")
        elseif current_hkb_state == HKB_STATE_AIR_COMBO_ATTACK_2 and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ORIGINAL_LAND_ACTION) == TRUE then
            SetVariable("StartTime_00", env(GetVariableChangeValue, 0) / 1000)
            FireEventNoReset("W_LandAirComboAttack2")
        elseif current_hkb_state == HKB_STATE_AIR_COMBO_ATTACK_3 and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ORIGINAL_LAND_ACTION) == TRUE then
            SetVariable("StartTime_00", env(GetVariableChangeValue, 0) / 1000)
            FireEventNoReset("W_LandAirComboAttack3")
        elseif current_hkb_state == HKB_STATE_AIR_ELECTRO_RECEIVE_ATTACK and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ORIGINAL_LAND_ACTION) == TRUE then
            SetVariable("StartTime_00", env(GetVariableChangeValue, 0) / 1000)
            FireEventNoReset("W_LandAirElectroReceiveAttack")
        elseif current_hkb_state == HKB_STATE_AIR_WEAK_ELECTRO_RECEIVE_ATTACK and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ORIGINAL_LAND_ACTION) == TRUE then
            SetVariable("StartTime_00", env(GetVariableChangeValue, 0) / 1000)
            FireEventNoReset("W_LandAirWeakElectroReceiveAttack")
        elseif current_hkb_state == HKB_STATE_AIR_DEFLECT_GUARD_START or current_hkb_state == HKB_STATE_AIR_DEFLECT_GUARD_LOOP then
            FireEventNoReset("W_LandAirDeflectGuard")
        elseif current_hkb_state == HKB_STATE_AIR_SUB_ATTACK_START and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ORIGINAL_LAND_ACTION) == TRUE then
            SetVariable("StartTime_00", env(GetVariableChangeValue, 0) / 1000)
            FireEventNoReset("W_LandAirSubAttackStart")
        elseif current_hkb_state == HKB_STATE_AIR_SUB_ATTACK_START or current_hkb_state == HKB_STATE_AIR_SUB_ATTACK_LOOP then
            FireEventNoReset("W_LandAirSubAttackLoop")
        elseif current_hkb_state == HKB_STATE_AIR_WEAK_ELECTRO_RECEIVE_ATTACK and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ORIGINAL_LAND_ACTION) == TRUE then
            FireEventNoReset("W_LandAirWeakElectroReceiveAttack")
        elseif current_hkb_state == HKB_STATE_AIR_SUB_ATTACK_MOVE_READY and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ORIGINAL_LAND_ACTION) == TRUE then
            SetVariable("StartTime_00", env(GetVariableChangeValue, 0) / 1000)
            FireEventNoReset("W_LandAirSubAttackMoveReady")
        elseif current_hkb_state == HKB_STATE_SUB_ATTACK_JUMP_START or current_hkb_state == HKB_STATE_AIR_SUB_ATTACK_MOVE_READY or current_hkb_state == HKB_STATE_AIR_SUB_ATTACK_MOVE_START then
            FireEventNoReset("W_LandAirSubAttackMove")
        elseif current_hkb_state == HKB_STATE_SWIM_KICK_MOVE_JUMP_START or current_hkb_state == HKB_STATE_SWIM_KICK_MOVE_JUMP_LOOP or current_hkb_state == HKB_STATE_SWIM_JUMP_START and hkbGetVariable("Selector_GroundJumpType") == SELECTOR_GROUND_JUMP_TYPE_FORWARD then
            FireEventNoReset("W_LandSwimKickMoveJump")
        elseif current_hkb_state == HKB_STATE_AIR_SUB_ATTACK_COMBO_1 and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ORIGINAL_LAND_ACTION) == TRUE then
            SetVariable("StartTime_00", env(GetVariableChangeValue, 0) / 1000)
            FireEventNoReset("W_LandAirSubAttackCombo1")
        elseif current_hkb_state == HKB_STATE_AIR_SUB_ATTACK_COMBO_2 and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ORIGINAL_LAND_ACTION) == TRUE then
            SetVariable("StartTime_00", env(GetVariableChangeValue, 0) / 1000)
            FireEventNoReset("W_LandAirSubAttackCombo2")
        elseif current_hkb_state == HKB_STATE_AIR_SUB_ATTACK_COMBO_3 and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ORIGINAL_LAND_ACTION) == TRUE then
            SetVariable("StartTime_00", env(GetVariableChangeValue, 0) / 1000)
            FireEventNoReset("W_LandAirSubAttackCombo3")
        elseif current_hkb_state == HKB_STATE_AIR_SUB_ATTACK_SPECIAL_EFFECT and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ORIGINAL_LAND_ACTION) == TRUE then
            SetVariable("StartTime_00", env(GetVariableChangeValue, 0) / 1000)
            FireEventNoReset("W_LandAirSubAttackSpecialEffect")
        elseif current_hkb_state == HKB_STATE_AIR_SUB_ATTACK_LOCK_ON and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ORIGINAL_LAND_ACTION) == TRUE then
            SetVariable("StartTime_00", env(GetVariableChangeValue, 0) / 1000)
            FireEventNoReset("W_LandAirSubAttackLockOn")
        elseif current_hkb_state == HKB_STATE_AIR_SUB_ATTACK_COMBO_1_VARIATION and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ORIGINAL_LAND_ACTION) == TRUE then
            SetVariable("StartTime_00", env(GetVariableChangeValue, 0) / 1000)
            FireEventNoReset("W_LandAirSubAttackCombo1Variation")
        elseif current_hkb_state == HKB_STATE_AIR_SUB_ATTACK_GUARD_START and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ORIGINAL_LAND_ACTION) == TRUE then
            SetVariable("StartTime_00", env(GetVariableChangeValue, 0) / 1000)
            FireEventNoReset("W_LandAirSubAttackGuardStart")
        elseif current_hkb_state == HKB_STATE_AIR_SUB_ATTACK_GUARD_END and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ORIGINAL_LAND_ACTION) == TRUE then
            SetVariable("StartTime_00", env(GetVariableChangeValue, 0) / 1000)
            FireEventNoReset("W_LandAirSubAttackGuardEnd")
        elseif current_hkb_state == HKB_STATE_AIR_SUB_ATTACK_GUARD_LOOP then
            FireEventNoReset("W_LandAirSubAttackGuardLoop")
        elseif current_hkb_state == HKB_STATE_AIR_SUB_ATTACK_MOVE_ATEMI_READY and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ORIGINAL_LAND_ACTION) == TRUE then
            SetVariable("StartTime_00", env(GetVariableChangeValue, 0) / 1000)
            FireEventNoReset("W_LandAirSubAttackMoveAtemiReady")
        elseif current_hkb_state == HKB_STATE_AIR_SPECIAL_ATTACK and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ORIGINAL_LAND_ACTION) == TRUE then
            SetVariable("StartTime_00", env(GetVariableChangeValue, 0) / 1000)
            FireEventNoReset("W_LandAirSpecialAttack")
        elseif current_hkb_state == HKB_STATE_AIR_SPECIAL_ATTACK_NO_RESOURCE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ORIGINAL_LAND_ACTION) == TRUE then
            SetVariable("StartTime_00", env(GetVariableChangeValue, 0) / 1000)
            FireEventNoReset("W_LandAirSpecialAttackNoResource")
        elseif spAtkType == SP_ATK_TYPE_110 and current_hkb_state == HKB_STATE_AIR_SPECIAL_ATTACK_START and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ORIGINAL_LAND_ACTION_SP_ATK_110) == TRUE then
            SetVariable("StartTime_00", env(GetVariableChangeValue, 0) / 1000)
            FireEventNoReset("W_AirSpecialAttackLandingJumpReady")
        elseif spAtkType == SP_ATK_TYPE_110 and current_hkb_state == HKB_STATE_AIR_SPECIAL_ATTACK_LANDING_JUMP_START and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ORIGINAL_LAND_ACTION) == TRUE then
            SetVariable("StartTime_00", env(GetVariableChangeValue, 0) / 1000)
            FireEventNoReset("W_LandGroundSpecialAttackJumpAfterJumpStart")
        elseif spAtkType == SP_ATK_TYPE_110 and current_hkb_state == HKB_STATE_AIR_SPECIAL_ATTACK_START and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ORIGINAL_LAND_ACTION) == TRUE then
            SetVariable("StartTime_00", env(GetVariableChangeValue, 0) / 1000)
            FireEventNoReset("W_LandGroundSpecialAttackJumpFallLoop")
        elseif spAtkType == SP_ATK_TYPE_110 and current_hkb_state == HKB_STATE_AIR_SPECIAL_ATTACK_START_NO_RESOURCE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ORIGINAL_LAND_ACTION_SP_ATK_110) == TRUE then
            SetVariable("StartTime_00", env(GetVariableChangeValue, 0) / 1000)
            FireEventNoReset("W_AirSpecialAttackLandingJumpReadyNoResource")
        elseif spAtkType == SP_ATK_TYPE_110 and current_hkb_state == HKB_STATE_AIR_SPECIAL_ATTACK_LANDING_JUMP_START_NO_RESOURCE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ORIGINAL_LAND_ACTION) == TRUE then
            SetVariable("StartTime_00", env(GetVariableChangeValue, 0) / 1000)
            FireEventNoReset("W_LandGroundSpecialAttackJumpAfterJumpStartNoResource")
        elseif spAtkType == SP_ATK_TYPE_110 and current_hkb_state == HKB_STATE_AIR_SPECIAL_ATTACK_START_NO_RESOURCE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ORIGINAL_LAND_ACTION) == TRUE then
            SetVariable("StartTime_00", env(GetVariableChangeValue, 0) / 1000)
            FireEventNoReset("W_LandGroundSpecialAttackJumpFallLoopNoResource")
        elseif current_hkb_state == HKB_STATE_AIR_SPECIAL_ATTACK_START and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ORIGINAL_LAND_ACTION) == TRUE then
            SetVariable("StartTime_00", env(GetVariableChangeValue, 0) / 1000)
            FireEventNoReset("W_LandAirSpecialAttackStart")
        elseif current_hkb_state == HKB_STATE_AIR_SPECIAL_ATTACK_LOOP then
            FireEventNoReset("W_LandAirSpecialAttackLoop")
        elseif current_hkb_state == HKB_STATE_AIR_SPECIAL_ATTACK_LOOP_NO_RESOURCE then
            FireEventNoReset("W_LandAirSpecialAttackLoopNoResource")
        elseif current_hkb_state == HKB_STATE_AIR_SPACIAL_ATTACK_END and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ORIGINAL_LAND_ACTION) == TRUE then
            SetVariable("StartTime_00", env(GetVariableChangeValue, 0) / 1000)
            FireEventNoReset("W_LandAirSpacialAttackEnd")
        elseif current_hkb_state == HKB_STATE_AIR_SPECIAL_ATTACK_HOLD_START and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ORIGINAL_LAND_ACTION) == TRUE then
            SetVariable("StartTime_00", env(GetVariableChangeValue, 0) / 1000)
            FireEventNoReset("W_LandAirSpecialAttackHoldStart")
        elseif current_hkb_state == HKB_STATE_GROUND_SPECIAL_ATTACK_HIT_JUMP_DERIVE_ACTION and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ORIGINAL_LAND_ACTION) == TRUE then
            SetVariable("StartTime_00", env(GetVariableChangeValue, 0) / 1000)
            FireEventNoReset("W_LandGroundSpecialAttackHitJumpDeriveAction")
        elseif current_hkb_state == HKB_STATE_AIR_SPECIAL_ATTACK_HOLD_LOOP then
            FireEventNoReset("W_LandAirSpecialAttackHoldLoop")
        elseif current_hkb_state == HKB_STATE_AIR_SPACIAL_ATTACK_HOLD_END and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ORIGINAL_LAND_ACTION) == TRUE then
            SetVariable("StartTime_00", env(GetVariableChangeValue, 0) / 1000)
            FireEventNoReset("W_LandAirSpacialAttackHoldEnd")
        elseif current_hkb_state == HKB_STATE_GROUND_SPECIAL_ATTACK_JUMP_START and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ORIGINAL_LAND_ACTION) == TRUE then
            SetVariable("StartTime_00", env(GetVariableChangeValue, 0) / 1000)
            FireEventNoReset("W_LandGroundSpecialAttackJumpStart")
        elseif current_hkb_state == HKB_STATE_GROUND_SPECIAL_ATTACK_JUMP_START_NO_RESOURCE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ORIGINAL_LAND_ACTION) == TRUE then
            SetVariable("StartTime_00", env(GetVariableChangeValue, 0) / 1000)
            FireEventNoReset("W_LandGroundSpecialAttackJumpStartNoResource")
        elseif current_hkb_state == HKB_STATE_GROUND_SPECIAL_ATTACK_JUMP_FALL_LOOP then
            FireEventNoReset("W_LandGroundSpecialAttackJumpFallLoop")
        elseif current_hkb_state == HKB_STATE_GROUND_SPECIAL_ATTACK_JUMP_FALL_LOOP_NO_RESOURCE then
            FireEventNoReset("W_LandGroundSpecialAttackJumpFallLoopNoResource")
        elseif fallHeight >= FALL_HEIGHT_SHORT_STIFF_LAND or fallHeight >= FALL_HEIGHT_SHORT_STIFF_LAND_FROM_JUMP and enablePositioningJumpLand == TRUE then
            if (env(ActionRequest, ACTION_ARM_SP_MOVE) == TRUE or env(ActionDuration, ACTION_ARM_SP_MOVE) > 0 or env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_KICK) == TRUE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_KICK_CANCEL) == TRUE or env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_PRESS_STEP) == TRUE and env(ActionDuration, ACTION_ARM_SP_MOVE) > 0) and _EnableMainWeaponAction() == TRUE and g_forceCrouch == FALSE and _isNonCombatMode() == FALSE then
                _fireGroundStep(current_hkb_state)
            elseif stickLevel > 0 then
                act(SwitchMotion, TRUE)
                _SpeedUpdate(current_hkb_state)
                _MoveDirectionUpdate()
                if _IsCrouchFall(current_hkb_state, fallState) == TRUE then
                    FireEventNoReset("W_CrouchMoveStartFromFreeFall")
                else
                    FireEventNoReset("W_StandMoveStartFromFreeFallShortStiff")
                end
            else
                SetVariable("Selector_LandStiff", SELECTOR_LAND_STIFF_NORMAL)
                _LandFreeFall(current_hkb_state, fallState)
            end
        elseif (current_hkb_state == HKB_STATE_GROUND_JUMP_START or current_hkb_state == HKB_STATE_GROUND_JUMP_FALL or current_hkb_state == HKB_STATE_WALL_POSITIONING_JUMP_START or enablePositioningJumpLand == TRUE or env(IsSpEffectBehaviorRefID, SP_EF_REF_ENABLE_POSITIONING_JUMP_LAND) == TRUE) and hkbGetVariable("Selector_GroundJumpType") ~= SELECTOR_GROUND_JUMP_TYPE_VERTICAL and hkbGetVariable("Selector_GroundJumpType") ~= SELECTOR_GROUND_JUMP_TYPE_FORWARD then
            FireEventNoReset("W_LandGroundPositioningJump")
        elseif current_hkb_state == HKB_STATE_SWAMP_JUMP_START and stickLevel == 0 then
            FireEventNoReset("W_LandSwampJump")
        elseif (env(ActionRequest, ACTION_ARM_SP_MOVE) == TRUE or env(ActionDuration, ACTION_ARM_SP_MOVE) > 0 or env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_KICK) == TRUE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_KICK_CANCEL) == TRUE or env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_PRESS_STEP) == TRUE and env(ActionDuration, ACTION_ARM_SP_MOVE) > 0) and _EnableMainWeaponAction() == TRUE and g_forceCrouch == FALSE and _isNonCombatMode() == FALSE then
            _fireGroundStep(current_hkb_state)
        elseif stickLevel > 0 then
            act(SwitchMotion, TRUE)
            _SpeedUpdate(current_hkb_state)
            _MoveDirectionUpdate()
            if _IsCrouchFall(current_hkb_state, fallState) == TRUE then
                FireEventNoReset("W_CrouchMoveStartFromFreeFall")
            else
                FireEventNoReset("W_StandMoveStartFromFreeFallShortStiff")
            end
        elseif current_hkb_state == HKB_STATE_GROUND_JUMP_START or current_hkb_state == HKB_STATE_GROUND_JUMP_FALL or current_hkb_state == HKB_STATE_GROUND_JUMP_LAND_READY and fallState == HKB_STATE_GROUND_JUMP_START or current_hkb_state == HKB_STATE_SPRINT_JUMP_START or current_hkb_state == HKB_STATE_GROUND_JUMP_LAND_READY and fallState == HKB_STATE_SPRINT_JUMP_START then
            if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_CROUCH) == TRUE then
                FireEventNoReset("W_LandCrouchFreeFall")
            else
                FireEventNoReset("W_LandGroundJump")
            end
        elseif current_hkb_state == HKB_STATE_WALL_JUMP_START or current_hkb_state == HKB_STATE_WALL_JUMP_FALL or current_hkb_state == HKB_STATE_GROUND_JUMP_LAND_READY and fallState == HKB_STATE_WALL_JUMP_START then
            if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_CROUCH) == TRUE then
                FireEventNoReset("W_LandCrouchFreeFall")
            else
                FireEventNoReset("W_LandWallJump")
            end
        elseif current_hkb_state == HKB_STATE_SELF_FALL_START or current_hkb_state == HKB_STATE_FREE_FALL or current_hkb_state == HKB_STATE_GROUND_JUMP_LAND_READY and fallState == HKB_STATE_SELF_FALL_START or current_hkb_state == HKB_STATE_SELF_CROUCH_FREE_FALL_START or current_hkb_state == HKB_STATE_CROUCH_FREE_FALL or current_hkb_state == HKB_STATE_GROUND_JUMP_LAND_READY and fallState == HKB_STATE_SELF_CROUCH_FREE_FALL_START then
            SetVariable("Selector_LandStiff", SELECTOR_LAND_STIFF_NORMAL)
            _LandFreeFall(current_hkb_state, fallState)
        else
            SetVariable("Selector_LandStiff", SELECTOR_LAND_STIFF_NORMAL)
            _LandFreeFall(current_hkb_state, fallState)
        end
    elseif next_behavior == BEH_R_LAND_WIRE then
        act(CloseMenuWhenUsingItem)
        g_beforeFireLand = 0
        SetVariable("EnablePositioningJumpLand", FALSE)
        local stickLevel = hkbGetVariable("MoveSpeedLevel")
        if current_hkb_state == HKB_STATE_WIRE_FALL_ATTACK_COMBO_1 then
            SetVariable("StartTime_00", env(GetVariableChangeValue, 0) / 1000)
            FireEventNoReset("W_LandWireFallAttackCombo1")
        elseif current_hkb_state == HKB_STATE_WIRE_MOVE_DEFLECT_GUARD_START or current_hkb_state == HKB_STATE_WIRE_MOVE_DEFLECT_GUARD_LOOP then
            FireEventNoReset("W_LandAirDeflectGuard")
        elseif stickLevel > 0 then
            if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_CROUCH) == TRUE then
                FireEventNoReset("W_CrouchMoveStartFromFreeFall")
            else
                FireEventNoReset("W_StandMoveStartFromFreeFall")
            end
        elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_CROUCH) == TRUE then
            FireEventNoReset("W_LandCrouchFreeFall")
        else
            FireEventNoReset("W_LandWireMove")
        end
    elseif next_behavior == BEH_R_LAND_READY then
        if current_hkb_state == HKB_STATE_GROUND_JUMP_START or current_hkb_state == HKB_STATE_GROUND_JUMP_FALL then
            SetVariable("FallState", HKB_STATE_GROUND_JUMP_START)
        elseif current_hkb_state == HKB_STATE_WALL_JUMP_START or current_hkb_state == HKB_STATE_WALL_JUMP_FALL then
            SetVariable("FallState", HKB_STATE_WALL_JUMP_START)
        elseif current_hkb_state == HKB_STATE_SPRINT_JUMP_START then
            SetVariable("FallState", HKB_STATE_SPRINT_JUMP_START)
        elseif current_hkb_state == HKB_STATE_SELF_FALL_START or current_hkb_state == HKB_STATE_FREE_FALL then
            SetVariable("FallState", HKB_STATE_SELF_FALL_START)
        elseif current_hkb_state == HKB_STATE_SELF_CROUCH_FREE_FALL_START or current_hkb_state == HKB_STATE_CROUCH_FREE_FALL then
            SetVariable("FallState", HKB_STATE_SELF_CROUCH_FREE_FALL_START)
        end
        FireEventNoReset("W_GroundJumpLandReady")
    elseif next_behavior == BEH_R_LAND_WIRE_READY then
        FireEventNoReset("W_WireFallLandReady")
    elseif next_behavior == BEH_R_LAND_WATER then
        act(CloseMenuWhenUsingItem)
        g_beforeFireLand = 0
        SetVariable("EnablePositioningJumpLand", FALSE)
        local fallState = hkbGetVariable("FallState")
        SetVariable("FallState", 0)
        if env(GetWeaponSwitchState) == ARM_STYLE_SAFE then
            SetVariable("AddNonCombatBlend", 1)
            FireEventNoReset("W_AddNonCombatAreaLeave")
        end
        local fallHeight = env(GetFallHeight) * 0.009999999776482582
        if env("特殊効果発動中か_Behavior参照ID_寿命延長を厳密に取得", SP_EF_REF_AGING) == TRUE then
            if current_hkb_state == HKB_STATE_AGING_FALL_DEATH_START or current_hkb_state == HKB_STATE_AGING_FALL_DEATH_LOOP then
                FireEvent("W_LandWaterDeadAgingStart")
            else
                FireEvent("W_LandWaterDeathAgingStart")
            end
        elseif currentState == STATE_TYPE_REACTION_DEATH or currentState == STATE_TYPE_REACTION_DEATH_START or currentState == STATE_TYPE_REACTION_THROW_DEATH_START then
            FireEvent("W_LandWaterDeathStart")
        elseif fallHeight >= FALL_HEIGHT_LONG_STIFF_LAND_WATER then
            FireEventNoReset("W_LandWaterFreeFallLongStiff")
        elseif current_hkb_state == HKB_STATE_SWIM_KICK_MOVE_JUMP_START or current_hkb_state == HKB_STATE_SWIM_KICK_MOVE_JUMP_LOOP then
            FireEventNoReset("W_LandWaterSwimKickMoveJump")
        elseif (hkbGetVariable("Selector_GroundJumpType") == SELECTOR_GROUND_JUMP_TYPE_FORWARD or hkbGetVariable("Selector_GroundJumpType") == SELECTOR_GROUND_JUMP_TYPE_FORWARD_LOCKON) and (current_hkb_state == HKB_STATE_GROUND_JUMP_START or current_hkb_state == HKB_STATE_SWAMP_JUMP_START or current_hkb_state == HKB_STATE_SWIM_JUMP_START) or current_hkb_state == HKB_STATE_SPRINT_JUMP_START then
            FireEventNoReset("W_LandWaterFreeFall")
        else
            FireEventNoReset("W_LandWaterFreeFallInSitu")
        end
    elseif next_behavior == BEH_R_STAND_MOVE_TO_SWIM then
        if env(GetWeaponSwitchState) == ARM_STYLE_SAFE then
            SetVariable("AddNonCombatBlend", 1)
            FireEventNoReset("W_AddNonCombatAreaLeave")
        end
        if env("特殊効果発動中か_Behavior参照ID_寿命延長を厳密に取得", SP_EF_REF_AGING) == TRUE then
            FireEvent("W_StandMoveToSwimDeathStart")
        elseif currentState == STATE_TYPE_REACTION_DEATH or currentState == STATE_TYPE_REACTION_DEATH_START or currentState == STATE_TYPE_REACTION_THROW_DEATH_START then
            FireEvent("W_LandWaterDeathStart")
        elseif current_hkb_state == HKB_STATE_STAND_MOVE_START or current_hkb_state == HKB_STATE_STAND_MOVE_START_FROM_FREE_FALL or current_hkb_state == HKB_STATE_STAND_MOVE_LOOP or current_hkb_state == HKB_STATE_STAND_MOVE_START_FROM_FREE_FALL_SHOR_TSTIFF or current_hkb_state == HKB_STATE_STAND_QUICK_TURN_MOVE_START_LEFT_180 or current_hkb_state == HKB_STATE_STAND_QUICK_TURN_MOVE_START_RIGHT_180 or current_hkb_state == HKB_STATE_STAND_MOVE_QUICK_TURN_LEFT_180 or current_hkb_state == HKB_STATE_STAND_MOVE_QUICK_TURN_RIGHT_180 or current_hkb_state == HKB_STATE_SUB_WEAPON_EXPAND_MOVE or current_hkb_state == HKB_STATE_SUB_WEAPON_EXPAND_2_MOVE or current_hkb_state == HKB_STATE_SUB_WEAPON_EXPAND_3_MOVE or current_hkb_state == HKB_STATE_STAND_ATK_FIRST or current_hkb_state == HKB_STATE_STAND_ATK_FIRST_RELEASE or current_hkb_state == HKB_STATE_STAND_ATK_COMBO1 or current_hkb_state == HKB_STATE_STAND_ATK_COMBO1_RELEASE or current_hkb_state == HKB_STATE_STAND_ATK_COMBO2 or current_hkb_state == HKB_STATE_STAND_ATK_COMBO2_RELEASE or current_hkb_state == HKB_STATE_DEFLECT_GUARD_MOVE or current_hkb_state == HKB_STATE_DEFLECT_GUARD_TO_STAND_MOVE or current_hkb_state == HKB_STATE_GROUND_JUMP_READY or current_hkb_state == HKB_STATE_CROUCH_MOVE_LOOP or current_hkb_state == HKB_STATE_SPRINT_ATK or current_hkb_state == HKB_STATE_SPRINT_LOOP or current_hkb_state == HKB_STATE_SPRINT_JUMP_READY or current_hkb_state == HKB_STATE_GROUND_STEP and (hkbGetVariable("Selector_GroundJumpType") == SELECTOR_GROUND_JUMP_TYPE_VERTICAL or hkbGetVariable("Selector_GroundJumpType") == SELECTOR_GROUND_JUMP_TYPE_FORWARD or hkbGetVariable("Selector_GroundJumpType") == SELECTOR_GROUND_JUMP_TYPE_FORWARD_LOCKON) or current_hkb_state == HKB_STATE_SPRINT_START_FROM_STEP or current_hkb_state == HKB_STATE_STAND_MOVE_START_FROM_SPRINT or current_hkb_state == HKB_STATE_STAND_MOVE_LOOP_FROM_SPRINT then
            FireEvent("W_StandMoveToSwim")
        else
            FireEvent("W_StandMoveToSwimInSitu")
        end
    elseif next_behavior == BEH_R_SWIM_TO_STAND_MOVE then
        if current_hkb_state == HKB_STATE_SWIM_MOVE_START or current_hkb_state == HKB_STATE_SWIM_MOVE_LOOP or current_hkb_state == HKB_STATE_SWIM_KICK_MOVE_1 or current_hkb_state == HKB_STATE_SWIM_KICK_MOVE_2 or current_hkb_state == HKB_STATE_SWIM_ATTACK_COMBO_1 or current_hkb_state == HKB_STATE_SWIM_ATTACK_COMBO_1_RELEASE or current_hkb_state == HKB_STATE_SWIM_ATTACK_COMBO_2 or current_hkb_state == HKB_STATE_SWIM_ATTACK_COMBO_2_RELEASE or current_hkb_state == HKB_STATE_SWIM_ATTACK_COMBO_3 or current_hkb_state == HKB_STATE_SWIM_ATTACK_COMBO_3_RELEASE or current_hkb_state == HKB_STATE_SWIM_KICK_MOVE_GUARD_START or current_hkb_state == HKB_STATE_SWIM_MOVE_START_FROM_LAND_WATER or current_hkb_state == HKB_STATE_SWIM_JUMP_READY or current_hkb_state == HKB_STATE_SWIM_KICK_MOVE_JUMP_READY then
            FireEvent("W_SwimToStandMove")
        else
            FireEvent("W_SwimToStandMoveInSitu")
        end
    elseif next_behavior == BEH_R_DIVE_TO_SWIM then
        if current_hkb_state == HKB_STATE_DIVE_KICK_MOVE_UP_1 or current_hkb_state == HKB_STATE_DIVE_KICK_MOVE_UP_2 or env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_SWIM_KICK_MOVING) == TRUE and (current_hkb_state == HKB_STATE_DIVE_JUMP or current_hkb_state == HKB_STATE_DIVE_JUMP_FROM_KICK_MOVE) then
            FireEvent("W_DiveToAir")
        else
            FireEvent("W_DiveToSwim")
        end
    elseif next_behavior == BEH_R_ENEMY_JUMP then
        local stickAngle = 0
        local stickLevel = 0
        if env(IsLocked) == TRUE then
            stickAngle = hkbGetVariable("JumpAngle")
            stickLevel = hkbGetVariable("JumpStickLevel")
        else
            stickAngle = hkbGetVariable("TurnAngle")
            stickLevel = hkbGetVariable("MoveSpeedLevel")
        end
        _set4DirJumpDir(stickAngle, stickLevel)
        _set4DirJumpTilt(stickAngle, stickLevel)
        if env(IsLocked) == TRUE and (hkbGetVariable("Selector_GroundJumpType") == SELECTOR_GROUND_JUMP_TYPE_FORWARD or hkbGetVariable("Selector_GroundJumpType") == SELECTOR_GROUND_JUMP_TYPE_VERTICAL) then
            SetVariable("Selector_GroundJumpType", SELECTOR_GROUND_JUMP_TYPE_FORWARD_LOCKON)
            act(LockHomingAction, 0)
        end
        FireEvent("W_AirKickEnemyJumpStart")
    elseif next_behavior == BEH_R_SUB_WEAPON_EXPAND then
        g_EndSubWeaponChange = FALSE
        if currentStyle == STYLE_TYPE_CROUCH then
            if env(IsSpEffectBehaviorRefID, SP_EF_REF_ENABLE_SUB_WEAPON_EXPAND_2) == TRUE then
                FireEvent("W_CrouchSubWeaponExpand2")
            elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_ENABLE_SUB_WEAPON_EXPAND_3) == TRUE then
                FireEvent("W_CrouchSubWeaponExpand3")
            else
                FireEvent("W_CrouchSubWeaponExpand1")
            end
        elseif GetLocomotionType() == LOCOMOTION_TYPE_MOVE then
            SetVariable("StartTime_02", env(GetVariableChangeValue, 2) / 1000)
            SetVariable("StartTime_01", 0)
            if env(IsSpEffectBehaviorRefID, SP_EF_REF_ENABLE_SUB_WEAPON_EXPAND_2) == TRUE then
                FireEvent("W_SubWeaponExpand2Move")
            elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_ENABLE_SUB_WEAPON_EXPAND_3) == TRUE then
                FireEvent("W_SubWeaponExpand3Move")
            else
                FireEvent("W_SubWeaponExpandMove")
            end
        else
            SetVariable("StartTime_01", 0)
            if env(IsSpEffectBehaviorRefID, SP_EF_REF_ENABLE_SUB_WEAPON_EXPAND_2) == TRUE then
                FireEvent("W_SubWeaponExpand2")
            elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_ENABLE_SUB_WEAPON_EXPAND_3) == TRUE then
                FireEvent("W_SubWeaponExpand3")
            else
                FireEvent("W_SubWeaponExpand")
            end
        end
    elseif next_behavior == BEH_R_GROUND_SP_ATTACK_HIT_JUMP then
        FireEvent("W_GroundSpecialAttackHitJump")
    elseif next_behavior == BEH_R_NPC_TALK_START then
        local ezsRefId = env(GetTalkEzStateRefID)
        if ezsRefId == EZ_STATE_REF_RCV_NPC_TALK_START then
            if currentStyle == STYLE_TYPE_SWIM then
                FireEvent("W_Event700403")
            else
                FireEvent("W_Event700400")
            end
        elseif ezsRefId == EZ_STATE_REF_RCV_NPC_TALK_ENGRAVER_START then
            FireEvent("W_Event700402")
        elseif ezsRefId == EZ_STATE_REF_RCV_NPC_TALK_711310 then
            FireEvent("W_Event711310")
        elseif ezsRefId == EZ_STATE_REF_RCV_NPC_TALK_711310 then
            FireEvent("W_Event711310")
        elseif ezsRefId == EZ_STATE_REF_RCV_NPC_TALK_711315 then
            FireEvent("W_Event711315")
        elseif ezsRefId == EZ_STATE_REF_RCV_EAVESDROP_START then
            if currentStyle == STYLE_TYPE_CROUCH then
                FireEvent("W_EavesdropCrouchStart")
            elseif currentStyle == STYLE_TYPE_COVER then
                FireEvent("W_CoverEavesdropStart")
            elseif currentStyle == STYLE_TYPE_COVER_LOOK then
                FireEvent("W_CoverLookEavesdropStart")
            elseif currentStyle == STYLE_TYPE_HANG then
                if env(GetDockingEdgeRequest) == HANG_EDGE_TYPE_ENABLE_HOLD_FOOT then
                    FireEvent("W_HangFootHoldEavesdropStart")
                else
                    FireEvent("W_HangEavesdropStart")
                end
            elseif currentStyle == STYLE_TYPE_SWIM then
                FireEvent("W_SwimEavesdropStart")
            else
                FireEvent("W_StandEavesdropStart")
            end
        end
    elseif next_behavior == BEH_R_NPC_TALK_END then
        if current_hkb_state == HKB_STATE_EVENT711202 or current_hkb_state == HKB_STATE_EVENT711212 then
            FireEvent("W_Idle")
        elseif currentState == STATE_TYPE_EVENT_NPC_TALK_LOOP or currentState == STATE_TYPE_EVENT_NPC_TALK_REACTION then
            if current_hkb_state == HKB_STATE_NPC_TARK_ENGRAVER_START or current_hkb_state == HKB_STATE_NPC_TARK_ENGRAVER_LOOP then
                FireEvent("W_NpcTarkEngraverEnd")
            elseif current_hkb_state == HKB_STATE_EVENT711311 then
                FireEvent("W_Event711312")
            elseif currentStyle == STYLE_TYPE_SWIM then
                FireEvent("W_Event700423")
            else
                FireEvent("W_Event700420")
            end
        elseif currentState == STATE_TYPE_EVENT_EAVESDROP_LOOP then
            if currentStyle == STYLE_TYPE_CROUCH then
                FireEvent("W_EavesdropCrouchEnd")
            elseif currentStyle == STYLE_TYPE_COVER then
                FireEvent("W_CoverEavesdropEnd")
            elseif currentStyle == STYLE_TYPE_COVER_LOOK then
                FireEvent("W_CoverLookEavesdropEnd")
            elseif currentStyle == STYLE_TYPE_HANG then
                if env(GetDockingEdgeRequest) == HANG_EDGE_TYPE_ENABLE_HOLD_FOOT then
                    FireEvent("W_HangFootHoldEavesdropEnd")
                else
                    FireEvent("W_HangEavesdropEnd")
                end
            elseif currentStyle == STYLE_TYPE_SWIM then
                FireEvent("W_SwimEavesdropEnd")
            else
                FireEvent("W_StandEavesdropEnd")
            end
        end
    elseif next_behavior == BEH_R_NPC_TALK_ACTION then
        local ezsRefId = env(GetTalkEzStateRefID)
        if ezsRefId == EZ_STATE_REF_RCV_NPC_TALK_711300 then
            FireEvent("W_Event711300")
        end
    elseif next_behavior == BEH_R_NPC_TALK_REACTION then
        local tpRefId = env(GetTalkParamBehaviorRefID)
        local ezsRefId = env(GetTalkEzStateRefID)
        if tpRefId == TALK_PARAM_REF_RCV_711320 then
            FireEvent("W_Event711320")
        elseif tpRefId == TALK_PARAM_REF_RCV_711330 then
            FireEvent("W_Event711330")
        elseif tpRefId == TALK_PARAM_REF_RCV_711400 then
            FireEvent("W_Event711400")
        elseif ezsRefId == EZ_STATE_REF_RCV_NPC_TALK_711333 then
            FireEvent("W_Event711333")
        elseif tpRefId == TALK_PARAM_REF_RCV_NONE or tpRefId == TALK_PARAM_REF_RCV_LOOP or tpRefId == TALK_PARAM_REF_RCV_DEFAULT then
            if current_hkb_state == HKB_STATE_EVENT711320 or current_hkb_state == HKB_STATE_EVENT711321 then
                FireEvent("W_Event711322")
            elseif current_hkb_state ~= HKB_STATE_EVENT711330 and current_hkb_state == HKB_STATE_EVENT711331 then
            end
        end
    elseif next_behavior == BEH_R_DOCKING_BREAK then
        if currentStyle == STYLE_TYPE_COVER then
            FireEventNoReset("W_CoverEnd")
        elseif currentStyle == STYLE_TYPE_COVER_LOOK then
            FireEventNoReset("W_CoverEndFromCoverLook")
        elseif currentStyle == STYLE_TYPE_HANG then
            local edgeType = env(GetDockingEdgeRequest)
            if edgeType == HANG_EDGE_TYPE_DISABLE_HOLD_FOOT then
                FireEvent("W_HangToFreeFall")
            else
                FireEvent("W_HangFootHoldToFreeFall")
            end
        end
    elseif next_behavior == BEH_R_FORCE_CROUCH_END then
        FireEvent("W_CrouchEnd")
    elseif next_behavior == BEH_R_NON_COMBAT_AREA_ENTER then
        if GetLocomotionType() ~= LOCOMOTION_TYPE_IDLE then
            FireEvent("W_GroundNonCombatAreaMoveEnter")
        else
            FireEvent("W_GroundNonCombatAreaEnter")
        end
    elseif next_behavior == BEH_R_NON_COMBAT_AREA_LEAVE then
        if GetLocomotionType() ~= LOCOMOTION_TYPE_IDLE then
            FireEvent("W_GroundNonCombatAreaMoveLeave")
        else
            FireEvent("W_GroundNonCombatAreaLeave")
        end
    elseif next_behavior == BEH_R_TELESCOPE_END then
        if currentStyle == STYLE_TYPE_CROUCH then
            FireEventNoReset("W_CrouchItemTelescopeEnd")
        else
            FireEventNoReset("W_ItemTelescopeEnd")
        end
    elseif next_behavior == BEH_A_GROUND_MOVE_START then
        act(SwitchMotion, TRUE)
        _SpeedUpdate(current_hkb_state)
        _MoveDirectionUpdate()
        if currentStyle == STYLE_TYPE_GROUND_GUARD or current_hkb_state == HKB_STATE_LAND_AIR_DEFLECT_GUARD then
            FireEvent("W_DeflectGuardMove")
        elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_STAND_MOVE_START_FROM_LAND_GROUND_POSITIONING_JUMP) == TRUE then
            FireEventNoReset("W_StandMoveStartFromLandGroundPositioningJump")
        elseif currentState == STATE_TYPE_STANDBY_SUB_GUARD or currentState == STATE_TYPE_ACTION_SUB_GUARD or currentState == STATE_TYPE_REACTION_SUB_GUARD then
            FireEvent("W_GroundSubAttackGuardMoveLoop")
        elseif env(GetEquipWeaponSpecialCategoryNumber, HAND_RIGHT) == SP_ATK_TYPE_104 and (currentState == STATE_TYPE_STANDBY_ATK_HOLD or currentState == STATE_TYPE_ACTION_ATK_HOLD or currentState == STATE_TYPE_REACTION_ATK_HOLD) then
            local turnAngle = hkbGetVariable("TurnAngle")
            local twistAngle = -hkbGetVariable("TwistLowerRootAngle")
            local smallTurnAngle = 60
            local smallTwistAngle = 0
            if smallTurnAngle < math.abs(turnAngle) or smallTwistAngle < math.abs(twistAngle) then
                _GroundQuickTurn(current_hkb_state)
            else
                FireEvent("W_GroundSpecialAttackHoldMove")
            end
        elseif currentStyle == STYLE_TYPE_CROUCH then
            if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ITEM_USE_MOVE) == TRUE and env(IsMoveCancelPossible) ~= TRUE then
                SetVariable("StartTime_01", env(GetVariableChangeValue, 1) / 1000)
                SetVariable("StartTime_02", 0)
                FireEventNoReset("W_CrouchMoveLowerLoop")
            elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ITEM_USE_MOVE) == TRUE and env(IsMoveCancelPossible) == TRUE then
                SetVariable("StartTime_02", env(GetVariableChangeValue, 2) / 1000)
                FireEventNoReset("W_CrouchMoveLoop")
            else
                SetVariable("StartTime_02", 0)
                FireEvent("W_CrouchMoveStart")
            end
        elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ITEM_USE_MOVE) == TRUE and env(IsMoveCancelPossible) ~= TRUE then
            SetVariable("StartTime_01", env(GetVariableChangeValue, 1) / 1000)
            SetVariable("StartTime_02", 0)
            SetVariable("StartTime_03", 0)
            FireEventNoReset("W_StandMoveLowerStart")
        elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ITEM_USE_MOVE) == TRUE and env(IsMoveCancelPossible) == TRUE then
            if IsNodeActive("StandMoveLowerLoop LayerGenerator") == TRUE then
                SetVariable("StartTime_02", env(GetVariableChangeValue, 2) / 1000)
                SetVariable("StartTime_03", 0)
                SetVariable("Selector_UseTransitionEffect", SELECTOR_USE_TE_TAE_BLEND_IGNOR_FROM_GENERATOR)
                FireEventNoReset("W_StandMoveLoop")
            else
                SetVariable("StartTime_02", 0)
                SetVariable("StartTime_03", env(GetVariableChangeValue, 2) / 1000)
                SetVariable("Selector_UseTransitionEffect", SELECTOR_USE_TE_TAE_BLEND_IGNOR_FROM_GENERATOR)
                FireEventNoReset("W_StandMoveStart")
            end
        elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_MOVE_LOOP_TRANSITION) == TRUE then
            _SpeedUpdate(current_hkb_state)
            if hkbGetVariable("MoveSpeedIndex") == 1 then
                SetVariable("StartTime_02", env(GetVariableChangeValue, 2) / 1000 * 0.5)
            else
                SetVariable("StartTime_02", env(GetVariableChangeValue, 2) / 1000)
            end
            SetVariable("StartTime_03", 0)
            SetVariable("Selector_UseTransitionEffect", SELECTOR_USE_TE_TAE_BLEND_IGNOR_FROM_GENERATOR)
            FireEvent("W_StandMoveLoop")
        else
            act(Wait)
            SetVariable("StartTime_02", 0)
            SetVariable("Selector_UseTransitionEffect", SELECTOR_USE_TE_TAE_BLEND_NO_SRC_MOTION_IGNOR_FROM_GENERATOR)
            FireEvent("W_StandMoveStart")
        end
    elseif next_behavior == BEH_A_GROUND_MOVE_STOP then
        local turnAngle = hkbGetVariable("TurnAngle")
        local twistAngle = -hkbGetVariable("TwistLowerRootAngle")
        local smallTurnAngle = 60
        local smallTwistAngle = 0
        if currentStyle == STYLE_TYPE_CROUCH then
            if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ITEM_USE_MOVE) == TRUE then
                SetVariable("StartTime_01", env(GetVariableChangeValue, 1) / 1000)
                SetVariable("StartTime_02", 0)
                FireEventNoReset("W_CrouchMoveableAction")
            elseif smallTurnAngle < math.abs(turnAngle) or smallTwistAngle < math.abs(twistAngle) then
                _GroundQuickTurn(current_hkb_state)
            elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_MOVING_RUN) == TRUE then
                FireEvent("W_CrouchRunStop")
            else
                FireEvent("W_CrouchWalkStop")
            end
        elseif currentStyle == STYLE_TYPE_GROUND_GUARD then
            if smallTurnAngle < math.abs(turnAngle) or smallTwistAngle < math.abs(twistAngle) then
                _GroundQuickTurn(current_hkb_state)
            else
                FireEvent("W_DeflectGuardIdle")
            end
        elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ITEM_USE_MOVE) == TRUE then
            SetVariable("StartTime_01", env(GetVariableChangeValue, 1) / 1000)
            SetVariable("StartTime_02", 0)
            FireEventNoReset("W_StandMoveableAction")
        elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_SPRINT_TO_STANDMOVE_INITIAL_END) == TRUE then
            act(SwitchMotion, TRUE)
            _SpeedUpdate(current_hkb_state)
            _MoveDirectionUpdate()
            SetVariable("StartTime_02", env(GetVariableChangeValue, 2) / 1000)
            FireEventNoReset("W_StandMoveLoopFromSprint")
        elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_SPRINT_TO_STANDMOVE_SATELLITE_END) == TRUE then
            act(SwitchMotion, TRUE)
            _SpeedUpdate(current_hkb_state)
            _MoveDirectionUpdate()
            SetVariable("StartTime_02", env(GetVariableChangeValue, 2) / 1000)
            SetVariable("Selector_UseTransitionEffect", SELECTOR_USE_TE_TAE_BLEND_IGNOR_FROM_GENERATOR)
            FireEventNoReset("W_StandMoveLoop")
        elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_MOVING_SPRINT) == TRUE or env(IsSpEffectBehaviorRefID, SP_EF_REF_ENABLE_SPRINT_ACTION) == TRUE then
            local angle = 0
            if env(IsLocked) == TRUE then
                angle = hkbGetVariable("MoveAngle")
            else
                angle = hkbGetVariable("TurnAngle")
            end
            if current_hkb_state == HKB_STATE_SPRINT_START_FROM_STEP then
                angle = hkbGetVariable("TurnAngle")
            end
            if hkbGetVariable("MoveSpeedLevel") > 0 and math.abs(angle) < SPRINT_BRAKE_ANGLE then
                FireEventNoReset("W_StandMoveStartFromSprint")
            else
                FireEvent("W_SprintStopReady")
            end
        elseif current_hkb_state == HKB_STATE_GROUND_SUB_ATTACK_GUARD_LOOP or current_hkb_state == HKB_STATE_GROUND_SUB_ATTACK_GUARD_MOVE_LOOP then
            FireEvent("W_GroundSubAttackGuardLoop")
        elseif env(GetEquipWeaponSpecialCategoryNumber, HAND_RIGHT) == SP_ATK_TYPE_104 and (current_hkb_state == HKB_STATE_GROUND_SPACIAL_ATTACK_HOLD_LOOP or current_hkb_state == HKB_STATE_GROUND_SPECIAL_ATTACK_HOLD_MOVE) then
            if smallTurnAngle < math.abs(turnAngle) or smallTwistAngle < math.abs(twistAngle) then
                _GroundQuickTurn(current_hkb_state)
            else
                FireEvent("W_GroundSpacialAttackHoldLoop")
            end
        elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_MOVING_RUN) == TRUE then
            if smallTurnAngle < math.abs(turnAngle) or smallTwistAngle < math.abs(twistAngle) then
                _GroundQuickTurn(current_hkb_state)
            else
                FireEvent("W_StandRunStop")
            end
        elseif smallTurnAngle < math.abs(turnAngle) or smallTwistAngle < math.abs(twistAngle) then
            _GroundQuickTurn(current_hkb_state)
        else
            FireEvent("W_StandWalkStop")
        end
    elseif next_behavior == BEH_A_GROUND_MOVE_SPEED_CHANGE then
        SetVariable("Selector_UseTransitionEffect", SELECTOR_USE_TE_TAE_BLEND_SYNC)
        FireEventNoReset("W_StandMoveLoopSync")
    elseif next_behavior == BEH_A_DOCKING_MOVE_START then
        local stickAngle = hkbGetVariable("DockingStickAngle")
        if stickAngle < 0 then
            SetVariable("Selector_DockingMoveDir", SELECTOR_DOCKING_MOVE_DIR_L)
        else
            SetVariable("Selector_DockingMoveDir", SELECTOR_DOCKING_MOVE_DIR_R)
        end
        local edgeType = env(GetDockingEdgeRequest)
        local isEdgeEnd = env(IsOnEdgeOfDockingTarget)
        if isEdgeEnd == DOCKING_TGT_END_TYPE_NONE or isEdgeEnd == DOCKING_TGT_END_TYPE_LEFT and stickAngle >= 0 and stickAngle <= 180 or isEdgeEnd == DOCKING_TGT_END_TYPE_RIGHT and stickAngle >= -180 and stickAngle <= 0 then
            if currentStyle == STYLE_TYPE_COVER then
                FireEvent("W_CoverMoveStart")
            elseif edgeType == HANG_EDGE_TYPE_DISABLE_HOLD_FOOT then
                FireEvent("W_HangMoveStart")
            else
                FireEvent("W_HangFootHoldMoveStart")
            end
        end
    elseif next_behavior == BEH_A_DOCKING_MOVE_STOP then
        if currentStyle == STYLE_TYPE_COVER then
            if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_MOVING_RUN) == TRUE then
                FireEvent("W_CoverRunEnd")
            else
                FireEvent("W_CoverWalkEnd")
            end
        else
            local edgeType = env(GetDockingEdgeRequest)
            if edgeType == HANG_EDGE_TYPE_DISABLE_HOLD_FOOT then
                FireEvent("W_HangMoveEnd")
            else
                FireEvent("W_HangFootHoldMoveEnd")
            end
        end
    elseif next_behavior == BEH_A_SWIM_MOVE_START then
        if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_SWIM_START_FROM_LAND_WATER) == TRUE then
            FireEvent("W_SwimMoveStartFromLandWater")
        else
            FireEvent("W_SwimMoveStart")
        end
    elseif next_behavior == BEH_A_SWIM_MOVE_STOP then
        FireEvent("W_SwimMoveEnd")
    elseif next_behavior == BEH_A_DIVE_MOVE_START then
        FireEvent("W_DiveMoveStart")
    elseif next_behavior == BEH_A_DIVE_MOVE_STOP then
        FireEvent("W_DiveMoveEnd")
    elseif next_behavior == BEH_A_DIVE_MOVE_UP_START then
        if current_hkb_state == HKB_STATE_DIVE_KICK_MOVE_UP_1 or current_hkb_state == HKB_STATE_DIVE_KICK_MOVE_UP_2 then
            FireEvent("W_DiveMoveUpLoop")
        else
            FireEvent("W_DiveMoveUpStart")
        end
    elseif next_behavior == BEH_A_DIVE_MOVE_DOWN_START then
        if current_hkb_state == HKB_STATE_DIVE_KICK_MOVE_DOWN_1 or current_hkb_state == HKB_STATE_DIVE_KICK_MOVE_DOWN_2 or env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_DIVE_MOVE_DOWN_LOOP) == TRUE then
            FireEvent("W_DiveMoveDownLoop")
        else
            FireEvent("W_DiveMoveDownStart")
        end
    elseif next_behavior == BEH_A_DIVE_MOVE_UP_STOP then
        FireEvent("W_DiveMoveUpEnd")
    elseif next_behavior == BEH_A_DIVE_MOVE_DOWN_STOP then
        FireEvent("W_DiveMoveDownEnd")
    elseif next_behavior == BEH_A_KICK_MOVE then
        act(CloseMenuWhenUsingItem)
        if currentStyle == STYLE_TYPE_DIVE then
            if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_SWIM_KICK_MOVING) == TRUE and (current_hkb_state == HKB_STATE_DIVE_KICK_MOVE_1 or current_hkb_state == HKB_STATE_DIVE_KICK_MOVE_2) then
                FireEvent("W_DiveKickMove2")
            else
                FireEvent("W_DiveKickMove1")
            end
        elseif currentStyle == STYLE_TYPE_SWIM then
            if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_DOLPHIN_JUMP) == TRUE then
                FireEvent("W_DiveToAir2")
            elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_SWIM_KICK_MOVING) == TRUE and (current_hkb_state == HKB_STATE_SWIM_KICK_MOVE_1 or current_hkb_state == HKB_STATE_SWIM_KICK_MOVE_2) then
                FireEvent("W_SwimKickMove2")
            else
                FireEvent("W_SwimKickMove1")
            end
        end
    elseif next_behavior == BEH_A_SWIM_BACK_STEP then
        if currentStyle == STYLE_TYPE_DIVE then
            FireEvent("W_DiveBackStep")
        elseif currentStyle == STYLE_TYPE_SWIM then
            if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_DOLPHIN_JUMP) == TRUE then
                FireEvent("W_DiveToAir2")
            else
                FireEvent("W_SwimBackStep")
            end
        end
    elseif next_behavior == BEH_A_SWIM_JUMP then
        act(CloseMenuWhenUsingItem)
        if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_JUMP) == TRUE then
            SetVariable("AddActionInputBlend", 0)
        end
        if currentStyle == STYLE_TYPE_DIVE then
            if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_DIVE_MOVE_DIRECTION_D) == TRUE then
                SetVariable("AddActionInputBlend", 1)
                FireEvent("W_AddActionInputJump")
                if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_DIVE_KICK_BRAKE) == TRUE then
                    FireEvent("W_DiveKickMoveBrakeDown")
                else
                    FireEvent("W_DiveMoveDownEnd")
                end
            elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_SWIM_KICK_MOVING) == TRUE then
                FireEvent("W_DiveJumpFromKickMove")
            else
                local stickLevel = hkbGetVariable("MoveSpeedLevel")
                if stickLevel <= 0 then
                    SetVariable("Selector_GroundJumpType", SELECTOR_GROUND_JUMP_TYPE_VERTICAL)
                else
                    SetVariable("Selector_GroundJumpType", SELECTOR_GROUND_JUMP_TYPE_FORWARD)
                end
                FireEvent("W_DiveJump")
            end
        elseif currentStyle == STYLE_TYPE_SWIM then
            if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_DOLPHIN_JUMP) == TRUE then
                FireEvent("W_DiveToAir2")
            elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_SWIM_KICK_MOVING) == TRUE then
                FireEvent("W_SwimKickMoveJumpReady")
            else
                local stickLevel = hkbGetVariable("MoveSpeedLevel")
                if stickLevel <= 0 then
                    SetVariable("Selector_GroundJumpType", SELECTOR_GROUND_JUMP_TYPE_VERTICAL)
                else
                    SetVariable("Selector_GroundJumpType", SELECTOR_GROUND_JUMP_TYPE_FORWARD)
                end
                FireEvent("W_SwimJumpReady")
            end
        end
    elseif next_behavior == BEH_A_DIVE_KICK_MOVE_UP then
        if current_hkb_state == HKB_STATE_DIVE_KICK_MOVE_UP_1 or current_hkb_state == HKB_STATE_DIVE_KICK_MOVE_UP_2 or current_hkb_state == HKB_STATE_DIVE_MOVE_UP_START or current_hkb_state == HKB_STATE_DIVE_MOVE_UP_LOOP then
            FireEvent("W_DiveKickMoveUp2")
        else
            FireEvent("W_DiveKickMoveUp1")
        end
    elseif next_behavior == BEH_A_DIVE_KICK_MOVE_UP_BRAKE then
        FireEvent("W_DiveKickMoveBrakeUp")
    elseif next_behavior == BEH_A_DIVE_KICK_MOVE_DOWN then
        if current_hkb_state == HKB_STATE_DIVE_KICK_MOVE_DOWN_1 or current_hkb_state == HKB_STATE_DIVE_KICK_MOVE_DOWN_2 or current_hkb_state == HKB_STATE_DIVE_MOVE_DOWN_START or current_hkb_state == HKB_STATE_DIVE_MOVE_DOWN_LOOP then
            FireEvent("W_DiveKickMoveDown2")
        else
            FireEvent("W_DiveKickMoveDown1")
        end
    elseif next_behavior == BEH_A_DIVE_KICK_MOVE_DOWN_BRAKE then
        FireEvent("W_DiveKickMoveBrakeDown")
    elseif next_behavior == BEH_A_GROUND_QUICK_TURN then
        _GroundQuickTurn(current_hkb_state)
    elseif next_behavior == BEH_A_QUICK_TURN_MOVE_START then
        local turnAngle = hkbGetVariable("TwistLowerRootAngle")
        if turnAngle > 0 then
            FireEvent("W_StandQuickTurnMoveStartLeft180")
        else
            FireEvent("W_StandQuickTurnMoveStartRight180")
        end
    elseif next_behavior == BEH_A_STAND_MOVE_QUICK_TURN then
        local turnAngle = hkbGetVariable("TurnAngle")
        if turnAngle > 0 then
            FireEvent("W_StandMoveQuickTurnRight180")
        else
            FireEvent("W_StandMoveQuickTurnLeft180")
        end
    elseif next_behavior == BEH_A_SWIM_QUICK_TURN then
        local turnAngle = hkbGetVariable("TurnAngle")
        if currentStyle == STYLE_TYPE_DIVE then
            if turnAngle > 0 then
                if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_DEFLECT_GUARD_QUIC_TURN) == TRUE then
                    FireEvent("W_DiveGuardQuickTurnRight180")
                else
                    FireEvent("W_DiveQuickTurnRight180")
                end
            elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_DEFLECT_GUARD_QUIC_TURN) == TRUE then
                FireEvent("W_DiveGuardQuickTurnLeft180")
            else
                FireEvent("W_DiveQuickTurnLeft180")
            end
        elseif currentStyle == STYLE_TYPE_SWIM then
            if turnAngle > 0 then
                if current_hkb_state == HKB_STATE_SWIM_DEFLECT_GUARD_START or current_hkb_state == HKB_STATE_SWIM_DEFLECT_GUARD_LOOP or current_hkb_state == HKB_STATE_SWIM_GUARD_QUICK_TURN_LEFT_180 or current_hkb_state == HKB_STATE_SWIM_GUARD_QUICK_TURN_RIGHT_180 then
                    FireEvent("W_SwimGuardQuickTurnRight180")
                else
                    FireEvent("W_SwimQuickTurnRight180")
                end
            elseif current_hkb_state == HKB_STATE_SWIM_DEFLECT_GUARD_START or current_hkb_state == HKB_STATE_SWIM_DEFLECT_GUARD_LOOP or current_hkb_state == HKB_STATE_SWIM_GUARD_QUICK_TURN_LEFT_180 or current_hkb_state == HKB_STATE_SWIM_GUARD_QUICK_TURN_RIGHT_180 then
                FireEvent("W_SwimGuardQuickTurnLeft180")
            else
                FireEvent("W_SwimQuickTurnLeft180")
            end
        end
    elseif next_behavior == BEH_A_KICK_MOVE_BRAKE then
        if currentStyle == STYLE_TYPE_DIVE then
            FireEvent("W_DiveKickMoveBrake")
        elseif currentStyle == STYLE_TYPE_SWIM then
            FireEvent("W_SwimKickMoveBrake")
        end
    elseif next_behavior == BEH_A_DIVE_ATTACK then
        act(CloseMenuWhenUsingItem)
        act(WeaponParameterReference, HAND_RIGHT)
        _StartAutoAim()
        if currentStyle == STYLE_TYPE_DIVE then
            if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_SWIM_KICK_MOVING) == TRUE and (current_hkb_state == HKB_STATE_DIVE_KICK_MOVE_1 or current_hkb_state == HKB_STATE_DIVE_KICK_MOVE_2) then
                local stickAngle = hkbGetVariable("AttackAngle")
                if math.abs(stickAngle) <= 135 then
                    SetVariable("Selector_GroundJumpType", 0)
                else
                    SetVariable("Selector_GroundJumpType", 1)
                end
                FireEvent("W_DiveKickMoveAttack")
            elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_TRANSITION_GROUND_ATTACK_COMBO_1) == TRUE then
                FireEvent("W_DiveAttackCombo1")
            elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_TRANSITION_GROUND_ATTACK_COMBO_2) == TRUE then
                FireEvent("W_DiveAttackCombo2")
            elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_TRANSITION_GROUND_ATTACK_COMBO_3) == TRUE then
                FireEvent("W_DiveAttackCombo3")
            else
                FireEvent("W_DiveAttackCombo1")
            end
        elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_SWIM_KICK_MOVING) == TRUE and (current_hkb_state == HKB_STATE_SWIM_KICK_MOVE_1 or current_hkb_state == HKB_STATE_SWIM_KICK_MOVE_2) then
            local stickAngle = hkbGetVariable("AttackAngle")
            if math.abs(stickAngle) <= 135 then
                SetVariable("Selector_GroundJumpType", 0)
            else
                SetVariable("Selector_GroundJumpType", 1)
            end
            FireEvent("W_SwimKickMoveAttack")
        elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_TRANSITION_GROUND_ATTACK_COMBO_1) == TRUE then
            FireEvent("W_SwimAttackCombo1")
        elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_TRANSITION_GROUND_ATTACK_COMBO_2) == TRUE then
            FireEvent("W_SwimAttackCombo2")
        elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_TRANSITION_GROUND_ATTACK_COMBO_3) == TRUE then
            FireEvent("W_SwimAttackCombo3")
        else
            FireEvent("W_SwimAttackCombo1")
        end
    elseif next_behavior == BEH_A_DIVE_RELEASE_ATTACK then
        act(WeaponParameterReference, HAND_RIGHT)
        _StartAutoAim()
        if currentStyle == STYLE_TYPE_DIVE then
            if current_hkb_state == HKB_STATE_DIVE_ATTACK_COMBO_1 then
                FireEvent("W_DiveAttackCombo1Release")
            elseif current_hkb_state == HKB_STATE_DIVE_ATTACK_COMBO_2 then
                FireEvent("W_DiveAttackCombo2Release")
            elseif current_hkb_state == HKB_STATE_DIVE_ATTACK_COMBO_3 then
                FireEvent("W_DiveAttackCombo3Release")
            end
        elseif current_hkb_state == HKB_STATE_SWIM_ATTACK_COMBO_1 then
            FireEvent("W_SwimAttackCombo1Release")
        elseif current_hkb_state == HKB_STATE_SWIM_ATTACK_COMBO_2 then
            FireEvent("W_SwimAttackCombo2Release")
        elseif current_hkb_state == HKB_STATE_SWIM_ATTACK_COMBO_3 then
            FireEvent("W_SwimAttackCombo3Release")
        end
    elseif next_behavior == BEH_A_DIVE_DEFLECT_GUARD_START then
        act(CloseMenuWhenUsingItem)
        act(WeaponParameterReference, HAND_RIGHT)
        _StartAutoAim()
        if currentStyle == STYLE_TYPE_DIVE then
            if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_SWIM_KICK_MOVING) == TRUE then
                if current_hkb_state == HKB_STATE_DIVE_KICK_MOVE_UP_1 or current_hkb_state == HKB_STATE_DIVE_KICK_MOVE_UP_2 then
                    FireEvent("W_DiveKickMoveUpToDeflectGuardStart")
                elseif current_hkb_state == HKB_STATE_DIVE_KICK_MOVE_DOWN_1 or current_hkb_state == HKB_STATE_DIVE_KICK_MOVE_DOWN_2 then
                    FireEvent("W_DiveKickMoveDownToDeflectGuardStart")
                else
                    FireEvent("W_DiveKickMoveGuardStart")
                end
            elseif current_hkb_state == HKB_STATE_DIVE_MOVE_UP_START or current_hkb_state == HKB_STATE_DIVE_MOVE_UP_LOOP or current_hkb_state == HKB_STATE_DIVE_KICK_MOVE_UP_1 or current_hkb_state == HKB_STATE_DIVE_KICK_MOVE_UP_2 then
                FireEvent("W_DiveMoveUpToDeflectGuardStart")
            elseif current_hkb_state == HKB_STATE_DIVE_MOVE_DOWN_START or current_hkb_state == HKB_STATE_DIVE_MOVE_DOWN_LOOP or current_hkb_state == HKB_STATE_DIVE_KICK_MOVE_DOWN_1 or current_hkb_state == HKB_STATE_DIVE_KICK_MOVE_DOWN_2 then
                FireEvent("W_DiveMoveDownToDeflectGuardStart")
            else
                FireEvent("W_DiveDeflectGuardStart")
            end
        elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_SWIM_KICK_MOVING) == TRUE and (current_hkb_state == HKB_STATE_SWIM_KICK_MOVE_1 or current_hkb_state == HKB_STATE_SWIM_KICK_MOVE_2) then
            FireEvent("W_SwimKickMoveGuardStart")
        else
            FireEvent("W_SwimDeflectGuardStart")
        end
    elseif next_behavior == BEH_A_DIVE_DEFLECT_GUARD_END then
        act(WeaponParameterReference, HAND_RIGHT)
        if currentStyle == STYLE_TYPE_DIVE then
            FireEventNoReset("W_DiveDeflectGuardEnd")
        else
            FireEventNoReset("W_SwimDeflectGuardEnd")
        end
    elseif next_behavior == BEH_A_SPRINT then
        if _isNonCombatMode() == TRUE then
            ResetRequest()
        elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_TRANSITION_SPRINT) == TRUE then
            if current_hkb_state ~= HKB_STATE_SPRINT_START_FROM_STEP then
                act(LockonFixedAngleCancel)
                FireEventNoReset("W_SprintStartFromStep")
            end
        else
            _fireGroundStep(current_hkb_state)
        end
    elseif next_behavior == BEH_A_SPRINT_QUICK_TURN then
        FireEvent("W_SprintQuickTurnReady")
    elseif next_behavior == BEH_A_GROUND_JUMP then
        act(CloseMenuWhenUsingItem)
        if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_JUMP) == TRUE then
            SetVariable("AddActionInputBlend", 0)
        end
        if _execDamageStep() == TRUE then
        elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_IN_STORM_JUMP_AREA) == TRUE then
            FireEvent("W_GroundStormJumpReady")
        elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_IN_STORM_JUMP_WEAK_AREA) == TRUE then
            FireEvent("W_GroundStormJumpWeakReady")
        elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_ENABLE_SPRINT_ACTION) == TRUE then
            if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_FAST_JUMP) == TRUE then
                FireEvent("W_SprintJumpStart")
            else
                FireEvent("W_SprintJumpReady")
            end
        else
            local stickAngle = hkbGetVariable("JumpAngle")
            local stickLevel = 0
            if env(IsLocked) == TRUE then
                act(TurnToLockonTargetImmediately)
                stickLevel = hkbGetVariable("JumpStickLevel")
            else
                stickLevel = hkbGetVariable("MoveSpeedLevel")
            end
            _SetJumpDirection(stickAngle, stickLevel)
            SetVariable("EnablePositioningJumpLand", TRUE)
            _setPositioningJumpTilt(stickAngle)
            if env(IsSpEffectBehaviorRefID, SP_EF_REF_IN_SWAMP_AREA) == TRUE then
                if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_FAST_JUMP) == TRUE then
                    FireEvent("W_SwampJumpStart")
                else
                    FireEvent("W_SwampJumpReady")
                end
            elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_FAST_JUMP) == TRUE then
                FireEvent("W_GroundJumpStart")
            else
                FireEvent("W_GroundJumpReady")
            end
        end
    elseif next_behavior == BEH_A_AIR_KICK then
        if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_KICK) == TRUE then
            SetVariable("AddActionInputBlend", 0)
        end
        act(WeaponParameterReference, HAND_RIGHT)
        if _isNonCombatMode() == FALSE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ONLY_ADD_ACTION_INPUT_JUMP) == FALSE then
            FireEvent("W_AirKick")
        end
        SetVariable("AddActionInputBlend", 1)
        FireEvent("W_AddActionInputJump")
    elseif next_behavior == BEH_A_GROUND_STEP then
        act(CloseMenuWhenUsingItem)
        if _isNonCombatMode() == TRUE then
            ResetRequest()
        elseif _execDamageStep() == TRUE then
        elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_IN_SWAMP_AREA) == TRUE then
            ResetRequest()
        else
            _fireGroundStep(current_hkb_state)
        end
    elseif next_behavior == BEH_A_WALL_JUMP then
        if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_JUMP) == TRUE then
            SetVariable("AddActionInputBlend", 0)
        end
        local contactWallAngle = hkbGetVariable("ContactWallAngle")
        if env(IsSpEffectBehaviorRefID, SP_EF_REF_ENABLE_BOUNCE_WALL_JUMP) == TRUE then
            act(TurnToDirection, contactWallAngle)
            FireEvent("W_BounceWallJumpReady")
        else
            if contactWallAngle > -45 and contactWallAngle < 45 then
                SetVariable("Selector_WallContactType", SELECTOR_WALL_CONTACT_TYPE_F)
            elseif contactWallAngle > 135 or contactWallAngle < -135 then
                SetVariable("Selector_WallContactType", SELECTOR_WALL_CONTACT_TYPE_B)
            elseif contactWallAngle > -135 and contactWallAngle < -45 then
                SetVariable("Selector_WallContactType", SELECTOR_WALL_CONTACT_TYPE_L)
            else
                SetVariable("Selector_WallContactType", SELECTOR_WALL_CONTACT_TYPE_R)
            end
            g_wallJumpCount = WALL_JUMP_COUNT_MAX
            FireEvent("W_WallJumpReady")
        end
    elseif next_behavior == BEH_A_AIR_STORM_JUMP then
        if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_JUMP) == TRUE then
            SetVariable("AddActionInputBlend", 0)
        end
        if env(IsSpEffectBehaviorRefID, SP_EF_REF_IN_STORM_JUMP_WEAK_AREA) == TRUE then
            FireEvent("W_AirStormJumpWeakStart")
        else
            FireEvent("W_AirStormJumpStart")
        end
    elseif next_behavior == BEH_A_AIR_ATTACK then
        if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_ATTACK) == TRUE then
            SetVariable("AddActionInputBlend", 0)
        end
        _StartAutoAim()
        act(WeaponParameterReference, HAND_RIGHT)
        if _isNonCombatMode() == TRUE then
            ResetRequest()
        elseif currentStyle == STYLE_TYPE_WIRE_FALL then
            if env(IsSpEffectBehaviorRefID, SP_EF_REF_ELECTRO_CHARGE) == TRUE then
                FireEvent("W_AirElectroReceiveAttack")
            elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_WEAK_ELECTRO_CHARGE) == TRUE then
                FireEvent("W_AirWeakElectroReceiveAttack")
            elseif env(ActionUnlocked, ACTION_UNLOCK_TYPE_WIRE_MOVE_ATTACK) == FALSE then
                ResetRequest()
                SetVariable("AddActionInputBlend", 1)
                FireEvent("W_AddActionInputAttack")
            else
                FireEvent("W_WireFallAttackCombo1")
            end
        else
            local subWeaponCategory = env(GetEquipWeaponCategory, HAND_LEFT)
            if env(IsSpEffectBehaviorRefID, SP_EF_REF_ELECTRO_CHARGE) == TRUE then
                FireEvent("W_AirElectroReceiveAttack")
            elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_WEAK_ELECTRO_CHARGE) == TRUE then
                FireEvent("W_AirWeakElectroReceiveAttack")
            elseif env(ActionUnlocked, ACTION_UNLOCK_TYPE_SUB_ATTACK_DIRAVE_ATTACK_2) == TRUE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_SUB_ATTACK_DERIVE_ATTACK) == TRUE and subWeaponCategory == WEP_MOTION_CATEGORY_074 and (current_hkb_state == HKB_STATE_AIR_SUB_ATTACK_MOVE_START or current_hkb_state == HKB_STATE_AIR_SUB_ATTACK_MOVE_LOOP or current_hkb_state == HKB_STATE_AIR_SUB_ATTACK_MOVE_START_TO_LOOP) then
                act(WeaponParameterReference, HAND_LEFT)
                FireEvent("W_AirSubAttackDeriveAttack")
            elseif env(GetEquipWeaponSpecialCategoryNumber, HAND_RIGHT) == SP_ATK_TYPE_109 and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_SP_ATK_HIT_JUMP_DERIVE_ACTION) == TRUE and env(IsSpEffectBehaviorRefID, SP_EF_REF_WEP_SP_ATK_UNLOCK_109_FALL_ATTACK) == TRUE then
                FireEvent("W_GroundSpecialAttackHitJumpDeriveAction")
            elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_TRANSITION_GROUND_ATTACK_COMBO_1) == TRUE then
                FireEvent("W_AirComboAttack1")
            elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_TRANSITION_GROUND_ATTACK_COMBO_2) == TRUE then
                FireEvent("W_AirComboAttack2")
            elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_TRANSITION_GROUND_ATTACK_COMBO_3) == TRUE then
                FireEvent("W_AirComboAttack3")
            else
                FireEvent("W_AirComboAttack1")
            end
        end
    elseif next_behavior == BEH_A_AIR_SP_ATTACK then
        if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_ATTACK) == TRUE then
            SetVariable("AddActionInputBlend", 0)
        end
        g_enableSpAttaclkJump = env(IsUserJumpRequest, ACTION_ARM_SPECIAL_ATTACK)
        _StartAutoAim()
        act(WeaponParameterReference, HAND_RIGHT)
        local spAtkType = env(GetEquipWeaponSpecialCategoryNumber, HAND_RIGHT)
        if _isNonCombatMode() == TRUE then
            ResetRequest()
        elseif env(ActionUnlocked, ACTION_UNLOCK_TYPE_AIR_SP_ATTACK) == FALSE or spAtkType == SP_ATK_TYPE_110 and g_airSpecialAttackCount >= AIR_SP_ATTACK_COUNT_MAX then
            SetVariable("AddActionInputBlend", 1)
            FireEvent("W_AddActionInputSpacialAttack")
        elseif spAtkType == SP_ATK_TYPE_101 or spAtkType == SP_ATK_TYPE_107 or spAtkType == SP_ATK_TYPE_108 then
            FireEvent("W_AirSpecialAttackStart")
        elseif spAtkType == SP_ATK_TYPE_110 then
            g_airSpecialAttackCount = g_airSpecialAttackCount + 1
            if g_enableSpAttaclkJump == FALSE then
                FireEvent("W_AirSpecialAttackStartNoResource")
            else
                FireEvent("W_AirSpecialAttackStart")
            end
        elseif spAtkType == SP_ATK_TYPE_109 then
            if env(IsSpEffectBehaviorRefID, SP_EF_REF_WEP_SP_ATK_UNLOCK_109_FALL_ATTACK) == TRUE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_SP_ATK_HIT_JUMP_DERIVE_ACTION) == TRUE then
                FireEvent("W_GroundSpecialAttackHitJumpDeriveAction")
            else
                FireEvent("W_AirSpecialAttack")
            end
        elseif spAtkType == SP_ATK_TYPE_104 then
            FireEvent("W_AirSpecialAttackHoldStart")
        elseif spAtkType == SP_ATK_TYPE_103 and g_enableSpAttaclkJump == FALSE then
            FireEvent("W_AirSpecialAttackNoResource")
        else
            FireEvent("W_AirSpecialAttack")
        end
        g_beforeSpAttackNum = spAtkType
    elseif next_behavior == BEH_A_AIR_SP_ATTACK_RELEASE then
        _StartAutoAim()
        act(WeaponParameterReference, HAND_RIGHT)
        if current_hkb_state == HKB_STATE_AIR_SPECIAL_ATTACK_HOLD_START or current_hkb_state == HKB_STATE_AIR_SPECIAL_ATTACK_HOLD_LOOP then
            FireEventNoReset("W_AirSpacialAttackHoldEnd")
        else
            ResetRequest()
        end
    elseif next_behavior == BEH_A_AIR_SP_ATTACK_GUARD_RELEASE then
        act(WeaponParameterReference, HAND_RIGHT)
        local spAtkType = env(GetEquipWeaponSpecialCategoryNumber, HAND_RIGHT)
        if spAtkType == SP_ATK_TYPE_104 then
            FireEventNoReset("W_AirSpacialAttackHoldEnd")
        else
            ResetRequest()
        end
    elseif next_behavior == BEH_A_AIR_DEFLECT_START then
        if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_GUARD) == TRUE then
            SetVariable("AddActionInputBlend", 0)
        end
        SetVariable("AddDeflectGuardBlend", 0)
        act(WeaponParameterReference, HAND_RIGHT)
        _StartAutoAim()
        if _isNonCombatMode() == TRUE then
            ResetRequest()
        elseif currentStyle == STYLE_TYPE_WIRE_FALL then
            FireEvent("W_WireMoveDeflectGuardStart")
        elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_JUST_DEFLECT) == TRUE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_GUARD_CANCEL) == FALSE then
            SetVariable("AddDeflectGuardBlend", 1)
            FireEvent("W_AddHardDeflectGuard")
        else
            FireEvent("W_AirDeflectGuardStart")
        end
    elseif next_behavior == BEH_A_AIR_DEFLECT_END then
        act(WeaponParameterReference, HAND_RIGHT)
        _StartAutoAim()
        if currentStyle == STYLE_TYPE_WIRE_FALL then
            FireEventNoReset("W_WireMoveDeflectGuardEnd")
        else
            FireEventNoReset("W_AirDeflectGuardEnd")
        end
    elseif next_behavior == BEH_A_AIR_SUB_ATTACK_KAWARIMI then
        local subWeaponCategory = env(GetEquipWeaponCategory, HAND_LEFT)
        _StartAutoAim()
        local enableCombo = FALSE
        if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_SUB_ATTACK_COMBO) == TRUE and g_beforeSubAttackType == subWeaponCategory then
            enableCombo = TRUE
        end
        g_beforeSubAttackType = subWeaponCategory
        if _isNonCombatMode() == TRUE then
            ResetRequest()
        elseif env(ActionUnlocked, ACTION_UNLOCK_TYPE_AIR_SUB_ATTACK) == FALSE or g_airSubAttackCount >= AIR_SUB_ATTACK_COUNT_MAX then
            SetVariable("AddActionInputBlend", 1)
            FireEvent("W_AddActionInputSubAttack")
        elseif subWeaponCategory == WEP_MOTION_CATEGORY_074 then
            g_airSubAttackCount = g_airSubAttackCount + 1
            if env(IsUserJumpRequest, ACTION_ARM_SHINOBI_WEP_ACTION) == TRUE then
                act(WeaponParameterReference, HAND_LEFT)
                FireEvent("W_AirSubAttackMoveReady")
            else
                SetVariable("AddSubWeaponBlend", 1)
                FireEvent("W_AddSubAttackJumpFailed")
            end
        else
            ResetRequest()
        end
    elseif next_behavior == BEH_A_AIR_SUB_ATTACK then
        act(WeaponParameterReference, HAND_LEFT)
        _StartAutoAim()
        local subWeaponCategory = env(GetEquipWeaponCategory, HAND_LEFT)
        local enableCombo = FALSE
        if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_SUB_ATTACK_COMBO) == TRUE and g_beforeSubAttackType == subWeaponCategory then
            enableCombo = TRUE
        end
        g_beforeSubAttackType = subWeaponCategory
        local enableSubAttack = TRUE
        if subWeaponCategory == WEP_MOTION_CATEGORY_NONE or env(IsUserJumpRequest, ACTION_ARM_SHINOBI_WEP_ACTION) == FALSE then
            if subWeaponCategory == WEP_MOTION_CATEGORY_077 and env(IsSpEffectBehaviorRefID, SP_EF_REF_USED_TEKIMAWASHI) == TRUE then
                enableSubAttack = TRUE
            else
                enableSubAttack = FALSE
            end
        end
        if _isNonCombatMode() == TRUE then
            ResetRequest()
        elseif env(ActionUnlocked, ACTION_UNLOCK_TYPE_AIR_SUB_ATTACK) == FALSE or (subWeaponCategory == WEP_MOTION_CATEGORY_071 or subWeaponCategory == WEP_MOTION_CATEGORY_072 or subWeaponCategory == WEP_MOTION_CATEGORY_074 or subWeaponCategory == WEP_MOTION_CATEGORY_075 or subWeaponCategory == WEP_MOTION_CATEGORY_077 or subWeaponCategory == WEP_MOTION_CATEGORY_078 or subWeaponCategory == WEP_MOTION_CATEGORY_079) and g_airSubAttackCount >= AIR_SUB_ATTACK_COUNT_MAX then
            SetVariable("AddActionInputBlend", 1)
            FireEvent("W_AddActionInputSubAttack")
        elseif enableSubAttack == FALSE then
            if env(IsSpEffectBehaviorRefID, SP_EF_REF_ENABLE_ADD_SUBATTACK_FAILED) == TRUE then
                SetVariable("AddSubWeaponBlend", 1)
                FireEvent("W_AddSubAttackFailed")
            else
                FireEvent("W_SubAttackFailedAir")
            end
        else
            if subWeaponCategory == WEP_MOTION_CATEGORY_071 or subWeaponCategory == WEP_MOTION_CATEGORY_072 or subWeaponCategory == WEP_MOTION_CATEGORY_074 or subWeaponCategory == WEP_MOTION_CATEGORY_075 or subWeaponCategory == WEP_MOTION_CATEGORY_077 or subWeaponCategory == WEP_MOTION_CATEGORY_078 or subWeaponCategory == WEP_MOTION_CATEGORY_079 then
                g_airSubAttackCount = g_airSubAttackCount + 1
            end
            if subWeaponCategory == WEP_MOTION_CATEGORY_073 then
                FireEvent("W_AirSubAttackStart")
            elseif subWeaponCategory == WEP_MOTION_CATEGORY_074 then
                if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_DAMAGE_AFTER_KAWARIMI_FROM_ADD_DAMAGE) == TRUE or env(IsSpEffectBehaviorRefID, SP_EF_REF_POISON) == TRUE or env(IsSpEffectBehaviorRefID, SP_EF_REF_BURN) == TRUE then
                    SetVariable("EnablePositioningJumpLand", FALSE)
                    SetVariable("FallState", 0)
                    act(WeaponParameterReference, HAND_LEFT)
                    FireEvent("W_AirSubAttackMoveReady")
                else
                    FireEvent("W_AirSubAttackMoveAtemiReady")
                end
            elseif subWeaponCategory == WEP_MOTION_CATEGORY_075 then
                FireEvent("W_AirSubAttackCombo1")
            elseif subWeaponCategory == WEP_MOTION_CATEGORY_076 then
                FireEvent("W_AirSubAttackGuardStart")
            elseif subWeaponCategory == WEP_MOTION_CATEGORY_077 and env(IsSpEffectBehaviorRefID, SP_EF_REF_USED_TEKIMAWASHI) == TRUE then
                FireEvent("W_AirSubAttackSpecialEffect")
            elseif subWeaponCategory == WEP_MOTION_CATEGORY_079 then
                if env(IsLocked) == TRUE then
                    FireEvent("W_AirSubAttackLockOn")
                else
                    FireEvent("W_AirSubAttackCombo1")
                end
            elseif subWeaponCategory == WEP_MOTION_CATEGORY_070 then
                if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_TRANSITION_SUB_ATTACK_COMBO_1_WP070) == TRUE then
                    FireEvent("W_AirSubAttackCombo1")
                elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_TRANSITION_SUB_ATTACK_COMBO_2_WP070) == TRUE then
                    FireEvent("W_AirSubAttackCombo2")
                elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_TRANSITION_SUB_ATTACK_COMBO_3_WP070) == TRUE then
                    FireEvent("W_AirSubAttackCombo3")
                else
                    FireEvent("W_AirSubAttackCombo1")
                end
            elseif subWeaponCategory == WEP_MOTION_CATEGORY_078 then
                if env(IsSpEffectBehaviorRefID, SP_EF_REF_WEP_ENABLE_SUB_ATTACK_VARIATION) == TRUE then
                    FireEvent("W_AirSubAttackCombo1Variation")
                else
                    FireEvent("W_AirSubAttackCombo1")
                end
            elseif subWeaponCategory == WEP_MOTION_CATEGORY_072 then
                SetVariable("EnablePositioningJumpLand", FALSE)
                SetVariable("Selector_GroundJumpType", SELECTOR_GROUND_JUMP_TYPE_BACKWARD)
                FireEvent("W_AirSubAttackCombo1")
            elseif subWeaponCategory == WEP_MOTION_CATEGORY_071 or subWeaponCategory == WEP_MOTION_CATEGORY_077 then
                FireEvent("W_AirSubAttackCombo1")
            end
        end
    elseif next_behavior == BEH_A_AIR_SUB_ATTACK_RELEASE then
        act(WeaponParameterReference, HAND_LEFT)
        _StartAutoAim()
        local subWeaponCategory = env(GetEquipWeaponCategory, HAND_LEFT)
        if subWeaponCategory == WEP_MOTION_CATEGORY_076 then
            FireEvent("W_AirSubAttackGuardEnd")
        end
    elseif next_behavior == BEH_A_AIR_SUB_GUARD_RELEASE_CONNECT then
        act(WeaponParameterReference, HAND_LEFT)
        local subWeaponCategory = env(GetEquipWeaponCategory, HAND_LEFT)
        if subWeaponCategory == WEP_MOTION_CATEGORY_076 then
            FireEvent("W_AirSubAttackGuardEnd")
        end
        SetVariable("AddActionInputBlend", 1)
        if env(ActionRequest, ACTION_ARM_ATTACK) == TRUE then
            FireEvent("W_AddActionInputAttack")
        elseif env(ActionRequest, ACTION_ARM_GUARD) == TRUE then
            FireEvent("W_AddActionInputGuard")
        elseif env(ActionRequest, ACTION_ARM_WIRE_SHOOT) == TRUE then
            FireEvent("W_AddActionInputWireShoot")
        elseif env(ActionRequest, ACTION_ARM_JUMP) == TRUE then
            FireEvent("W_AddActionInputJump")
        elseif env(ActionRequest, ACTION_ARM_SP_MOVE) == TRUE or env(ActionRequest, ACTION_ARM_BACKSTEP) == TRUE or env(ActionRequest, ACTION_ARM_ROLLING) == TRUE then
            FireEvent("W_AddActionInputKick")
        elseif env(ActionRequest, ACTION_ARM_WALL_HANG) == TRUE then
            FireEvent("W_AddActionInputWallHang")
        elseif env(ActionRequest, ACTION_ARM_CROUCH) == TRUE then
            FireEvent("W_AddActionInputCrouch")
        elseif env(ActionRequest, ACTION_ARM_USE_ITEM) == TRUE then
            FireEvent("W_AddActionInputUseItem")
        elseif env(ActionRequest, ACTION_ARM_CHANGE_WEAPON_L) == TRUE then
            FireEvent("W_AddActionInputSubWeaponChange")
        end
    elseif next_behavior == BEH_A_COVER_END_CONNECT then
        local edgeType = env(GetDockingEdgeRequest)
        if edgeType == COVER_EDGE_TYPE_PEAK_MOVE_DISABLE_LOOK or edgeType == COVER_EDGE_TYPE_PEAK_MOVE_FREE_LOOK or edgeType == COVER_EDGE_TYPE_PEAK_MOVE_LEFT_LOOK_ONLY or edgeType == COVER_EDGE_TYPE_PEAK_MOVE_RIGHT_LOOK_ONLY then
            if env(ActionRequest, ACTION_ARM_WIRE_SHOOT) == TRUE then
                if env(IsWirePossible) == TRUE then
                    act(WireAction, 0)
                    FireEvent("W_AirWireShoot")
                else
                    ResetRequest()
                end
            elseif env(ActionRequest, ACTION_ARM_JUMP) == TRUE then
                SetVariable("Selector_WallContactType", SELECTOR_WALL_CONTACT_TYPE_B)
                g_wallJumpCount = WALL_JUMP_COUNT_MAX
                FireEvent("W_CoverToWallJumpReady")
            else
                ResetRequest()
            end
        elseif currentStyle == STYLE_TYPE_COVER_LOOK and env(ActionRequest, ACTION_ARM_SHINOBI_WEP_ACTION) == TRUE and env(IsUserJumpRequest, ACTION_ARM_SHINOBI_WEP_ACTION) == FALSE then
            FireEvent("W_CoverActionSubAttackFailed")
        else
            if currentStyle == STYLE_TYPE_COVER_LOOK then
                FireEventNoReset("W_CoverEndFromCoverLook")
            else
                FireEvent("W_CoverEnd")
            end
            SetVariable("AddActionInputBlend", 1)
            if env(ActionRequest, ACTION_ARM_ATTACK) == TRUE then
                FireEvent("W_AddActionInputAttack")
            elseif env(ActionRequest, ACTION_ARM_SHINOBI_WEP_ACTION) == TRUE then
                FireEvent("W_AddActionInputSubAttack")
            elseif env(ActionRequest, ACTION_ARM_GUARD) == TRUE then
                FireEvent("W_AddActionInputGuard")
            elseif env(ActionRequest, ACTION_ARM_WIRE_SHOOT) == TRUE then
                FireEvent("W_AddActionInputWireShoot")
            elseif env(ActionRequest, ACTION_ARM_JUMP) == TRUE then
                FireEvent("W_AddActionInputJump")
            elseif env(ActionRequest, ACTION_ARM_SP_MOVE) == TRUE then
                FireEvent("W_AddActionInputKick")
            elseif env(ActionRequest, ACTION_ARM_CROUCH) == TRUE then
                FireEvent("W_AddActionInputCrouch")
            end
        end
    elseif next_behavior == BEH_A_HANG_END_CONNECT then
        local edgeType = env(GetDockingEdgeRequest)
        if env(ActionRequest, ACTION_ARM_WIRE_SHOOT) == TRUE then
            if env(IsWirePossible) == TRUE then
                act(WireAction, 0)
                FireEvent("W_AirWireShoot")
            else
                ResetRequest()
            end
        elseif env(ActionRequest, ACTION_ARM_JUMP) == TRUE then
            g_wallJumpCount = WALL_JUMP_COUNT_MAX
            SetVariable("Selector_WallContactType", SELECTOR_WALL_CONTACT_TYPE_F)
            if edgeType == HANG_EDGE_TYPE_ENABLE_HOLD_FOOT then
                FireEvent("W_HangFootHoldJumpReady")
            else
                FireEvent("W_HangJumpReady")
            end
        elseif env(ActionRequest, ACTION_ARM_GUARD) == TRUE or env(ActionRequest, ACTION_ARM_SHINOBI_WEP_ACTION) == TRUE or env(ActionRequest, ACTION_ARM_CROUCH) == TRUE then
            ResetRequest()
        end
    elseif next_behavior == BEH_A_AIR_WIRE_SHOOT then
        if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_WIRE_SHOOT) == TRUE then
            SetVariable("AddActionInputBlend", 0)
        end
        act(WireAction, 0)
        if current_hkb_state == HKB_STATE_THROW_DEF_LARGE_BLOW_START or current_hkb_state == HKB_STATE_THROW_DEF_LARGE_BLOW_FALL_LOOP then
            FireEvent("W_AirBreakFallWireShoot")
        elseif currentStyle == STYLE_TYPE_WIRE_FALL then
            if current_hkb_state == HKB_STATE_WIRE_MOVE_WIRE_MOVE_START then
                FireEvent("W_WireMoveWire2Shoot")
            else
                FireEvent("W_WireMoveWireShoot")
            end
        else
            SetVariable("WireMoveStartIndex", GetWireMoveStartIndex(current_hkb_state))
            FireEvent("W_AirWireShoot")
        end
    elseif next_behavior == BEH_A_GROUND_ATTACK then
        act(CloseMenuWhenUsingItem)
        if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_ATTACK) == TRUE then
            SetVariable("AddActionInputBlend", 0)
        end
        _StartAutoAim()
        act(ResetInputQueue)
        act(WeaponParameterReference, HAND_RIGHT)
        if _isNonCombatMode() == TRUE or env(IsSpEffectBehaviorRefID, SP_EF_REF_IN_WATERSIDE_AREA) == TRUE or env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_NO_NORMAL_ATTACK_ANIM) == TRUE then
            ResetRequest()
        elseif g_forceCrouch == TRUE and env("特殊効果発動中か_Behavior参照ID_寿命延長を厳密に取得", SP_EF_REF_AGING) == TRUE then
            ResetRequest()
        elseif currentStyle == STYLE_TYPE_CROUCH then
            if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_SUB_ATTACK_DERIVE_ATTACK) == TRUE and (current_hkb_state == HKB_STATE_CROUCH_SUB_ATTACK_GUARD_START or current_hkb_state == HKB_STATE_CROUCH_SUB_ATTACK_GUARD_END) then
                act(WeaponParameterReference, HAND_LEFT)
                FireEvent("W_GroundSubAttackDeriveAttackCombo1")
            elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_SUB_ATTACK_DERIVE_ATTACK) == TRUE and env(GetEquipWeaponCategory, HAND_LEFT) == WEP_MOTION_CATEGORY_079 and (current_hkb_state == HKB_STATE_CROUCH_SUB_ATTACK_COMBO_1_MOVEABLE or current_hkb_state == HKB_STATE_CROUCH_SUB_ATTACK_COMBO_1_RELEASE_MOVEABLE or current_hkb_state == HKB_STATE_CROUCH_SUB_ATTACK_LOCK_ON_MOVEABLE or current_hkb_state == HKB_STATE_CROUCH_SUB_ATTACK_LOCK_ON_RELEASE_MOVEABLE) then
                act(WeaponParameterReference, HAND_LEFT)
                if current_hkb_state == HKB_STATE_CROUCH_SUB_ATTACK_COMBO_1_MOVEABLE or current_hkb_state == HKB_STATE_CROUCH_SUB_ATTACK_LOCK_ON_MOVEABLE then
                    FireEvent("W_GroundChargeSubAttackDeriveAttackCombo1")
                else
                    FireEvent("W_GroundSubAttackDeriveAttackCombo1")
                end
            elseif g_forceCrouch == TRUE then
                FireEvent("W_CrouchAttackToCrouch")
            elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_TRANSITION_GROUND_ATTACK_COMBO_1) == TRUE then
                FireEvent("W_GroundAttackCombo1")
            elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_TRANSITION_GROUND_ATTACK_COMBO_2) == TRUE then
                FireEvent("W_GroundAttackCombo2")
            elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_TRANSITION_GROUND_ATTACK_COMBO_1_REVERSE) == TRUE then
                FireEvent("W_GroundAttackCombo1Reverse")
            elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_TRANSITION_GROUND_ATTACK_COMBO_2_REVERSE) == TRUE then
                FireEvent("W_GroundAttackCombo2Reverse")
            elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_TRANSITION_GROUND_ATTACK_COMBO_3) == TRUE then
                FireEvent("W_GroundAttackCombo3")
            elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_TRANSITION_GROUND_ATTACK_COMBO_4) == TRUE then
                FireEvent("W_GroundAttackCombo4")
            elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_TRANSITION_GROUND_ATTACK_COMBO_5) == TRUE then
                FireEvent("W_GroundAttackCombo5")
            elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_TRANSITION_STEP_ATTACK) == TRUE then
                FireEvent("W_GroundStepAttack")
            else
                FireEvent("W_CrouchAttackToStand")
            end
        elseif currentStyle == STYLE_TYPE_HANG then
            local edgeType = env(GetDockingEdgeRequest)
            if edgeType == HANG_EDGE_TYPE_DISABLE_HOLD_FOOT then
                FireEvent("W_HangAttackCombo1")
            else
                FireEvent("W_HangFootHoldAttackCombo1")
            end
        else
            local subWeaponCategory = env(GetEquipWeaponCategory, HAND_LEFT)
            local enableCombo = FALSE
            if g_beforeSubAttackType == subWeaponCategory then
                enableCombo = TRUE
            end
            if _FireSpAttackCombo(current_hkb_state) == TRUE then
            elseif env(ActionUnlocked, ACTION_UNLOCK_TYPE_SUB_ATTACK_DIRAVE_ATTACK_1) == TRUE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_SUB_ATTACK_DERIVE_ATTACK) == TRUE and (subWeaponCategory == WEP_MOTION_CATEGORY_070 or subWeaponCategory == WEP_MOTION_CATEGORY_071 or subWeaponCategory == WEP_MOTION_CATEGORY_078 and current_hkb_state ~= HKB_STATE_GROUND_SUB_ATTACK_COMBO_2) and enableCombo == TRUE then
                act(WeaponParameterReference, HAND_LEFT)
                if subWeaponCategory == WEP_MOTION_CATEGORY_070 then
                    FireEvent("W_GroundSubAttackDeriveAttackCombo1")
                elseif subWeaponCategory == WEP_MOTION_CATEGORY_071 then
                    FireEvent("W_GroundSubAttackDeriveAttackCombo1")
                elseif subWeaponCategory == WEP_MOTION_CATEGORY_078 then
                    if env(IsSpEffectBehaviorRefID, SP_EF_REF_WEP_ENABLE_SUB_ATTACK_VARIATION) == TRUE then
                        if current_hkb_state == HKB_STATE_GROUND_SUB_ATTACK_VARIATION_COMBO_1_RELEASE or current_hkb_state == HKB_STATE_SPRINT_TO_SUB_ATTACK_VARIATION_RELEASE or current_hkb_state == HKB_STATE_LAND_AIR_SUB_ATTACK_COMBO_1_VARIATION then
                            FireEvent("W_GroundSubAttackVariationDeriveAttackCombo1")
                        else
                            FireEvent("W_GroundChargeSubAttackVariationDeriveAttackCombo1")
                        end
                    else
                        FireEvent("W_GroundSubAttackDeriveAttackCombo1")
                    end
                end
            elseif env(ActionUnlocked, ACTION_UNLOCK_TYPE_SUB_ATTACK_DIRAVE_ATTACK_2) == TRUE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_SUB_ATTACK_DERIVE_ATTACK) == TRUE and (subWeaponCategory == WEP_MOTION_CATEGORY_073 or subWeaponCategory == WEP_MOTION_CATEGORY_074 or subWeaponCategory == WEP_MOTION_CATEGORY_078 and current_hkb_state == HKB_STATE_GROUND_SUB_ATTACK_COMBO_2) and enableCombo == TRUE then
                act(WeaponParameterReference, HAND_LEFT)
                if subWeaponCategory == WEP_MOTION_CATEGORY_073 then
                    if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_GIMMICK_AXE_DERIVE_ATTACK_HORIZONTAL) == TRUE then
                        FireEvent("W_GroundSubAttackDeriveAttackHorizontal")
                    else
                        FireEvent("W_GroundSubAttackDeriveAttackCombo1")
                    end
                elseif subWeaponCategory == WEP_MOTION_CATEGORY_074 then
                    if current_hkb_state == HKB_STATE_LAND_AIR_SUB_ATTACK_MOVE then
                        FireEvent("W_LandAirSubAttackMoveDeriveAttack")
                    else
                        FireEvent("W_GroundSubAttackDeriveAttackCombo1")
                    end
                else
                    FireEvent("W_GroundSubAttackDeriveAttackCombo2")
                end
            elseif subWeaponCategory == WEP_MOTION_CATEGORY_075 and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_SUB_ATTACK_DERIVE_ATTACK) == TRUE and env(IsSpEffectBehaviorRefID, SP_EF_REF_WEP_DISABLE_DERIVE_SUB_ATTACK_COMBO) == FALSE and enableCombo == TRUE then
                local stickAngle = 0
                local stickLevel = 0
                if env(IsLocked) == TRUE then
                    stickAngle = hkbGetVariable("AttackAngle")
                    stickLevel = hkbGetVariable("AttackStickLevel")
                else
                    stickAngle = hkbGetVariable("TurnAngle")
                    stickLevel = hkbGetVariable("MoveSpeedLevel")
                end
                if current_hkb_state == HKB_STATE_GROUND_DERIVE_SUB_ATTACK_COMBO_1 or current_hkb_state == HKB_STATE_GROUND_DERIVE_SUB_ATTACK_COMBO_2 or current_hkb_state == HKB_STATE_GROUND_DERIVE_SUB_ATTACK_COMBO_3 or current_hkb_state == HKB_STATE_GROUND_DERIVE_SUB_ATTACK_COMBO_4 or current_hkb_state == HKB_STATE_GROUND_DERIVE_SUB_ATTACK_COMBO_5 or current_hkb_state == HKB_STATE_GROUND_DERIVE_SUB_ATTACK_COMBO_6 then
                    _SetStepAngle(stickAngle, stickLevel)
                    FireEvent("W_GroundDeriveSubAttackDeriveDirectivityAttack")
                else
                    _SetStepAngle(stickAngle, stickLevel)
                    FireEvent("W_GroundSubAttackDeriveDirectivityAttack")
                end
            elseif env(ActionUnlocked, ACTION_UNLOCK_TYPE_SUB_ATTACK_SHOT_ATTACK) == TRUE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_SUB_ATTACK_DERIVE_ATTACK) == TRUE and (subWeaponCategory == WEP_MOTION_CATEGORY_076 or subWeaponCategory == WEP_MOTION_CATEGORY_079) and enableCombo == TRUE then
                if subWeaponCategory == WEP_MOTION_CATEGORY_076 then
                    act(WeaponParameterReference, HAND_LEFT)
                    FireEvent("W_GroundSubAttackDeriveAttackCombo1")
                else
                    act(WeaponParameterReference, HAND_LEFT)
                    if current_hkb_state == HKB_STATE_GROUND_SUB_ATTACK_COMBO_1_MOVEABLE or current_hkb_state == HKB_STATE_GROUND_SUB_ATTACK_COMBO_1_MOVE or current_hkb_state == HKB_STATE_GROUND_SUB_ATTACK_LOCK_ON_MOVEABLE or current_hkb_state == HKB_STATE_GROUND_SUB_ATTACK_LOCK_ON_MOVE then
                        FireEvent("W_GroundChargeSubAttackDeriveAttackCombo1")
                    else
                        FireEvent("W_GroundSubAttackDeriveAttackCombo1")
                    end
                end
            elseif env(ActionUnlocked, ACTION_UNLOCK_TYPE_SUB_ATTACK_ENCHANT) == TRUE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_SUB_ATTACK_DERIVE_ATTACK) == TRUE and (subWeaponCategory == WEP_MOTION_CATEGORY_072 or subWeaponCategory == WEP_MOTION_CATEGORY_077) and enableCombo == TRUE then
                act(WeaponParameterReference, HAND_LEFT)
                if subWeaponCategory == WEP_MOTION_CATEGORY_072 then
                    if current_hkb_state == HKB_STATE_GROUND_SUB_ATTACK_COMBO_1 or current_hkb_state == HKB_STATE_SPRINT_SUB_ATTACK or current_hkb_state == HKB_STATE_GROUND_SUB_ATTACK_HOLD_END then
                        FireEvent("W_GroundChargeSubAttackDeriveAttackCombo1")
                    else
                        FireEvent("W_GroundSubAttackDeriveAttackCombo1")
                    end
                else
                    FireEvent("W_GroundSubAttackDeriveAttackCombo1")
                end
            elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_TRANSITION_GROUND_ATTACK_COMBO_1) == TRUE then
                FireEvent("W_GroundAttackCombo1")
            elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_TRANSITION_GROUND_ATTACK_COMBO_2) == TRUE then
                FireEvent("W_GroundAttackCombo2")
            elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_TRANSITION_GROUND_ATTACK_COMBO_1_REVERSE) == TRUE then
                FireEvent("W_GroundAttackCombo1Reverse")
            elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_TRANSITION_GROUND_ATTACK_COMBO_2_REVERSE) == TRUE then
                FireEvent("W_GroundAttackCombo2Reverse")
            elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_TRANSITION_GROUND_ATTACK_COMBO_3) == TRUE then
                FireEvent("W_GroundAttackCombo3")
            elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_TRANSITION_GROUND_ATTACK_COMBO_4) == TRUE then
                FireEvent("W_GroundAttackCombo4")
            elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_TRANSITION_GROUND_ATTACK_COMBO_5) == TRUE then
                FireEvent("W_GroundAttackCombo5")
            elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_TRANSITION_STEP_ATTACK) == TRUE then
                FireEvent("W_GroundStepAttack")
            elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_ENABLE_SPRINT_ACTION) == TRUE then
                if hkbGetVariable("AttackAngle") <= 0 and current_hkb_state == HKB_STATE_SPRINT_START_FROM_STEP or hkbGetVariable("AttackAngle") > 0 and current_hkb_state ~= HKB_STATE_SPRINT_START_FROM_STEP then
                    SetVariable("Selector_GroundJumpType", 0)
                else
                    SetVariable("Selector_GroundJumpType", 1)
                end
                FireEvent("W_SprintAttack")
            elseif current_hkb_state == HKB_STATE_HARD_DEFLECT_DMG or current_hkb_state == HKB_STATE_STAND_DEFLECT_HARD_MINIMUM or current_hkb_state == HKB_STATE_STAND_DEFLECT_HARD_SMALL or current_hkb_state == HKB_STATE_STAND_DEFLECT_HARD_MIDDLE or current_hkb_state == HKB_STATE_LAND_AIR_DEFLECT_HARD_SMALL then
                FireEvent("W_HardDeflectAtk")
            elseif current_hkb_state == HKB_STATE_EASY_DEFLECTED then
                FireEvent("W_EasyDeflectedAtk")
            elseif env(GetEquipWeaponSpecialCategoryNumber, HAND_RIGHT) == SP_ATK_TYPE_NONE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_DEFLECT_GUARD_ATTACK) == TRUE then
                FireEvent("W_DeflectGuardAttack")
            else
                FireEvent("W_GroundAttackCombo1")
            end
        end
    elseif next_behavior == BEH_A_GROUND_RELEASE_ATTACK then
        _StartAutoAim()
        act(WeaponParameterReference, HAND_RIGHT)
        if current_hkb_state == HKB_STATE_GROUND_ATTACK_COMBO_1 then
            FireEventNoReset("W_GroundAttackCombo1Release")
        elseif current_hkb_state == HKB_STATE_GROUND_ATTACK_COMBO_2 then
            FireEventNoReset("W_GroundAttackCombo2Release")
        elseif current_hkb_state == HKB_STATE_GROUND_ATTACK_COMBO_1_REVERSE then
            FireEventNoReset("W_GroundAttackCombo1ReverseRelease")
        elseif current_hkb_state == HKB_STATE_GROUND_ATTACK_COMBO_2_REVERSE then
            FireEventNoReset("W_GroundAttackCombo2ReverseRelease")
        elseif current_hkb_state == HKB_STATE_DEFLECT_GUARD_ATTACK then
            FireEventNoReset("W_DeflectGuardAttackRelease")
        elseif current_hkb_state == HKB_STATE_HARD_DEFLECT_ATK then
            FireEventNoReset("W_HardDeflectAtkRelease")
        elseif current_hkb_state == HKB_STATE_EASY_DEFLECTED_ATK then
            FireEventNoReset("W_EasyDeflectedAtkRelease")
        elseif current_hkb_state == HKB_STATE_GROUND_STEP_ATTACK then
            FireEvent("W_GroundStepAttackRelease")
        elseif current_hkb_state == HKB_STATE_CROUCH_ATTACK_TO_STAND then
            FireEvent("W_CrouchAttackToStandRelease")
        elseif current_hkb_state == HKB_STATE_SPRINT_ATTACK then
            FireEvent("W_SprintAttackRelease")
        end
    elseif next_behavior == BEH_A_GROUND_SP_ATTACK then
        act(CloseMenuWhenUsingItem)
        if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_SPACIAL_ATTACK) == TRUE then
            SetVariable("AddActionInputBlend", 0)
        end
        _StartAutoAim()
        act(WeaponParameterReference, HAND_RIGHT)
        g_enableSpAttaclkJump = env(IsUserJumpRequest, ACTION_ARM_SPECIAL_ATTACK)
        local spAtkType = env(GetEquipWeaponSpecialCategoryNumber, HAND_RIGHT)
        if _isNonCombatMode() == TRUE or g_forceCrouch == TRUE or env(IsSpEffectBehaviorRefID, SP_EF_REF_IN_WATERSIDE_AREA) == TRUE or env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_NO_NORMAL_ATTACK_ANIM) == TRUE then
            ResetRequest()
        elseif _FireSpAttackCombo(current_hkb_state) == TRUE then
        elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_ENABLE_SPRINT_ACTION) == TRUE then
            if spAtkType == SP_ATK_TYPE_101 then
                SetVariable("Selector_GroundJumpType", SELECTOR_GROUND_JUMP_TYPE_VERTICAL)
                FireEvent("W_SprintSpecialAttackStep")
            elseif spAtkType == SP_ATK_TYPE_104 then
                FireEvent("W_SprintSpecialAttackHoldStart")
            elseif spAtkType == SP_ATK_TYPE_107 then
                if env(IsLocked) == TRUE then
                    SetVariable("Selector_GroundJumpType", SELECTOR_GROUND_JUMP_TYPE_FORWARD_LOCKON)
                    act(LockHomingAction, 0)
                end
                FireEvent("W_SprintSpecialAttackJumpReady")
            elseif spAtkType == SP_ATK_TYPE_110 then
                g_airSpecialAttackCount = g_airSpecialAttackCount + 1
                if env(IsLocked) == TRUE then
                    SetVariable("Selector_GroundJumpType", SELECTOR_GROUND_JUMP_TYPE_FORWARD_LOCKON)
                    act(LockHomingAction, 0)
                end
                if g_enableSpAttaclkJump == FALSE then
                    FireEvent("W_SprintSpecialAttackJumpReadyNoResource")
                else
                    FireEvent("W_SprintSpecialAttackJumpReady")
                end
            elseif spAtkType == SP_ATK_TYPE_103 and g_enableSpAttaclkJump == FALSE then
                FireEvent("W_SprintSpecialAttackNoResource")
            else
                FireEvent("W_SprintSpecialAttack")
            end
        elseif spAtkType == SP_ATK_TYPE_101 then
            local stickAngle = hkbGetVariable("AttackAngle")
            local stickLevel = hkbGetVariable("AttackStickLevel")
            _set2DirStepDir(stickAngle, stickLevel)
            if env(IsSpEffectBehaviorRefID, SP_EF_REF_WEP_SP_ATK_UNLOCK_101_BACK_ATTACK) == FALSE then
                SetVariable("Selector_GroundJumpType", SELECTOR_GROUND_JUMP_TYPE_FORWARD)
            end
            FireEvent("W_GroundSpecialAttackStep")
        elseif spAtkType == SP_ATK_TYPE_104 then
            FireEvent("W_GroundSpacialAttackHoldStart")
        elseif spAtkType == SP_ATK_TYPE_107 then
            if env(IsLocked) == TRUE then
                SetVariable("Selector_GroundJumpType", SELECTOR_GROUND_JUMP_TYPE_FORWARD_LOCKON)
                act(LockHomingAction, 0)
            end
            FireEvent("W_GroundSpecialAttackJumpReady")
        elseif spAtkType == SP_ATK_TYPE_110 then
            g_airSpecialAttackCount = g_airSpecialAttackCount + 1
            if env(IsLocked) == TRUE then
                SetVariable("Selector_GroundJumpType", SELECTOR_GROUND_JUMP_TYPE_FORWARD_LOCKON)
                act(LockHomingAction, 0)
            end
            if g_enableSpAttaclkJump == FALSE then
                FireEvent("W_GroundSpecialAttackJumpReadyNoResource")
            else
                FireEvent("W_GroundSpecialAttackJumpReady")
            end
        elseif spAtkType == SP_ATK_TYPE_103 and g_enableSpAttaclkJump == FALSE then
            FireEvent("W_GroundSpecialAttackCombo1NoResource")
        else
            FireEvent("W_GroundSpecialAttackCombo1")
        end
        g_beforeSpAttackNum = spAtkType
    elseif next_behavior == BEH_A_GROUND_SP_ATTACK_RELEASE then
        _StartAutoAim()
        act(WeaponParameterReference, HAND_RIGHT)
        local enableAction = env(IsUserJumpRequest, ACTION_ARM_SPECIAL_ATTACK)
        local spAtkType = env(GetEquipWeaponSpecialCategoryNumber, HAND_RIGHT)
        if current_hkb_state == HKB_STATE_SPRINT_SPECIAL_ATTACK then
            FireEventNoReset("W_SprintSpecialAttackRelease")
        elseif current_hkb_state == HKB_STATE_GROUND_SPECIAL_ATTACK_COMBO_1 then
            FireEventNoReset("W_GroundSpecialAttackCombo1Release")
        elseif current_hkb_state == HKB_STATE_GROUND_SPECIAL_ATTACK_COMBO_2 then
            FireEventNoReset("W_GroundSpecialAttackCombo2Release")
        elseif current_hkb_state == HKB_STATE_GROUND_SPECIAL_ATTACK_COMBO_1_NO_RESOURCE then
            FireEventNoReset("W_GroundSpecialAttackCombo1ReleaseNoResource")
        elseif current_hkb_state == HKB_STATE_SPRINT_SPECIAL_ATTACK_NO_RESOURCE then
            FireEventNoReset("W_SprintSpecialAttackReleaseNoResource")
        elseif currentState == STATE_TYPE_STANDBY_ATK_HOLD or currentState == STATE_TYPE_ACTION_ATK_HOLD or currentState == STATE_TYPE_REACTION_ATK_HOLD then
            if env(IsSpEffectBehaviorRefID, SP_EF_REF_WEP_SP_ATK_UNLOCK_104_VARIATION_ATTACK) == TRUE then
                if spAtkType == SP_ATK_TYPE_104 and enableAction == FALSE then
                    FireEvent("W_GroundSpacialAttackHoldActionNoResource")
                else
                    FireEvent("W_GroundSpacialAttackHoldAction")
                end
            elseif spAtkType == SP_ATK_TYPE_104 and enableAction == FALSE then
                FireEvent("W_GroundSpecialAttackCombo1NoResource")
            else
                FireEvent("W_GroundSpecialAttackCombo1")
            end
        end
    elseif next_behavior == BEH_A_GROUND_SP_ATTACK_GUARD_RELEASE then
        act(WeaponParameterReference, HAND_RIGHT)
        local spAtkType = env(GetEquipWeaponSpecialCategoryNumber, HAND_RIGHT)
        if spAtkType == SP_ATK_TYPE_104 then
            FireEventNoReset("W_GroundSpacialAttackHoldEnd")
        else
            ResetRequest()
        end
    elseif next_behavior == BEH_A_GROUND_SUB_ATTACK_KAWARIMI then
        act(WeaponParameterReference, HAND_LEFT)
        _StartAutoAim()
        local subWeaponCategory = env(GetEquipWeaponCategory, HAND_LEFT)
        local enableCombo = FALSE
        if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_SUB_ATTACK_COMBO) == TRUE and g_beforeSubAttackType == subWeaponCategory then
            enableCombo = TRUE
        end
        g_beforeSubAttackType = subWeaponCategory
        if _isNonCombatMode() == TRUE then
            ResetRequest()
        elseif g_forceCrouch == TRUE and env("特殊効果発動中か_Behavior参照ID_寿命延長を厳密に取得", SP_EF_REF_AGING) == TRUE then
            ResetRequest()
        elseif subWeaponCategory == WEP_MOTION_CATEGORY_074 then
            if env(IsUserJumpRequest, ACTION_ARM_SHINOBI_WEP_ACTION) == TRUE then
                act(WeaponParameterReference, HAND_LEFT)
                if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_DOWN_KAWARIMI_CANCEL) == TRUE or env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_PRONE_DEATH) == TRUE then
                    FireEvent("W_SubAttackJumpProneReady")
                else
                    FireEvent("W_SubAttackJumpReady")
                end
            else
                SetVariable("AddSubWeaponBlend", 1)
                FireEvent("W_AddSubAttackJumpFailed")
            end
        end
    elseif next_behavior == BEH_A_GROUND_SUB_ATTACK then
        act(CloseMenuWhenUsingItem)
        act(WeaponParameterReference, HAND_LEFT)
        _StartAutoAim()
        local enableAction = env(IsUserJumpRequest, ACTION_ARM_SHINOBI_WEP_ACTION)
        local subWeaponCategory = env(GetEquipWeaponCategory, HAND_LEFT)
        local enableCombo = FALSE
        if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_SUB_ATTACK_COMBO) == TRUE and g_beforeSubAttackType == subWeaponCategory then
            enableCombo = TRUE
        end
        g_beforeSubAttackType = subWeaponCategory
        if _isNonCombatMode() == TRUE then
            ResetRequest()
        elseif g_forceCrouch == TRUE and env("特殊効果発動中か_Behavior参照ID_寿命延長を厳密に取得", SP_EF_REF_AGING) == TRUE then
            ResetRequest()
        elseif subWeaponCategory ~= WEP_MOTION_CATEGORY_070 and subWeaponCategory ~= WEP_MOTION_CATEGORY_071 and subWeaponCategory ~= WEP_MOTION_CATEGORY_072 and subWeaponCategory ~= WEP_MOTION_CATEGORY_073 and subWeaponCategory ~= WEP_MOTION_CATEGORY_074 and subWeaponCategory ~= WEP_MOTION_CATEGORY_075 and subWeaponCategory ~= WEP_MOTION_CATEGORY_076 and subWeaponCategory ~= WEP_MOTION_CATEGORY_077 and subWeaponCategory ~= WEP_MOTION_CATEGORY_078 and subWeaponCategory ~= WEP_MOTION_CATEGORY_079 or enableAction == FALSE and subWeaponCategory ~= WEP_MOTION_CATEGORY_075 and subWeaponCategory ~= WEP_MOTION_CATEGORY_077 and subWeaponCategory ~= WEP_MOTION_CATEGORY_078 or currentStyle == STYLE_TYPE_HANG and subWeaponCategory ~= WEP_MOTION_CATEGORY_079 or current_hkb_state == HKB_STATE_GROUND_SUB_ATTACK_GUARD_END_TO_SUB_ATTACK_FAILED or enableAction == FALSE and subWeaponCategory == WEP_MOTION_CATEGORY_077 and env(IsSpEffectBehaviorRefID, SP_EF_REF_USED_TEKIMAWASHI) == FALSE or enableAction == FALSE and subWeaponCategory == WEP_MOTION_CATEGORY_078 and enableCombo == FALSE then
            if g_forceCrouch == TRUE or env(IsSpEffectBehaviorRefID, SP_EF_REF_ENABLE_ADD_SUBATTACK_FAILED) == TRUE then
                SetVariable("AddSubWeaponBlend", 1)
                FireEvent("W_AddSubAttackFailed")
            elseif g_forceCrouch == FALSE then
                if currentStyle == STYLE_TYPE_HANG then
                    local edgeType = env(GetDockingEdgeRequest)
                    if edgeType == HANG_EDGE_TYPE_DISABLE_HOLD_FOOT then
                        FireEvent("W_HangSubAttackFailed")
                    else
                        FireEvent("W_HangFootHoldSubAttackFailed")
                    end
                elseif currentStyle == STYLE_TYPE_COVER_LOOK then
                    FireEvent("W_CoverActionSubAttackFailed")
                else
                    FireEvent("W_SubAttackFailed")
                end
            end
        elseif subWeaponCategory == WEP_MOTION_CATEGORY_070 then
            if currentStyle == STYLE_TYPE_SPRINT or env(IsSpEffectBehaviorRefID, SP_EF_REF_ENABLE_SPRINT_ACTION) == TRUE then
                FireEvent("W_SprintSubAttack")
            elseif currentStyle == STYLE_TYPE_CROUCH then
                if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_TRANSITION_SUB_ATTACK_COMBO_1_WP070) == TRUE then
                    FireEvent("W_CrouchSubAttackCombo1")
                elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_TRANSITION_SUB_ATTACK_COMBO_2_WP070) == TRUE then
                    FireEvent("W_CrouchSubAttackCombo2")
                elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_TRANSITION_SUB_ATTACK_COMBO_3_WP070) == TRUE then
                    FireEvent("W_CrouchSubAttackCombo3")
                else
                    FireEvent("W_CrouchSubAttackCombo1")
                end
            elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_TRANSITION_SUB_ATTACK_COMBO_1_WP070) == TRUE then
                FireEvent("W_GroundSubAttackCombo1")
            elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_TRANSITION_SUB_ATTACK_COMBO_2_WP070) == TRUE then
                FireEvent("W_GroundSubAttackCombo2")
            elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_TRANSITION_SUB_ATTACK_COMBO_3_WP070) == TRUE then
                FireEvent("W_GroundSubAttackCombo3")
            else
                FireEvent("W_GroundSubAttackCombo1")
            end
        elseif subWeaponCategory == WEP_MOTION_CATEGORY_071 then
            if currentStyle == STYLE_TYPE_SPRINT or env(IsSpEffectBehaviorRefID, SP_EF_REF_ENABLE_SPRINT_ACTION) == TRUE then
                FireEvent("W_SprintSubAttack")
            elseif currentStyle == STYLE_TYPE_CROUCH then
                FireEvent("W_CrouchSubAttackCombo1")
            else
                FireEvent("W_GroundSubAttackCombo1")
            end
        elseif subWeaponCategory == WEP_MOTION_CATEGORY_072 then
            if g_forceCrouch == TRUE then
                ResetRequest()
            elseif currentStyle == STYLE_TYPE_SPRINT or env(IsSpEffectBehaviorRefID, SP_EF_REF_ENABLE_SPRINT_ACTION) == TRUE then
                FireEvent("W_SprintSubAttack")
            elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_WEP_FORCE_SUB_ATTACK_RELEASE) == FALSE and env(IsSpEffectBehaviorRefID, SP_EF_REF_WEP_ENABLE_SUB_ATTACK_HOLD) == TRUE and enableCombo == TRUE then
                FireEvent("W_GroundSubAttackHoldStart")
            else
                FireEvent("W_GroundSubAttackCombo1")
            end
        elseif subWeaponCategory == WEP_MOTION_CATEGORY_073 then
            if g_forceCrouch == TRUE then
                ResetRequest()
            elseif enableCombo == TRUE then
                FireEvent("W_GroundSubAttackCombo2")
            elseif currentStyle == STYLE_TYPE_SPRINT or env(IsSpEffectBehaviorRefID, SP_EF_REF_ENABLE_SPRINT_ACTION) == TRUE then
                FireEvent("W_SprintSubAttack")
            else
                FireEvent("W_GroundSubAttackCombo1")
            end
        elseif subWeaponCategory == WEP_MOTION_CATEGORY_074 then
            if g_forceCrouch == TRUE then
                ResetRequest()
            elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_DAMAGE_AFTER_KAWARIMI_FROM_ADD_DAMAGE) == TRUE or env(IsSpEffectBehaviorRefID, SP_EF_REF_POISON) == TRUE or env(IsSpEffectBehaviorRefID, SP_EF_REF_BURN) == TRUE then
                act(WeaponParameterReference, HAND_LEFT)
                FireEvent("W_SubAttackJumpReady")
            elseif currentStyle == STYLE_TYPE_SPRINT or env(IsSpEffectBehaviorRefID, SP_EF_REF_ENABLE_SPRINT_ACTION) == TRUE then
                FireEvent("W_SprintToSubAttackJumpAtemiReady")
            else
                FireEvent("W_SubAttackJumpAtemiReady")
            end
        elseif subWeaponCategory == WEP_MOTION_CATEGORY_075 then
            if g_forceCrouch == TRUE then
                ResetRequest()
            elseif enableAction == TRUE and (currentStyle == STYLE_TYPE_SPRINT or env(IsSpEffectBehaviorRefID, SP_EF_REF_ENABLE_SPRINT_ACTION) == TRUE) then
                FireEvent("W_SprintSubAttack")
            elseif enableCombo == TRUE then
                if env(IsSpEffectBehaviorRefID, SP_EF_REF_WEP_DISABLE_DERIVE_SUB_ATTACK_COMBO) == FALSE and (current_hkb_state == HKB_STATE_GROUND_SUB_ATTACK_DERIVE_ATTACK_COMBO_1 or current_hkb_state == HKB_STATE_GROUND_SUB_ATTACK_DERIVE_DIRECTIVITY_ATTACK) then
                    FireEvent("W_GroundDeriveSubAttackCombo1")
                elseif current_hkb_state == HKB_STATE_GROUND_SUB_ATTACK_COMBO_1 or current_hkb_state == HKB_STATE_LAND_AIR_SUB_ATTACK_COMBO_1 or current_hkb_state == HKB_STATE_SPRINT_SUB_ATTACK then
                    FireEvent("W_GroundSubAttackCombo2")
                elseif enableAction == TRUE and current_hkb_state == HKB_STATE_GROUND_SUB_ATTACK_COMBO_2 then
                    FireEvent("W_GroundSubAttackCombo3")
                elseif current_hkb_state == HKB_STATE_GROUND_SUB_ATTACK_COMBO_3 then
                    FireEvent("W_GroundSubAttackCombo4")
                elseif enableAction == TRUE and current_hkb_state == HKB_STATE_GROUND_SUB_ATTACK_COMBO_4 then
                    FireEvent("W_GroundSubAttackCombo5")
                elseif current_hkb_state == HKB_STATE_GROUND_SUB_ATTACK_COMBO_5 then
                    FireEvent("W_GroundSubAttackCombo6")
                elseif enableAction == TRUE and current_hkb_state == HKB_STATE_GROUND_DERIVE_SUB_ATTACK_COMBO_1 then
                    FireEvent("W_GroundDeriveSubAttackCombo2")
                elseif current_hkb_state == HKB_STATE_GROUND_DERIVE_SUB_ATTACK_COMBO_2 then
                    FireEvent("W_GroundDeriveSubAttackCombo3")
                elseif enableAction == TRUE and current_hkb_state == HKB_STATE_GROUND_DERIVE_SUB_ATTACK_COMBO_3 then
                    FireEvent("W_GroundDeriveSubAttackCombo4")
                elseif current_hkb_state == HKB_STATE_GROUND_DERIVE_SUB_ATTACK_COMBO_4 then
                    FireEvent("W_GroundDeriveSubAttackCombo5")
                elseif enableAction == TRUE and current_hkb_state == HKB_STATE_GROUND_DERIVE_SUB_ATTACK_COMBO_5 then
                    FireEvent("W_GroundDeriveSubAttackCombo6")
                elseif enableAction == TRUE then
                    FireEvent("W_GroundSubAttackCombo1")
                elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_ENABLE_ADD_SUBATTACK_FAILED) == TRUE then
                    SetVariable("AddSubWeaponBlend", 1)
                    FireEvent("W_AddSubAttackFailed")
                else
                    FireEvent("W_SubAttackFailed")
                end
            elseif enableAction == TRUE then
                FireEvent("W_GroundSubAttackCombo1")
            elseif g_forceCrouch == TRUE or env(IsSpEffectBehaviorRefID, SP_EF_REF_ENABLE_ADD_SUBATTACK_FAILED) == TRUE then
                SetVariable("AddSubWeaponBlend", 1)
                FireEvent("W_AddSubAttackFailed")
            elseif g_forceCrouch == FALSE then
                FireEvent("W_SubAttackFailed")
            end
        elseif subWeaponCategory == WEP_MOTION_CATEGORY_076 then
            if g_forceCrouch == TRUE then
                ResetRequest()
            elseif currentStyle == STYLE_TYPE_SPRINT then
                FireEvent("W_SprintToSubAttackGuardStart")
            elseif currentStyle == STYLE_TYPE_CROUCH then
                FireEvent("W_CrouchSubAttackGuardStart")
            else
                FireEvent("W_GroundSubAttackGuardStart")
            end
        elseif subWeaponCategory == WEP_MOTION_CATEGORY_077 then
            if g_forceCrouch == TRUE then
            elseif currentStyle == STYLE_TYPE_SPRINT or env(IsSpEffectBehaviorRefID, SP_EF_REF_ENABLE_SPRINT_ACTION) == TRUE then
                if g_forceCrouch == TRUE then
                    ResetRequest()
                elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_USED_TEKIMAWASHI) == TRUE then
                    FireEvent("W_SprintToSubAttackSpecialEffect")
                else
                    FireEvent("W_SprintSubAttack")
                end
            elseif g_forceCrouch == TRUE then
                ResetRequest()
            elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_USED_TEKIMAWASHI) == TRUE then
                FireEvent("W_GroundSubAttackSpecialEffect")
            else
                FireEvent("W_GroundSubAttackCombo1")
            end
        elseif subWeaponCategory == WEP_MOTION_CATEGORY_078 then
            if g_forceCrouch == TRUE then
                ResetRequest()
            elseif currentStyle == STYLE_TYPE_SPRINT or env(IsSpEffectBehaviorRefID, SP_EF_REF_ENABLE_SPRINT_ACTION) == TRUE then
                if env(IsSpEffectBehaviorRefID, SP_EF_REF_WEP_ENABLE_SUB_ATTACK_VARIATION) == TRUE then
                    FireEvent("W_SprintToSubAttackVariation")
                else
                    FireEvent("W_SprintSubAttack")
                end
            elseif enableCombo == TRUE and (current_hkb_state == HKB_STATE_GROUND_SUB_ATTACK_COMBO_1 or current_hkb_state == HKB_STATE_GROUND_SUB_ATTACK_COMBO_1_RELEASE or current_hkb_state == HKB_STATE_SPRINT_SUB_ATTACK or current_hkb_state == HKB_STATE_SPRINT_TO_SUB_ATTACK_RELEASE or current_hkb_state == HKB_STATE_LAND_AIR_SUB_ATTACK_COMBO_1 or current_hkb_state == HKB_STATE_GROUND_SUB_ATTACK_VARIATION_COMBO_1_RELEASE or current_hkb_state == HKB_STATE_SPRINT_TO_SUB_ATTACK_VARIATION_RELEASE or current_hkb_state == HKB_STATE_LAND_AIR_SUB_ATTACK_COMBO_1_VARIATION) then
                FireEvent("W_GroundSubAttackCombo2")
            elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_WEP_ENABLE_SUB_ATTACK_VARIATION) == TRUE then
                FireEvent("W_GroundSubAttackVariationCombo1")
            else
                FireEvent("W_GroundSubAttackCombo1")
            end
        elseif subWeaponCategory == WEP_MOTION_CATEGORY_079 then
            if currentStyle == STYLE_TYPE_CROUCH then
                SetVariable("StartTime_01", 0)
                if env(IsLocked) == TRUE then
                    FireEvent("W_CrouchSubAttackLockOnMoveable")
                else
                    FireEvent("W_CrouchSubAttackCombo1Moveable")
                end
            elseif currentStyle == STYLE_TYPE_HANG then
                local edgeType = env(GetDockingEdgeRequest)
                if edgeType == HANG_EDGE_TYPE_DISABLE_HOLD_FOOT then
                    if env(IsLocked) == TRUE then
                        FireEvent("W_HangSubAttackLockOn")
                    else
                        FireEvent("W_HangSubAttackCombo1")
                    end
                elseif env(IsLocked) == TRUE then
                    FireEvent("W_HangFootHoldSubAttackLockOn")
                else
                    FireEvent("W_HangFootHoldSubAttackCombo1")
                end
            elseif currentStyle == STYLE_TYPE_COVER_LOOK then
                if env(IsLocked) == TRUE then
                    FireEvent("W_CoverActionSubAttackLockOn")
                else
                    FireEvent("W_CoverActionSubAttackCombo1")
                end
            elseif GetLocomotionType() == LOCOMOTION_TYPE_MOVE then
                SetVariable("StartTime_02", env(GetVariableChangeValue, 2) / 1000)
                SetVariable("StartTime_01", 0)
                if env(IsLocked) == TRUE then
                    FireEvent("W_GroundSubAttackLockOnMove")
                else
                    FireEvent("W_GroundSubAttackCombo1Move")
                end
            else
                SetVariable("StartTime_01", 0)
                if env(IsLocked) == TRUE then
                    FireEvent("W_GroundSubAttackLockOnMoveable")
                else
                    FireEvent("W_GroundSubAttackCombo1Moveable")
                end
            end
        elseif g_forceCrouch == FALSE then
            FireEvent("W_GroundSubAttackCombo1")
        end
    elseif next_behavior == BEH_A_GROUND_SUB_ATTACK_RELEASE then
        act(WeaponParameterReference, HAND_LEFT)
        _StartAutoAim()
        local subWeaponCategory = env(GetEquipWeaponCategory, HAND_LEFT)
        if subWeaponCategory == WEP_MOTION_CATEGORY_070 then
            if current_hkb_state == HKB_STATE_GROUND_SUB_ATTACK_COMBO_1 then
                FireEvent("W_GroundSubAttackCombo1Release")
            elseif current_hkb_state == HKB_STATE_GROUND_SUB_ATTACK_COMBO_2 then
                FireEvent("W_GroundSubAttackCombo2Release")
            elseif current_hkb_state == HKB_STATE_GROUND_SUB_ATTACK_COMBO_3 then
                FireEvent("W_GroundSubAttackCombo3Release")
            elseif current_hkb_state == HKB_STATE_CROUCH_SUB_ATTACK_COMBO_1 then
                FireEvent("W_CrouchSubAttackCombo1Release")
            elseif current_hkb_state == HKB_STATE_CROUCH_SUB_ATTACK_COMBO_2 then
                FireEvent("W_CrouchSubAttackCombo2Release")
            elseif current_hkb_state == HKB_STATE_CROUCH_SUB_ATTACK_COMBO_3 then
                FireEvent("W_CrouchSubAttackCombo3Release")
            elseif current_hkb_state == HKB_STATE_SPRINT_SUB_ATTACK then
                FireEvent("W_SprintToSubAttackRelease")
            end
        elseif subWeaponCategory == WEP_MOTION_CATEGORY_071 then
            if current_hkb_state == HKB_STATE_GROUND_SUB_ATTACK_COMBO_1 then
                FireEvent("W_GroundSubAttackCombo1Release")
            elseif current_hkb_state == HKB_STATE_CROUCH_SUB_ATTACK_COMBO_1 then
                FireEvent("W_CrouchSubAttackCombo1Release")
            elseif current_hkb_state == HKB_STATE_SPRINT_SUB_ATTACK then
                FireEvent("W_SprintToSubAttackRelease")
            end
        elseif subWeaponCategory == WEP_MOTION_CATEGORY_076 then
            FireEvent("W_GroundSubAttackGuardEnd")
        elseif subWeaponCategory == WEP_MOTION_CATEGORY_079 then
            if currentStyle == STYLE_TYPE_CROUCH then
                if GetLocomotionType() == LOCOMOTION_TYPE_MOVE then
                    SetVariable("StartTime_02", env(GetVariableChangeValue, 2) / 1000)
                    SetVariable("StartTime_01", 0)
                    if env(IsLocked) == TRUE then
                        FireEvent("W_CrouchSubAttackLockOnReleaseMove")
                    else
                        FireEvent("W_CrouchSubAttackCombo1ReleaseMove")
                    end
                else
                    SetVariable("StartTime_01", 0)
                    if env(IsLocked) == TRUE then
                        FireEvent("W_CrouchSubAttackLockOnReleaseMoveable")
                    else
                        FireEvent("W_CrouchSubAttackCombo1ReleaseMoveable")
                    end
                end
            elseif GetLocomotionType() == LOCOMOTION_TYPE_MOVE then
                SetVariable("StartTime_02", env(GetVariableChangeValue, 2) / 1000)
                SetVariable("StartTime_01", 0)
                if env(IsLocked) == TRUE then
                    FireEvent("W_GroundSubAttackLockOnReleaseMove")
                else
                    FireEvent("W_GroundSubAttackCombo1ReleaseMove")
                end
            else
                SetVariable("StartTime_01", 0)
                if env(IsLocked) == TRUE then
                    FireEvent("W_GroundSubAttackLockOnReleaseMoveable")
                else
                    FireEvent("W_GroundSubAttackCombo1ReleaseMoveable")
                end
            end
        elseif subWeaponCategory == WEP_MOTION_CATEGORY_072 then
            if current_hkb_state == HKB_STATE_SPRINT_SUB_ATTACK then
                FireEvent("W_SprintToSubAttackRelease")
            elseif current_hkb_state == HKB_STATE_GROUND_SUB_ATTACK_HOLD_START or current_hkb_state == HKB_STATE_GROUND_SUB_ATTACK_HOLD_LOOP or current_hkb_state == HKB_STATE_GROUND_SUB_ATTACK_HOLD_MOVE then
                FireEvent("W_GroundSubAttackHoldEnd")
            else
                FireEvent("W_GroundSubAttackCombo1Release")
            end
        elseif subWeaponCategory == WEP_MOTION_CATEGORY_078 then
            if current_hkb_state == HKB_STATE_SPRINT_SUB_ATTACK then
                FireEvent("W_SprintToSubAttackRelease")
            elseif current_hkb_state == HKB_STATE_SPRINT_TO_SUB_ATTACK_VARIATION then
                FireEvent("W_SprintToSubAttackVariationRelease")
            elseif current_hkb_state == HKB_STATE_GROUND_SUB_ATTACK_VARIATION_COMBO_1 then
                FireEvent("W_GroundSubAttackVariationCombo1Release")
            elseif current_hkb_state == HKB_STATE_GROUND_SUB_ATTACK_COMBO_1 then
                FireEvent("W_GroundSubAttackCombo1Release")
            end
        elseif subWeaponCategory == WEP_MOTION_CATEGORY_073 then
            if current_hkb_state == HKB_STATE_SPRINT_SUB_ATTACK then
                FireEvent("W_SprintToSubAttackRelease")
            else
                FireEvent("W_GroundSubAttackCombo1Release")
            end
        end
    elseif next_behavior == BEH_A_GROUND_SUB_GUARD_RELEASE_CONNECT then
        act(WeaponParameterReference, HAND_LEFT)
        local subWeaponCategory = env(GetEquipWeaponCategory, HAND_LEFT)
        if subWeaponCategory == WEP_MOTION_CATEGORY_076 then
            FireEvent("W_GroundSubAttackGuardEnd")
        end
        SetVariable("AddActionInputBlend", 1)
        if env(ActionRequest, ACTION_ARM_WIRE_SHOOT) == TRUE then
            FireEvent("W_AddActionInputWireShoot")
        elseif env(ActionRequest, ACTION_ARM_JUMP) == TRUE then
            FireEvent("W_AddActionInputJump")
        elseif env(ActionRequest, ACTION_ARM_GUARD) == TRUE then
            FireEvent("W_AddActionInputGuard")
        elseif env(ActionRequest, ACTION_ARM_ATTACK) == TRUE then
            FireEvent("W_AddActionInputAttack")
        elseif env(ActionRequest, ACTION_ARM_SP_MOVE) == TRUE then
            FireEvent("W_AddActionInputKick")
        elseif env(ActionRequest, ACTION_ARM_WALL_HANG) == TRUE then
            FireEvent("W_AddActionInputWallHang")
        elseif env(ActionRequest, ACTION_ARM_CROUCH) == TRUE then
            FireEvent("W_AddActionInputCrouch")
        elseif env(ActionRequest, ACTION_ARM_USE_ITEM) == TRUE then
            FireEvent("W_AddActionInputUseItem")
        elseif env(ActionRequest, ACTION_ARM_CHANGE_WEAPON_L) == TRUE then
            FireEvent("W_AddActionInputSubWeaponChange")
        end
    elseif next_behavior == BEH_A_ITEM_USE then
        if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_USE_ITEM) == TRUE then
            SetVariable("AddActionInputBlend", 0)
        end
        if env(IsSpEffectBehaviorRefID, SP_EF_REF_DISABLE_USE_ITEM_REQUEST) == TRUE or env(IsSpEffectBehaviorRefID, SP_EF_REF_DISABLE_ALL_INPUT) == TRUE then
            ResetRequest()
        elseif env(IsItemUseMenuOpened) == TRUE then
            ResetRequest()
        elseif env(IsItemUseMenuOpen) == TRUE then
            local fixItem = TRUE
            if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_USE_ITEM) == TRUE and (current_hkb_state == HKB_STATE_COVER_END or current_hkb_state == HKB_STATE_HANG_TO_STAND or current_hkb_state == HKB_STATE_HANG_FOOT_HOLD_TO_STAND) then
                fixItem = FALSE
            end
            if fixItem == TRUE then
                act(UseItemDecision)
            end
            if currentStyle == STYLE_TYPE_COVER or currentStyle == STYLE_TYPE_COVER_LOOK then
                local edgeType = env(GetDockingEdgeRequest)
                if edgeType == COVER_EDGE_TYPE_PEAK_MOVE_DISABLE_LOOK or edgeType == COVER_EDGE_TYPE_PEAK_MOVE_FREE_LOOK or edgeType == COVER_EDGE_TYPE_PEAK_MOVE_LEFT_LOOK_ONLY or edgeType == COVER_EDGE_TYPE_PEAK_MOVE_RIGHT_LOOK_ONLY then
                    ResetRequest()
                else
                    if currentStyle == STYLE_TYPE_COVER_LOOK then
                        FireEventNoReset("W_CoverEndFromCoverLook")
                    else
                        FireEvent("W_CoverEnd")
                    end
                    SetVariable("AddActionInputBlend", 1)
                    FireEvent("W_AddActionInputUseItem")
                end
            elseif currentStyle == STYLE_TYPE_HANG then
                if env(IsHangAndClimbPossible) == TRUE then
                    local edgeType = env(GetDockingEdgeRequest)
                    if edgeType == HANG_EDGE_TYPE_DISABLE_HOLD_FOOT then
                        FireEvent("W_HangToStand")
                    else
                        FireEvent("W_HangFootHoldToStand")
                    end
                    SetVariable("AddActionInputBlend", 1)
                    FireEvent("W_AddActionInputUseItem")
                else
                    ResetRequest()
                end
            else
                act(OpenMenuWhenUsingItem)
            end
            ResetRequest()
        else
            local fixItem = TRUE
            if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_USE_ITEM) == TRUE and (current_hkb_state == HKB_STATE_COVER_END or current_hkb_state == HKB_STATE_HANG_TO_STAND or current_hkb_state == HKB_STATE_HANG_FOOT_HOLD_TO_STAND) then
                fixItem = FALSE
            end
            if fixItem == TRUE then
                act(UseItemDecision)
            end
            act(WeaponParameterReference, HAND_RIGHT)
            act(SetIsItemAnimationPlaying)
            local itemUseEnable = env(IsItemUseable)
            local itemAnimeType = env(GetItemAnimType)
            local edgeType = env(GetDockingEdgeRequest)
            local itemNoChange = TRUE
            if itemAnimeType ~= g_beforeItemAnmType and (g_beforeItemAnmType ~= ITEM_GOURD_RECOVER or itemAnimeType ~= ITEM_GOURD_RECOVER_EMPTY) and (g_beforeItemAnmType ~= ITEM_GOURD_ANTI_POISON or itemAnimeType ~= ITEM_GOURD_ANTI_POISON_EMPTY) and (g_beforeItemAnmType ~= ITEM_GOURD_ANTI_FLAME or itemAnimeType ~= ITEM_GOURD_ANTI_FLAME_EMPTY) and (g_beforeItemAnmType ~= ITEM_GOURD_ANTI_INSANE or itemAnimeType ~= ITEM_GOURD_ANTI_INSANE_EMPTY) and (g_beforeItemAnmType ~= ITEM_GOURD_COLORED_RICE or itemAnimeType ~= ITEM_GOURD_COLORED_RICE_EMPTY) and (g_beforeItemAnmType ~= ITEM_GOURD_RESERVE_1 or itemAnimeType ~= ITEM_GOURD_RESERVE_1_EMPTY) and (g_beforeItemAnmType ~= ITEM_GOURD_RESERVE_2 or itemAnimeType ~= ITEM_GOURD_RESERVE_2_EMPTY) and (g_beforeItemAnmType ~= ITEM_GOURD_RESERVE_3 or itemAnimeType ~= ITEM_GOURD_RESERVE_3_EMPTY) and (g_beforeItemAnmType ~= ITEM_GOURD_RESERVE_4 or itemAnimeType ~= ITEM_GOURD_RESERVE_4_EMPTY) and (g_beforeItemAnmType ~= ITEM_GOURD_RESERVE_5 or itemAnimeType ~= ITEM_GOURD_RESERVE_5_EMPTY) then
                itemNoChange = FALSE
            end
            g_beforeItemAnmType = itemAnimeType
            if g_forceCrouch == TRUE and env("特殊効果発動中か_Behavior参照ID_寿命延長を厳密に取得", SP_EF_REF_AGING) == TRUE then
                if itemAnimeType == ITEM_UNIQUE_RESERVE_1 then
                    FireEvent("W_CrouchItemReturnStatue")
                else
                    ResetRequest()
                end
            elseif itemUseEnable == FALSE or itemAnimeType == -1 or itemAnimeType == ITEM_INVALID then
                local edgeType = env(GetDockingEdgeRequest)
                if currentStyle == STYLE_TYPE_SWIM then
                    ResetRequest()
                elseif currentStyle == STYLE_TYPE_DIVE then
                    ResetRequest()
                elseif currentStyle == STYLE_TYPE_COVER_LOOK then
                    FireEvent("W_CoverActionItemFailed")
                elseif currentStyle == STYLE_TYPE_HANG then
                    ResetRequest()
                elseif currentStyle == STYLE_TYPE_COVER and (edgeType == COVER_EDGE_TYPE_PEAK_MOVE_DISABLE_LOOK or edgeType == COVER_EDGE_TYPE_PEAK_MOVE_FREE_LOOK or edgeType == COVER_EDGE_TYPE_PEAK_MOVE_LEFT_LOOK_ONLY or edgeType == COVER_EDGE_TYPE_PEAK_MOVE_RIGHT_LOOK_ONLY) then
                    ResetRequest()
                elseif currentStyle == STYLE_TYPE_CROUCH then
                    SetVariable("StartTime_01", 0)
                    FireEvent("W_CrouchItemFailed")
                else
                    SetVariable("StartTime_01", 0)
                    FireEvent("W_ItemFailed")
                end
            elseif currentStyle == STYLE_TYPE_COVER or currentStyle == STYLE_TYPE_COVER_LOOK and itemAnimeType ~= ITEM_THROW_POTTERY and itemAnimeType ~= ITEM_THROW_ASH_BAG then
                local edgeType = env(GetDockingEdgeRequest)
                if edgeType == COVER_EDGE_TYPE_PEAK_MOVE_DISABLE_LOOK or edgeType == COVER_EDGE_TYPE_PEAK_MOVE_FREE_LOOK or edgeType == COVER_EDGE_TYPE_PEAK_MOVE_LEFT_LOOK_ONLY or edgeType == COVER_EDGE_TYPE_PEAK_MOVE_RIGHT_LOOK_ONLY then
                    ResetRequest()
                else
                    if currentStyle == STYLE_TYPE_COVER_LOOK then
                        FireEventNoReset("W_CoverEndFromCoverLook")
                    else
                        FireEvent("W_CoverEnd")
                    end
                    SetVariable("AddActionInputBlend", 1)
                    FireEvent("W_AddActionInputUseItem")
                end
            elseif currentStyle == STYLE_TYPE_HANG and itemAnimeType ~= ITEM_THROW_POTTERY and itemAnimeType ~= ITEM_THROW_ASH_BAG then
                ResetRequest()
            elseif itemAnimeType == ITEM_GOURD_RECOVER or itemAnimeType == ITEM_GOURD_ANTI_POISON or itemAnimeType == ITEM_GOURD_ANTI_FLAME or itemAnimeType == ITEM_GOURD_ANTI_INSANE or itemAnimeType == ITEM_GOURD_RESERVE_1 or itemAnimeType == ITEM_GOURD_RESERVE_2 or itemAnimeType == ITEM_GOURD_RESERVE_3 or itemAnimeType == ITEM_GOURD_RESERVE_4 or itemAnimeType == ITEM_GOURD_RESERVE_5 then
                if itemAnimeType == ITEM_GOURD_RECOVER or itemAnimeType == ITEM_GOURD_ANTI_POISON or itemAnimeType == ITEM_GOURD_ANTI_FLAME or itemAnimeType == ITEM_GOURD_ANTI_INSANE then
                    act(AINotifyAttackType, AI_INTERUPT_USE_ITEM)
                end
                if currentStyle == STYLE_TYPE_SWIM then
                    if (current_hkb_state == HKB_STATE_SWIM_ITEM_GOURD_DRINK or current_hkb_state == HKB_STATE_SWIM_ITEM_GOURD_DRINK_REPEAT) and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ITEM_REPEAT) == TRUE and itemNoChange == TRUE then
                        FireEvent("W_SwimItemGourdDrinkRepeat")
                    else
                        FireEvent("W_SwimItemGourdDrink")
                    end
                elseif currentStyle == STYLE_TYPE_DIVE then
                    if (current_hkb_state == HKB_STATE_DIVE_ITEM_GOURD_DRINK or current_hkb_state == HKB_STATE_DIVE_ITEM_GOURD_DRINK_REPEAT) and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ITEM_REPEAT) == TRUE and itemNoChange == TRUE then
                        FireEvent("W_DiveItemGourdDrinkRepeat")
                    else
                        FireEvent("W_DiveItemGourdDrink")
                    end
                elseif currentStyle == STYLE_TYPE_CROUCH then
                    if (current_hkb_state == HKB_STATE_CROUCH_ITEM_GOURD_DRINK or current_hkb_state == HKB_STATE_CROUCH_ITEM_GOURD_DRINK_MOVE or current_hkb_state == HKB_STATE_CROUCH_ITEM_GOURD_DRINK_REPEAT or current_hkb_state == HKB_STATE_CROUCH_ITEM_GOURD_DRINK_REPEAT_MOVE) and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ITEM_REPEAT) == TRUE and itemNoChange == TRUE then
                        SetVariable("StartTime_01", 0)
                        FireEvent("W_CrouchItemGourdDrinkRepeat")
                    else
                        SetVariable("StartTime_01", 0)
                        FireEvent("W_CrouchItemGourdDrink")
                    end
                elseif (current_hkb_state == HKB_STATE_ITEM_GOURD_DRINK or current_hkb_state == HKB_STATE_ITEM_GOURD_DRINK_MOVE or current_hkb_state == HKB_STATE_ITEM_GOURD_DRINK_REPEAT or current_hkb_state == HKB_STATE_ITEM_GOURD_DRINK_REPEAT_MOVE) and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ITEM_REPEAT) == TRUE and itemNoChange == TRUE then
                    if GetLocomotionType() == LOCOMOTION_TYPE_MOVE then
                        SetVariable("StartTime_02", env(GetVariableChangeValue, 2) / 1000)
                        SetVariable("StartTime_01", 0)
                        FireEvent("W_ItemGourdDrinkRepeatMove")
                    else
                        SetVariable("StartTime_01", 0)
                        FireEvent("W_ItemGourdDrinkRepeat")
                    end
                elseif GetLocomotionType() == LOCOMOTION_TYPE_MOVE then
                    SetVariable("StartTime_02", env(GetVariableChangeValue, 2) / 1000)
                    SetVariable("StartTime_01", 0)
                    FireEvent("W_ItemGourdDrinkMove")
                else
                    SetVariable("StartTime_01", 0)
                    FireEvent("W_ItemGourdDrink")
                end
            elseif itemAnimeType == ITEM_GOURD_RECOVER_EMPTY or itemAnimeType == ITEM_GOURD_ANTI_POISON_EMPTY or itemAnimeType == ITEM_GOURD_ANTI_FLAME_EMPTY or itemAnimeType == ITEM_GOURD_ANTI_INSANE_EMPTY or itemAnimeType == ITEM_GOURD_RESERVE_1_EMPTY or itemAnimeType == ITEM_GOURD_RESERVE_2_EMPTY or itemAnimeType == ITEM_GOURD_RESERVE_3_EMPTY or itemAnimeType == ITEM_GOURD_RESERVE_4_EMPTY or itemAnimeType == ITEM_GOURD_RESERVE_5_EMPTY then
                if currentStyle == STYLE_TYPE_SWIM then
                    if (current_hkb_state == HKB_STATE_SWIM_ITEM_GOURD_DRINK or current_hkb_state == HKB_STATE_SWIM_ITEM_GOURD_DRINK_REPEAT) and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ITEM_REPEAT) == TRUE and itemNoChange == TRUE then
                        FireEvent("W_SwimItemGourdDrinkRepeatEmpty")
                    else
                        FireEvent("W_SwimItemGourdDrinkEmpty")
                    end
                elseif currentStyle == STYLE_TYPE_DIVE then
                    if (current_hkb_state == HKB_STATE_DIVE_ITEM_GOURD_DRINK or current_hkb_state == HKB_STATE_DIVE_ITEM_GOURD_DRINK_REPEAT) and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ITEM_REPEAT) == TRUE and itemNoChange == TRUE then
                        FireEvent("W_DiveItemGourdDrinkRepeatEmpty")
                    else
                        FireEvent("W_DiveItemGourdDrinkEmpty")
                    end
                elseif currentStyle == STYLE_TYPE_CROUCH then
                    if (current_hkb_state == HKB_STATE_CROUCH_ITEM_GOURD_DRINK or current_hkb_state == HKB_STATE_CROUCH_ITEM_GOURD_DRINK_MOVE or current_hkb_state == HKB_STATE_CROUCH_ITEM_GOURD_DRINK_REPEAT or current_hkb_state == HKB_STATE_CROUCH_ITEM_GOURD_DRINK_REPEAT_MOVE) and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ITEM_REPEAT) == TRUE and itemNoChange == TRUE then
                        SetVariable("StartTime_01", 0)
                        FireEvent("W_CrouchItemGourdDrinkRepeatFailed")
                    else
                        SetVariable("StartTime_01", 0)
                        FireEvent("W_CrouchItemGourdDrinkFailed")
                    end
                elseif (current_hkb_state == HKB_STATE_ITEM_GOURD_DRINK or current_hkb_state == HKB_STATE_ITEM_GOURD_DRINK_MOVE or current_hkb_state == HKB_STATE_ITEM_GOURD_DRINK_REPEAT or current_hkb_state == HKB_STATE_ITEM_GOURD_DRINK_REPEAT_MOVE) and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ITEM_REPEAT) == TRUE and itemNoChange == TRUE then
                    SetVariable("StartTime_01", 0)
                    FireEvent("W_ItemGourdDrinkRepeatFailed")
                else
                    SetVariable("StartTime_01", 0)
                    FireEvent("W_ItemGourdDrinkFailed")
                end
            elseif itemAnimeType == ITEM_PILL_TONIC or itemAnimeType == ITEM_PILL_RESERVE_1 then
                if itemAnimeType == ITEM_PILL_TONIC then
                    act(AINotifyAttackType, AI_INTERUPT_USE_ITEM)
                end
                if currentStyle == STYLE_TYPE_SWIM then
                    ResetRequest()
                elseif currentStyle == STYLE_TYPE_DIVE then
                    ResetRequest()
                elseif currentStyle == STYLE_TYPE_CROUCH then
                    SetVariable("StartTime_01", 0)
                    FireEvent("W_CrouchItemPillTonic")
                elseif GetLocomotionType() == LOCOMOTION_TYPE_MOVE then
                    SetVariable("StartTime_02", env(GetVariableChangeValue, 2) / 1000)
                    SetVariable("StartTime_01", 0)
                    FireEvent("W_ItemPillTonicMove")
                else
                    SetVariable("StartTime_01", 0)
                    FireEvent("W_ItemPillTonic")
                end
            elseif itemAnimeType == ITEM_GOLD_0 then
                if currentStyle == STYLE_TYPE_SWIM then
                    ResetRequest()
                elseif currentStyle == STYLE_TYPE_DIVE then
                    ResetRequest()
                elseif currentStyle == STYLE_TYPE_CROUCH then
                    if (current_hkb_state == HKB_STATE_CROUCH_ITEM_COIN_BAG or current_hkb_state == HKB_STATE_CROUCH_ITEM_COIN_BAG_REPEAT) and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ITEM_REPEAT) == TRUE then
                        FireEvent("W_CrouchItemCoinBagRepeat")
                    else
                        FireEvent("W_CrouchItemCoinBag")
                    end
                elseif (current_hkb_state == HKB_STATE_ITEM_COIN_BAG or current_hkb_state == HKB_STATE_ITEM_COIN_BAG_REPEAT) and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ITEM_REPEAT) == TRUE then
                    FireEvent("W_ItemCoinBagRepeat")
                else
                    FireEvent("W_ItemCoinBag")
                end
            elseif itemAnimeType == ITEM_CANDY_DEFENSE_BUFF then
                if currentStyle == STYLE_TYPE_SWIM then
                    ResetRequest()
                elseif currentStyle == STYLE_TYPE_DIVE then
                    ResetRequest()
                elseif g_forceCrouch == TRUE then
                    ResetRequest()
                else
                    FireEvent("W_ItemCandyC")
                end
            elseif itemAnimeType == ITEM_CANDY_STEALTH_BUFF then
                if currentStyle == STYLE_TYPE_SWIM then
                    ResetRequest()
                elseif currentStyle == STYLE_TYPE_DIVE then
                    ResetRequest()
                elseif g_forceCrouch == TRUE then
                    ResetRequest()
                else
                    FireEvent("W_ItemCandyE")
                end
            elseif itemAnimeType == ITEM_THROW_ASH_BAG then
                _StartAutoAim()
                if currentStyle == STYLE_TYPE_COVER_LOOK then
                    FireEvent("W_CoverActionItemStone")
                elseif currentStyle == STYLE_TYPE_HANG then
                    if edgeType == HANG_EDGE_TYPE_DISABLE_HOLD_FOOT then
                        FireEvent("W_HangItemStone")
                    else
                        FireEvent("W_HangFootHoldItemStone")
                    end
                elseif currentStyle == STYLE_TYPE_SWIM then
                    ResetRequest()
                elseif currentStyle == STYLE_TYPE_DIVE then
                    ResetRequest()
                elseif currentStyle == STYLE_TYPE_CROUCH then
                    FireEvent("W_CrouchItemStone")
                elseif GetLocomotionType() == LOCOMOTION_TYPE_MOVE then
                    SetVariable("StartTime_02", env(GetVariableChangeValue, 2) / 1000)
                    SetVariable("StartTime_01", 0)
                    FireEvent("W_ItemStoneMove")
                else
                    SetVariable("StartTime_01", 0)
                    FireEvent("W_ItemStone")
                end
            elseif itemAnimeType == ITEM_THROW_POTTERY then
                _StartAutoAim()
                if currentStyle == STYLE_TYPE_COVER_LOOK then
                    FireEvent("W_CoverActionItemPottery")
                elseif currentStyle == STYLE_TYPE_HANG then
                    if edgeType == HANG_EDGE_TYPE_DISABLE_HOLD_FOOT then
                        FireEvent("W_HangItemPottery")
                    else
                        FireEvent("W_HangFootHoldItemPottery")
                    end
                elseif currentStyle == STYLE_TYPE_SWIM then
                    ResetRequest()
                elseif currentStyle == STYLE_TYPE_DIVE then
                    ResetRequest()
                elseif currentStyle == STYLE_TYPE_CROUCH then
                    FireEvent("W_CrouchItemPottery")
                elseif GetLocomotionType() == LOCOMOTION_TYPE_MOVE then
                    SetVariable("StartTime_02", env(GetVariableChangeValue, 2) / 1000)
                    SetVariable("StartTime_01", 0)
                    FireEvent("W_ItemPotteryMove")
                else
                    SetVariable("StartTime_01", 0)
                    FireEvent("W_ItemPottery")
                end
            elseif itemAnimeType == ITEM_ILLUSION_BREAK then
                if currentStyle == STYLE_TYPE_SWIM then
                    ResetRequest()
                elseif currentStyle == STYLE_TYPE_DIVE then
                    ResetRequest()
                elseif g_forceCrouch == TRUE then
                    ResetRequest()
                elseif GetLocomotionType() == LOCOMOTION_TYPE_MOVE then
                    SetVariable("StartTime_02", env(GetVariableChangeValue, 2) / 1000)
                    SetVariable("StartTime_01", 0)
                    FireEvent("W_ItemAntiHallucinogenMove")
                else
                    SetVariable("StartTime_01", 0)
                    FireEvent("W_ItemAntiHallucinogen")
                end
            elseif itemAnimeType == ITEM_CANDY_ANTI_GHOST then
                if currentStyle == STYLE_TYPE_SWIM then
                    ResetRequest()
                elseif currentStyle == STYLE_TYPE_DIVE then
                    ResetRequest()
                elseif g_forceCrouch == TRUE then
                    ResetRequest()
                elseif GetLocomotionType() == LOCOMOTION_TYPE_MOVE then
                    SetVariable("StartTime_02", env(GetVariableChangeValue, 2) / 1000)
                    SetVariable("StartTime_01", 0)
                    FireEvent("W_ItemAntiGhostBuffMove")
                else
                    SetVariable("StartTime_01", 0)
                    FireEvent("W_ItemAntiGhostBuff")
                end
            elseif itemAnimeType == ITEM_POWDER_MEDICINE_RECOVER_POISON or itemAnimeType == ITEM_POWDER_MEDICINE_POISON then
                if itemAnimeType == ITEM_POWDER_MEDICINE_RECOVER_POISON then
                    act(AINotifyAttackType, AI_INTERUPT_USE_ITEM)
                end
                if currentStyle == STYLE_TYPE_SWIM then
                    ResetRequest()
                elseif currentStyle == STYLE_TYPE_DIVE then
                    ResetRequest()
                elseif currentStyle == STYLE_TYPE_CROUCH then
                    FireEvent("W_CrouchItemPowderMedicineRecoverPoison")
                elseif GetLocomotionType() == LOCOMOTION_TYPE_MOVE then
                    SetVariable("StartTime_02", env(GetVariableChangeValue, 2) / 1000)
                    SetVariable("StartTime_01", 0)
                    FireEvent("W_ItemPowderMedicineRecoverPoisonMove")
                else
                    SetVariable("StartTime_01", 0)
                    FireEvent("W_ItemPowderMedicineRecoverPoison")
                end
            elseif itemAnimeType == ITEM_CANDY_ATTACK_BUFF then
                if currentStyle == STYLE_TYPE_SWIM then
                    ResetRequest()
                elseif currentStyle == STYLE_TYPE_DIVE then
                    ResetRequest()
                elseif g_forceCrouch == TRUE then
                    ResetRequest()
                else
                    FireEvent("W_ItemCandyAttackBuff")
                end
            elseif itemAnimeType == ITEM_CANDY_ATTACK_BUFF_SACRIFICE then
                if currentStyle == STYLE_TYPE_SWIM then
                    ResetRequest()
                elseif currentStyle == STYLE_TYPE_DIVE then
                    ResetRequest()
                elseif g_forceCrouch == TRUE then
                    ResetRequest()
                else
                    FireEvent("W_ItemCandyAttackBuffSacrifice")
                end
            elseif itemAnimeType == ITEM_CANDY_BODY_CORE_BUFF then
                if currentStyle == STYLE_TYPE_SWIM then
                    ResetRequest()
                elseif currentStyle == STYLE_TYPE_DIVE then
                    ResetRequest()
                elseif g_forceCrouch == TRUE then
                    ResetRequest()
                else
                    FireEvent("W_ItemCandyBodyCoreBuff")
                end
            elseif itemAnimeType == ITEM_SUICIDE then
                if currentStyle == STYLE_TYPE_SWIM then
                    ResetRequest()
                elseif currentStyle == STYLE_TYPE_DIVE then
                    ResetRequest()
                elseif g_forceCrouch == TRUE then
                    ResetRequest()
                else
                    SetVariable("IndexDeath", DEATH_TYPE_COMMON_BACK)
                    SetVariable("DamageDirection", SELECTOR_DAMAGE_DIR_B)
                    FireEvent("W_ItemSuicide")
                end
            elseif itemAnimeType == ITEM_BALLOON_MONEY_DROP_BUFF then
                if currentStyle == STYLE_TYPE_SWIM then
                    ResetRequest()
                elseif currentStyle == STYLE_TYPE_DIVE then
                    ResetRequest()
                elseif g_forceCrouch == TRUE then
                    ResetRequest()
                else
                    FireEvent("W_ItemBalloonMoneyDropBuff")
                end
            elseif itemAnimeType == ITEM_REDO_BELL then
                if currentStyle == STYLE_TYPE_SWIM then
                    ResetRequest()
                elseif currentStyle == STYLE_TYPE_DIVE then
                    ResetRequest()
                elseif g_forceCrouch == TRUE then
                    ResetRequest()
                else
                    FireEvent("W_ItemRedoBell")
                end
            elseif itemAnimeType == ITEM_PAPER_DOLL_EXCHANGE_WHITE or itemAnimeType == ITEM_PAPER_DOLL_EXCHANGE_RED then
                if currentStyle == STYLE_TYPE_SWIM then
                    ResetRequest()
                elseif currentStyle == STYLE_TYPE_DIVE then
                    ResetRequest()
                elseif currentStyle == STYLE_TYPE_CROUCH then
                    FireEvent("W_CrouchItemPaperDollExchangeWhite")
                elseif GetLocomotionType() == LOCOMOTION_TYPE_MOVE then
                    SetVariable("StartTime_02", env(GetVariableChangeValue, 2) / 1000)
                    SetVariable("StartTime_01", 0)
                    FireEvent("W_ItemPaperDollExchangeWhiteMove")
                else
                    SetVariable("StartTime_01", 0)
                    FireEvent("W_ItemPaperDollExchangeWhite")
                end
            elseif itemAnimeType == ITEM_TELESCOPE then
                if currentStyle == STYLE_TYPE_SWIM then
                    ResetRequest()
                elseif currentStyle == STYLE_TYPE_DIVE then
                    ResetRequest()
                elseif currentStyle == STYLE_TYPE_CROUCH then
                    if env(IsSpEffectBehaviorRefID, SP_EF_REF_ACTIVE_TELESCOPE) == TRUE then
                        FireEvent("W_CrouchItemTelescopeEnd")
                    else
                        FireEvent("W_CrouchItemTelescopeStart")
                    end
                elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_ACTIVE_TELESCOPE) == TRUE then
                    FireEvent("W_ItemTelescopeEnd")
                else
                    FireEvent("W_ItemTelescopeStart")
                end
            elseif itemAnimeType == ITEM_STONE_STATUE then
                if currentStyle == STYLE_TYPE_SWIM then
                    ResetRequest()
                elseif currentStyle == STYLE_TYPE_DIVE then
                    ResetRequest()
                elseif currentStyle == STYLE_TYPE_CROUCH then
                    FireEvent("W_CrouchItemStoneStatue")
                else
                    FireEvent("W_ItemStoneStatue")
                end
            elseif itemAnimeType == ITEM_GOURD_COLORED_RICE then
                if currentStyle == STYLE_TYPE_SWIM then
                    ResetRequest()
                elseif currentStyle == STYLE_TYPE_DIVE then
                    ResetRequest()
                elseif currentStyle == STYLE_TYPE_CROUCH then
                    FireEvent("W_CrouchItemColoredRice")
                else
                    FireEvent("W_ItemColoredRice")
                end
            elseif itemAnimeType == ITEM_GOURD_COLORED_RICE_EMPTY then
                if currentStyle == STYLE_TYPE_SWIM then
                    ResetRequest()
                elseif currentStyle == STYLE_TYPE_DIVE then
                    ResetRequest()
                elseif currentStyle == STYLE_TYPE_CROUCH then
                    FireEvent("W_CrouchItemColoredRiceEmpty")
                else
                    FireEvent("W_ItemColoredRiceEmpty")
                end
            elseif itemAnimeType == ITEM_UNIQUE_RESERVE_1 then
                if currentStyle == STYLE_TYPE_SWIM then
                    FireEvent("W_SwimItemReturnStatue")
                elseif currentStyle == STYLE_TYPE_DIVE then
                    FireEvent("W_DiveItemReturnStatue")
                elseif currentStyle == STYLE_TYPE_CROUCH then
                    FireEvent("W_CrouchItemReturnStatue")
                else
                    FireEvent("W_ItemReturnStatue")
                end
            elseif itemAnimeType == ITEM_RESERVE_5 then
                if currentStyle == STYLE_TYPE_SWIM then
                    ResetRequest()
                elseif currentStyle == STYLE_TYPE_DIVE then
                    ResetRequest()
                elseif g_forceCrouch == TRUE then
                    ResetRequest()
                else
                    FireEvent("W_ItemDebug0")
                end
            elseif itemAnimeType == ITEM_UNIQUE_RESERVE_2 then
                if itemAnimeType == ITEM_UNIQUE_RESERVE_2 then
                    act(AINotifyAttackType, AI_INTERUPT_USE_ITEM)
                end
                if currentStyle == STYLE_TYPE_SWIM then
                    ResetRequest()
                elseif currentStyle == STYLE_TYPE_DIVE then
                    ResetRequest()
                elseif currentStyle == STYLE_TYPE_CROUCH then
                    FireEvent("W_CrouchItemOhagi")
                elseif GetLocomotionType() == LOCOMOTION_TYPE_MOVE then
                    SetVariable("StartTime_02", env(GetVariableChangeValue, 2) / 1000)
                    SetVariable("StartTime_01", 0)
                    FireEvent("W_ItemOhagiMove")
                else
                    SetVariable("StartTime_01", 0)
                    FireEvent("W_ItemOhagi")
                end
            elseif itemAnimeType == ITEM_UNIQUE_RESERVE_3 then
                if itemAnimeType == ITEM_UNIQUE_RESERVE_3 then
                    act(AINotifyAttackType, AI_INTERUPT_USE_ITEM)
                end
                if currentStyle == STYLE_TYPE_SWIM then
                    ResetRequest()
                elseif currentStyle == STYLE_TYPE_DIVE then
                    ResetRequest()
                elseif currentStyle == STYLE_TYPE_CROUCH then
                    FireEvent("W_CrouchItemKaki")
                elseif GetLocomotionType() == LOCOMOTION_TYPE_MOVE then
                    SetVariable("StartTime_02", env(GetVariableChangeValue, 2) / 1000)
                    SetVariable("StartTime_01", 0)
                    FireEvent("W_ItemKakiMove")
                else
                    SetVariable("StartTime_01", 0)
                    FireEvent("W_ItemKaki")
                end
            elseif itemAnimeType == ITEM_BLOOD_MESSAGE then
                if currentStyle == STYLE_TYPE_SWIM then
                    ResetRequest()
                elseif currentStyle == STYLE_TYPE_DIVE then
                    ResetRequest()
                elseif currentStyle == STYLE_TYPE_CROUCH then
                    FireEvent("W_CrouchItemBloodMessage")
                else
                    FireEvent("W_ItemBloodMessage")
                end
            elseif itemAnimeType == ITEM_BLOOD_MESSAGE_GHOST_ACTIVATE then
                if currentStyle == STYLE_TYPE_SWIM then
                    ResetRequest()
                elseif currentStyle == STYLE_TYPE_DIVE then
                    ResetRequest()
                elseif currentStyle == STYLE_TYPE_CROUCH then
                    FireEvent("W_CrouchItemBloodMessageGhostActivate")
                else
                    FireEvent("W_ItemBloodMessageGhostActivate")
                end
            else
                ResetRequest()
            end
        end
    elseif next_behavior == BEH_A_AGING_ITEM_USE then
        if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_USE_ITEM) == TRUE then
            SetVariable("AddActionInputBlend", 0)
        end
        if env(IsSpEffectBehaviorRefID, SP_EF_REF_DISABLE_USE_ITEM_REQUEST) == TRUE or env(IsSpEffectBehaviorRefID, SP_EF_REF_DISABLE_ALL_INPUT) == TRUE then
            ResetRequest()
        elseif env(IsItemUseMenuOpened) == TRUE then
            ResetRequest()
        elseif env(IsItemUseMenuOpen) == TRUE then
            act(UseItemDecision)
            act(OpenMenuWhenUsingItem)
            ResetRequest()
        else
            act(UseItemDecision)
            act(WeaponParameterReference, HAND_RIGHT)
            act(SetIsItemAnimationPlaying)
            local itemUseEnable = env(IsItemUseable)
            local itemAnimeType = env(GetItemAnimType)
            if itemUseEnable == FALSE then
                ResetRequest()
            elseif itemAnimeType == ITEM_UNIQUE_RESERVE_1 then
                FireEvent("W_AgingItemReturnStatue")
            else
                ResetRequest()
            end
        end
    elseif next_behavior == BEH_A_GROUND_WIRE_SHOOT then
        act(CloseMenuWhenUsingItem)
        act(WireAction, 0)
        SetVariable("WireMoveStartIndex", GetWireMoveStartIndex(current_hkb_state))
        if currentStyle == STYLE_TYPE_SWIM then
            FireEvent("W_SwimWireMoveReady")
        else
            FireEvent("W_GroundWireShoot")
        end
    elseif next_behavior == BEH_A_DEFLECT_GUARD_START then
        act(CloseMenuWhenUsingItem)
        if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_GUARD) == TRUE then
            SetVariable("AddActionInputBlend", 0)
        end
        SetVariable("AddDeflectGuardBlend", 0)
        act(WeaponParameterReference, HAND_RIGHT)
        _StartAutoAim()
        local subWeaponCategory = env(GetEquipWeaponCategory, HAND_LEFT)
        if _isNonCombatMode() == TRUE then
            ResetRequest()
        elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_JUST_DEFLECT) == TRUE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_GUARD_CANCEL) == FALSE then
            SetVariable("AddDeflectGuardBlend", 1)
            FireEvent("W_AddHardDeflectGuard")
        elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_HIT_DEFLECT_CANCEL) == TRUE then
            FireEvent("W_StandDeflectGuardFromDamage")
        elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_ENABLE_SPRINT_ACTION) == TRUE then
            FireEvent("W_SprintToDeflectGuard")
        elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_GUARD_REVERSE) == TRUE then
            FireEvent("W_StandToDeflectGuard1Reverse")
        elseif subWeaponCategory == WEP_MOTION_CATEGORY_076 and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_TRANSITION_SUB_GUARD_ACTION) == TRUE and env(IsSpEffectBehaviorRefID, SP_EF_REF_WEP_DISABLE_SUB_GUARD_ACTION) == FALSE then
            act(WeaponParameterReference, HAND_LEFT)
            local enableAction = env(IsUserJumpRequest, ACTION_ARM_SHINOBI_WEP_ACTION)
            if enableAction == TRUE then
                FireEvent("W_GroundSubAttackGuardAction")
            else
                SetVariable("AddActionInputBlend", 1)
                FireEvent("W_AddActionInputSubAttack")
                FireEvent("W_GroundSubAttackGuardEndToSubAttackFailed")
            end
        else
            FireEvent("W_StandToDeflectGuard")
        end
    elseif next_behavior == BEH_A_DEFLECT_GUARD_CONTINUE then
        act(WeaponParameterReference, HAND_RIGHT)
        _StartAutoAim()
        if _isNonCombatMode() == TRUE then
            ResetRequest()
        elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_GUARD_COMBO) == TRUE then
            if current_hkb_state == HKB_STATE_STAND_TO_DEFLECT_GUARD_2 then
                FireEvent("W_StandToDeflectGuard3")
            elseif current_hkb_state == HKB_STATE_STAND_TO_DEFLECT_GUARD_3 or current_hkb_state == HKB_STATE_STAND_TO_DEFLECT_GUARD_4 then
                FireEvent("W_StandToDeflectGuard4")
            else
                FireEvent("W_StandToDeflectGuard2")
            end
        elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_GUARD_REVERSE) == TRUE then
            FireEvent("W_StandToDeflectGuard1Reverse")
        else
            FireEvent("W_StandToDeflectGuard")
        end
    elseif next_behavior == BEH_A_DEFLECT_GUARD_END then
        if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_GUARD_END_VARIATION) == TRUE then
            if GetLocomotionType() == LOCOMOTION_TYPE_IDLE then
                SetVariable("StartTime_01", 0)
                FireEventNoReset("W_DeflectGuardToStandVariation")
            else
                SetVariable("StartTime_01", 0)
                FireEventNoReset("W_DeflectGuardToStandMoveVariation")
            end
        elseif GetLocomotionType() == LOCOMOTION_TYPE_IDLE then
            SetVariable("StartTime_01", 0)
            FireEventNoReset("W_DeflectGuardToStand")
        else
            SetVariable("StartTime_01", 0)
            FireEventNoReset("W_DeflectGuardToStandMove")
        end
    elseif next_behavior == BEH_A_CROUCH_START then
        if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_CROUCH) == TRUE then
            SetVariable("AddActionInputBlend", 0)
        end
        if env(IsSpEffectBehaviorRefID, SP_EF_REF_ENABLE_SPRINT_ACTION) == TRUE and env(ActionUnlocked, ACTION_UNLOCK_TYPE_SPRINT_TO_CROUCH) == TRUE then
            act(CloseMenuWhenUsingItem)
            FireEvent("W_SprintToCrouchReady")
        elseif GetLocomotionType() == LOCOMOTION_TYPE_IDLE then
            FireEvent("W_CrouchStart")
        else
            if env(IsSpEffectBehaviorRefID, SP_EF_REF_ENABLE_SPRINT_ACTION) == TRUE and env(ActionUnlocked, ACTION_UNLOCK_TYPE_SPRINT_TO_CROUCH) == FALSE then
                SetVariable("AddActionInputBlend", 1)
                FireEventNoReset("W_AddDisableStep")
            end
            SetVariable("Selector_UseTransitionEffect", SELECTOR_USE_TE_TAE_BLEND_SYNC)
            FireEvent("W_CrouchMoveLoop")
        end
    elseif next_behavior == BEH_A_CROUCH_END then
        if GetLocomotionType() == LOCOMOTION_TYPE_IDLE then
            FireEvent("W_CrouchEnd")
        else
            SetVariable("Selector_UseTransitionEffect", SELECTOR_USE_TE_TAE_BLEND_SYNC)
            FireEvent("W_StandMoveLoop")
        end
    elseif next_behavior == BEH_A_COVER_START then
        act(CloseMenuWhenUsingItem)
        if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_WALL_HANG) == TRUE then
            SetVariable("AddActionInputBlend", 0)
        end
        local stickLevel = hkbGetVariable("MoveSpeedLevel")
        local edgeAngle = hkbGetVariable("CoverStartEdgeAngle")
        if stickLevel <= 0 then
            if edgeAngle >= COVER_START_ANGLE_STAND_BACK_MIN and edgeAngle <= COVER_START_ANGLE_STAND_BACK_MAX then
                if edgeAngle >= COVER_START_ANGLE_STAND_FRONT_MIN and edgeAngle <= COVER_START_ANGLE_STAND_FRONT_MAX then
                    if edgeAngle > 0 then
                        FireEvent("W_StandToCover2Right180")
                    else
                        FireEvent("W_StandToCover2Left180")
                    end
                elseif edgeAngle > 0 then
                    FireEvent("W_StandToCover2Right")
                else
                    FireEvent("W_StandToCover2Left")
                end
            else
                FireEvent("W_StandToCover2Back")
            end
        elseif edgeAngle >= COVER_START_ANGLE_MOVE_LEFT_MIN and edgeAngle <= COVER_START_ANGLE_MOVE_LEFT_MAX then
            FireEvent("W_MoveToCoverLeft")
        elseif edgeAngle >= COVER_START_ANGLE_MOVE_RIGHT_MIN and edgeAngle <= COVER_START_ANGLE_MOVE_RIGHT_MAX then
            FireEvent("W_MoveToCoverRight")
        elseif edgeAngle >= COVER_START_ANGLE_MOVE_RIGHT_MAX or edgeAngle <= COVER_START_ANGLE_MOVE_LEFT_MIN then
            FireEvent("W_StandToCover2Back")
        elseif edgeAngle > 0 then
            FireEvent("W_StandToCover2Right180")
        else
            FireEvent("W_StandToCover2Left180")
        end
    elseif next_behavior == BEH_A_COVER_END then
        act(CloseMenuWhenUsingItem)
        if currentStyle == STYLE_TYPE_COVER_LOOK then
            FireEventNoReset("W_CoverEndFromCoverLook")
        else
            FireEvent("W_CoverEnd")
        end
    elseif next_behavior == BEH_A_COVER_LOOK_START then
        act(CloseMenuWhenUsingItem)
        if env(IsOnEdgeOfDockingTarget) == 1 then
            SetVariable("Selector_CoverLookDir", SELECTOR_COVER_LOOK_DIR_L)
        else
            SetVariable("Selector_CoverLookDir", SELECTOR_COVER_LOOK_DIR_R)
        end
        FireEvent("W_CoverActionStart")
    elseif next_behavior == BEH_A_COVER_LOOK_END then
        act(CloseMenuWhenUsingItem)
        act(ResetInputQueue)
        FireEvent("W_CoverActionEnd")
    elseif next_behavior == BEH_A_GROUND_HANG_START then
        act(CloseMenuWhenUsingItem)
        if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_WALL_HANG) == TRUE then
            SetVariable("AddActionInputBlend", 0)
        end
        local stickLevel = hkbGetVariable("MoveSpeedLevel")
        local edgeAngle = hkbGetVariable("HangStartEdgeAngle")
        local edgeType = env(GetDockingEdgeVariationID, DOCKING_TGT_EDGE_TYPE_HANG)
        if edgeAngle >= HANG_START_ANGLE_STAND_B_MIN and edgeAngle <= HANG_START_ANGLE_STAND_B_MAX then
            if edgeType == HANG_EDGE_TYPE_DISABLE_HOLD_FOOT then
                FireEvent("W_StandToHang1Back")
            else
                FireEvent("W_StandToHangFootHold1Back")
            end
        elseif edgeAngle > HANG_START_ANGLE_STAND_L_MIN and edgeAngle < HANG_START_ANGLE_STAND_L_MAX then
            if edgeType == HANG_EDGE_TYPE_DISABLE_HOLD_FOOT then
                FireEvent("W_StandToHang1Left")
            else
                FireEvent("W_StandToHangFootHold1Left")
            end
        elseif edgeAngle > HANG_START_ANGLE_STAND_R_MIN and edgeAngle < HANG_START_ANGLE_STAND_R_MAX then
            if edgeType == HANG_EDGE_TYPE_DISABLE_HOLD_FOOT then
                FireEvent("W_StandToHang1Right")
            else
                FireEvent("W_StandToHangFootHold1Right")
            end
        elseif edgeType == HANG_EDGE_TYPE_DISABLE_HOLD_FOOT then
            FireEvent("W_StandToHang")
        else
            FireEvent("W_StandToHangFootHold1")
        end
    elseif next_behavior == BEH_A_AIR_HANG_START then
        local edgeAngle = hkbGetVariable("HangStartEdgeAngle")
        local edgeType = env(GetDockingEdgeVariationID, DOCKING_TGT_EDGE_TYPE_HANG)
        local airHangType = env(IsWallHangAirPossible)
        if edgeType == HANG_EDGE_TYPE_DISABLE_HOLD_FOOT then
            if edgeAngle >= HANG_START_ANGLE_FREE_FALL_LEFT_MIN and edgeAngle <= HANG_START_ANGLE_FREE_FALL_LEFT_MAX then
                if airHangType == AIR_HANG_TYPE_SHORT_LANGE then
                    FireEvent("W_FreeFallToHangLeft")
                else
                    FireEvent("W_FreeFallToHangLongRangeLeft")
                end
            elseif edgeAngle >= HANG_START_ANGLE_FREE_FALL_RIGHT_MIN and edgeAngle <= HANG_START_ANGLE_FREE_FALL_RIGHT_MAX then
                if airHangType == AIR_HANG_TYPE_SHORT_LANGE then
                    FireEvent("W_FreeFallToHangRight")
                else
                    FireEvent("W_FreeFallToHangLongRangeRight")
                end
            elseif airHangType == AIR_HANG_TYPE_SHORT_LANGE then
                FireEvent("W_FreeFallToHang")
            else
                FireEvent("W_FreeFallToHangLongRange")
            end
        elseif edgeAngle >= HANG_START_ANGLE_FREE_FALL_LEFT_MIN and edgeAngle <= HANG_START_ANGLE_FREE_FALL_LEFT_MAX then
            if airHangType == AIR_HANG_TYPE_SHORT_LANGE then
                FireEvent("W_FreeFallToHangFootHoldLeft")
            else
                FireEvent("W_FreeFallToHangFootHoldLongRangeLeft")
            end
        elseif edgeAngle >= HANG_START_ANGLE_FREE_FALL_RIGHT_MIN and edgeAngle <= HANG_START_ANGLE_FREE_FALL_RIGHT_MAX then
            if airHangType == AIR_HANG_TYPE_SHORT_LANGE then
                FireEvent("W_FreeFallToHangFootHoldRight")
            else
                FireEvent("W_FreeFallToHangFootHoldLongRangeRight")
            end
        elseif airHangType == AIR_HANG_TYPE_SHORT_LANGE then
            FireEvent("W_FreeFallToHangFootHold")
        else
            FireEvent("W_FreeFallToHangFootHoldLongRange")
        end
    elseif next_behavior == BEH_A_AIR_HANG_GRAB_START then
        act(ResetInputQueue)
        FireEvent("W_AirHangGrabStart")
    elseif next_behavior == BEH_A_AIR_HANG_GRAB_END then
        act(ResetInputQueue)
        FireEvent("W_AirHangGrabEnd")
    elseif next_behavior == BEH_A_HANG_CLIMB then
        if env(IsHangAndClimbPossible) == TRUE then
            local edgeType = env(GetDockingEdgeRequest)
            if edgeType == HANG_EDGE_TYPE_DISABLE_HOLD_FOOT then
                FireEvent("W_HangToStand")
            else
                FireEvent("W_HangFootHoldToStand")
            end
        end
    elseif next_behavior == BEH_A_HANG_FALL then
        local edgeType = env(GetDockingEdgeRequest)
        if edgeType == HANG_EDGE_TYPE_DISABLE_HOLD_FOOT then
            FireEvent("W_HangToFreeFall")
        else
            FireEvent("W_HangFootHoldToFreeFall")
        end
    elseif next_behavior == BEH_A_HANG_CORNER_MOVE then
        local edgeType = env(GetDockingEdgeRequest)
        if env(IsHangLeftOutterCornerPossible) == TRUE then
            if edgeType == HANG_EDGE_TYPE_DISABLE_HOLD_FOOT then
                FireEvent("W_HangCornerMoveLeft")
            else
                FireEvent("W_HangCornerMoveFootHoldLeft")
            end
        elseif env(IsHangRightOutterCornerPossible) == TRUE then
            if edgeType == HANG_EDGE_TYPE_DISABLE_HOLD_FOOT then
                FireEvent("W_HangCornerMoveRight")
            else
                FireEvent("W_HangCornerMoveFootHoldRight")
            end
        elseif env(IsHangLeftInnerCornerPossible) == TRUE then
            if edgeType == HANG_EDGE_TYPE_DISABLE_HOLD_FOOT then
                FireEvent("W_HangInsideCornerMoveLeft")
            else
                FireEvent("W_HangInsideCornerMoveFootHoldLeft")
            end
        elseif env(IsHangRightInnerCornerPossible) == TRUE then
            if edgeType == HANG_EDGE_TYPE_DISABLE_HOLD_FOOT then
                FireEvent("W_HangInsideCornerMoveRight")
            else
                FireEvent("W_HangInsideCornerMoveFootHoldRight")
            end
        end
    elseif next_behavior == BEH_A_SWIM_TO_DIVE then
        act(CloseMenuWhenUsingItem)
        FireEvent("W_SwimToDive")
    elseif next_behavior == BEH_A_AGING_GROUND_MOVE_START then
        FireEvent("W_AgingStandMoveStart")
    elseif next_behavior == BEH_A_AGING_GROUND_MOVE_STOP then
        if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_MOVING_SPRINT) == TRUE then
            if hkbGetVariable("MoveSpeedLevel") > 0 then
                FireEvent("W_AgingStandMove")
            else
                FireEvent("W_AgingSprintEnd")
            end
        else
            FireEvent("W_AgingStandWalkStop")
        end
    elseif next_behavior == BEH_A_AGING_SPRINT then
        FireEvent("W_AgingSprintStart")
    elseif next_behavior == BEH_A_AGING_GROUND_JUMP then
        act(CloseMenuWhenUsingItem)
        if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_JUMP) == TRUE then
            SetVariable("AddActionInputBlend", 0)
        end
        local stickLevel = hkbGetVariable("MoveSpeedLevel")
        if stickLevel <= 0 then
            SetVariable("Selector_GroundJumpType", SELECTOR_GROUND_JUMP_TYPE_VERTICAL)
        else
            SetVariable("Selector_GroundJumpType", SELECTOR_GROUND_JUMP_TYPE_FORWARD)
        end
        FireEvent("W_AgingGroundJumpReady")
    elseif next_behavior == BEH_A_AGING_ATTACK then
        act(CloseMenuWhenUsingItem)
        _StartAutoAim()
        FireEvent("W_AgingGroundAttack")
    elseif next_behavior == BEH_A_AGING_ACTION then
        act(CloseMenuWhenUsingItem)
        FireEvent("W_AgingGroundAction")
    elseif next_behavior == BEH_A_ADD_SUB_WEAPON_CHANGE then
        if g_forceCrouch == TRUE and env("特殊効果発動中か_Behavior参照ID_寿命延長を厳密に取得", SP_EF_REF_AGING) == TRUE then
            ResetRequest()
        else
            SetVariable("AddSubWeaponChangeBlend", 1)
            FireEvent("W_AddSubWeaponChange")
        end
    elseif next_behavior == BEH_A_ADD_ACTION_INPUT_JUMP then
        SetVariable("AddActionInputBlend", 1)
        FireEvent("W_AddActionInputJump")
    elseif next_behavior == BEH_A_ADD_ACTION_INPUT_KICK then
        SetVariable("AddActionInputBlend", 1)
        FireEvent("W_AddActionInputKick")
    elseif next_behavior == BEH_A_ADD_ACTION_INPUT_USE_ITEM then
        act(CloseMenuWhenUsingItem)
        SetVariable("AddActionInputBlend", 1)
        FireEvent("W_AddActionInputUseItem")
    elseif next_behavior == BEH_A_ADD_ACTION_INPUT_CROUCH then
        SetVariable("AddActionInputBlend", 1)
        FireEvent("W_AddActionInputCrouch")
    elseif next_behavior == BEH_A_ADD_ACTION_INPUT_WIRE_SHOOT then
        SetVariable("AddActionInputBlend", 1)
        FireEvent("W_AddActionInputWireShoot")
    elseif next_behavior == BEH_A_ADD_ACTION_INPUT_SUB_ATTACK then
        SetVariable("AddActionInputBlend", 1)
        FireEvent("W_AddActionInputSubAttack")
    elseif next_behavior == BEH_A_DEBUG_MOVE_STYLE_AUTO_RESET then
        FireEvent("W_Idle")
    elseif next_behavior == BEH_A_DEBUG_MOVE_STYLE_SHIFT then
        if currentStyle == STYLE_TYPE_DIVE then
            FireEvent("W_Idle")
        else
            FireEvent("W_DiveIdle")
        end
    else
        return
    end
    
end

function _EnableMainWeaponAction()
    if env(ActionUnlocked, ACTION_UNLOCK_TYPE_MAIN_WEAPONE) == TRUE and env(GetEquipWeaponCategory, HAND_RIGHT) == WEP_MOTION_CATEGORY_050 then
        return TRUE
    else
        return FALSE
    end
    
end

function _EnableSubWeaponAction()
    if env(ActionUnlocked, ACTION_UNLOCK_TYPE_SUB_WEAPONE) == TRUE then
        return TRUE
    else
        return FALSE
    end
    
end

function _isNonCombatMode()
    if env(GetWeaponSwitchState) == ARM_STYLE_SAFE or env(IsSpEffectBehaviorRefID, SP_EF_REF_IN_NON_COMBAT_AREA) == TRUE then
        return TRUE
    else
        return FALSE
    end
    
end

function _setProneDir(angle)
    if angle == SELECTOR_DAMAGE_DIR_B then
        SetVariable("Selector_ProneDirection", SELECTOR_PRONE_DIR_FACE_DOWN)
    else
        SetVariable("Selector_ProneDirection", SELECTOR_PRONE_DIR_FACE_UP)
    end
    
end

function _setDamageAbsorption(angle)
    if angle == SELECTOR_DAMAGE_DIR_B then
        act(TurnTowardAttacker, DAMAGE_ABSORPTION_DIGREE_B)
    else
        act(TurnTowardAttacker, DAMAGE_ABSORPTION_DIGREE_F)
    end
    
end

function GetLocomotionType()
    if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_MOVING_WALK) == TRUE then
        return LOCOMOTION_TYPE_MOVE
    elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_MOVING_RUN) == TRUE then
        return LOCOMOTION_TYPE_MOVE
    elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_MOVING_SPRINT) == TRUE then
        return LOCOMOTION_TYPE_MOVE
    elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_SWIMMING_WALK) == TRUE then
        return LOCOMOTION_TYPE_SWIM_MOVE
    elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_SWIMMING_RUN) == TRUE then
        return LOCOMOTION_TYPE_SWIM_MOVE
    elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_SWIMMING_SPRINT) == TRUE then
        return LOCOMOTION_TYPE_SWIM_MOVE
    else
        return LOCOMOTION_TYPE_IDLE
    end
    
end

function _UpdateNextThrowInfo(current_hkb_state)
    local currentStyle = g_paramHkbState[current_hkb_state][PARAM_HKB_STATE__STYLE_TYPE]
    if currentStyle == STYLE_TYPE_STAND then
        SetVariable("ThrowGrabType", THROW_GRAB_TYPE_STAND)
        SetVariable("StyleAfterThrowAtk", STYLE_TYPE_STAND)
    elseif currentStyle == STYLE_TYPE_CROUCH then
        act(AddSpEffect, SP_EFFECT_ENABLE_CROUCH_NINSATSU)
        SetVariable("ThrowGrabType", THROW_GRAB_TYPE_CROUCH)
        SetVariable("StyleAfterThrowAtk", STYLE_TYPE_CROUCH)
    elseif currentStyle == STYLE_TYPE_GROUND_GUARD then
        SetVariable("ThrowGrabType", THROW_GRAB_TYPE_STAND)
        SetVariable("StyleAfterThrowAtk", STYLE_TYPE_STAND)
    elseif currentStyle == STYLE_TYPE_COVER then
        SetVariable("ThrowGrabType", THROW_GRAB_TYPE_STAND)
        SetVariable("StyleAfterThrowAtk", STYLE_TYPE_STAND)
    elseif currentStyle == STYLE_TYPE_COVER_LOOK then
        if hkbGetVariable("Selector_CoverLookDir") == SELECTOR_COVER_LOOK_DIR_L then
            act(AddSpEffect, SP_EFFECT_ENABLE_WALL_L_NINSATSU)
        else
            act(AddSpEffect, SP_EFFECT_ENABLE_WALL_R_NINSATSU)
        end
        SetVariable("ThrowGrabType", THROW_GRAB_TYPE_COVER_LOOK)
        SetVariable("StyleAfterThrowAtk", STYLE_TYPE_COVER)
    elseif currentStyle == STYLE_TYPE_HANG then
        act(AddSpEffect, SP_EFFECT_ENABLE_PULL_DOWN_NINSATSU)
        SetVariable("ThrowGrabType", THROW_GRAB_TYPE_HANG)
        SetVariable("StyleAfterThrowAtk", STYLE_TYPE_HANG)
    elseif currentStyle == STYLE_TYPE_SPRINT then
        SetVariable("ThrowGrabType", THROW_GRAB_TYPE_STAND)
        SetVariable("StyleAfterThrowAtk", STYLE_TYPE_STAND)
    elseif currentStyle == STYLE_TYPE_FREE_FALL then
        SetVariable("ThrowGrabType", THROW_GRAB_TYPE_STAND)
        SetVariable("StyleAfterThrowAtk", STYLE_TYPE_FREE_FALL)
    elseif currentStyle == STYLE_TYPE_WIRE_FALL then
        SetVariable("ThrowGrabType", THROW_GRAB_TYPE_STAND)
        SetVariable("StyleAfterThrowAtk", STYLE_TYPE_FREE_FALL)
    elseif currentStyle == STYLE_TYPE_SPRINT then
        SetVariable("ThrowGrabType", THROW_GRAB_TYPE_STAND)
        SetVariable("StyleAfterThrowAtk", STYLE_TYPE_STAND)
    end
    if current_hkb_state == HKB_STATE_COVER_LOOK_THROW_GRAB then
        if hkbGetVariable("Selector_CoverLookDir") == SELECTOR_COVER_LOOK_DIR_L then
            act(AddSpEffect, SP_EFFECT_ENABLE_WALL_L_NINSATSU)
        else
            act(AddSpEffect, SP_EFFECT_ENABLE_WALL_R_NINSATSU)
        end
        SetVariable("ThrowGrabType", THROW_GRAB_TYPE_COVER_LOOK)
        SetVariable("StyleAfterThrowAtk", STYLE_TYPE_COVER)
    end
    
end

function _SpeedUpdate(current_hkb_state)
    local stick_level = hkbGetVariable("MoveSpeedLevel")
    local move_angle = hkbGetVariable("MoveAngle")
    local moveSpeedIndex = hkbGetVariable("MoveSpeedIndex")
    local edgeType = env(GetDockingEdgeRequest)
    local currentStyle = g_paramHkbState[current_hkb_state][PARAM_HKB_STATE__STYLE_TYPE]
    if g_forceCrouch == TRUE and env("特殊効果発動中か_Behavior参照ID_寿命延長を厳密に取得", SP_EF_REF_AGING) == TRUE then
        SetVariable("MoveSpeedIndex", 0)
    elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_IN_SWAMP_AREA) == TRUE then
        if moveSpeedIndex == 0 then
            if env(ActionDuration, ACTION_ARM_SP_MOVE) > 200 and stick_level > PRM_RUN_STICK_LEVEL_WALK_TO_RUN then
                SetVariable("MoveSpeedIndex", 1)
            else
                SetVariable("MoveSpeedIndex", 0)
            end
        elseif env(ActionDuration, ACTION_ARM_SP_MOVE) > 200 and stick_level > PRM_RUN_STICK_LEVEL_RUN_TO_WALK then
            SetVariable("MoveSpeedIndex", 1)
        else
            SetVariable("MoveSpeedIndex", 0)
        end
    elseif currentStyle == STYLE_TYPE_COVER and (edgeType == COVER_EDGE_TYPE_PEAK_MOVE_DISABLE_LOOK or edgeType == COVER_EDGE_TYPE_PEAK_MOVE_FREE_LOOK or edgeType == COVER_EDGE_TYPE_PEAK_MOVE_LEFT_LOOK_ONLY or edgeType == COVER_EDGE_TYPE_PEAK_MOVE_RIGHT_LOOK_ONLY) then
        SetVariable("MoveSpeedIndex", 0)
    elseif moveSpeedIndex == 0 then
        if stick_level > PRM_RUN_STICK_LEVEL_WALK_TO_RUN then
            SetVariable("MoveSpeedIndex", 1)
        else
            SetVariable("MoveSpeedIndex", 0)
        end
    elseif stick_level > PRM_RUN_STICK_LEVEL_RUN_TO_WALK then
        SetVariable("MoveSpeedIndex", 1)
    else
        SetVariable("MoveSpeedIndex", 0)
    end
    local speed = GetMoveSpeed(stick_level)
    SetVariable("MoveSpeedLevelReal", speed)
    
end

function _DiveSpeedUpdate(current_hkb_state)
    local stick_level = hkbGetVariable("MoveSpeedLevel")
    local moveSpeedIndex = hkbGetVariable("MoveSpeedIndex")
    if moveSpeedIndex == 0 then
        if stick_level > PRM_RUN_STICK_LEVEL_WALK_TO_RUN then
            SetVariable("MoveSpeedIndex", 1)
        else
            SetVariable("MoveSpeedIndex", 0)
        end
    elseif stick_level > PRM_RUN_STICK_LEVEL_RUN_TO_WALK then
        SetVariable("MoveSpeedIndex", 1)
    else
        SetVariable("MoveSpeedIndex", 0)
    end
    
end

function _hasSprint()
    if hkbGetVariable("MoveSpeedLevel") > 0 and 0 < env(ActionDuration, ACTION_ARM_SP_MOVE) and _EnableMainWeaponAction() == TRUE then
        return TRUE
    else
        return FALSE
    end
    
end

function _MoveDirectionUpdate()
    local angle = 0
    if env(IsLocked) == TRUE then
        angle = hkbGetVariable("MoveAngle")
    else
        angle = hkbGetVariable("TurnAngle")
    end
    if math.abs(angle) < 55 then
        SetVariable("MoveDirection", 0)
    elseif math.abs(angle) > 125 then
        SetVariable("MoveDirection", 1)
    elseif angle < 0 then
        SetVariable("MoveDirection", 2)
    else
        SetVariable("MoveDirection", 3)
    end
    
end

function ExecHangIdle(current_hkb_state)
    local edgeType = env(GetDockingEdgeRequest)
    if edgeType == HANG_EDGE_TYPE_DISABLE_HOLD_FOOT then
        FireEvent("W_HangIdle")
    else
        FireEvent("W_HangFootHoldIdle")
    end
    
end

function _SetJumpDirection(stickAngle, stickLevel)
    if stickLevel <= 0 then
        SetVariable("Selector_GroundJumpType", SELECTOR_GROUND_JUMP_TYPE_VERTICAL)
    elseif stickAngle >= PRM_GROUND_JUMP_FORWARD_STICK_RANGE_MIN and stickAngle <= PRM_GROUND_JUMP_FORWARD_STICK_RANGE_MAX then
        if env(IsLocked) == TRUE then
            SetVariable("Selector_GroundJumpType", SELECTOR_GROUND_JUMP_TYPE_FORWARD_LOCKON)
            act(LockHomingAction, 0)
        else
            SetVariable("Selector_GroundJumpType", SELECTOR_GROUND_JUMP_TYPE_FORWARD)
        end
    elseif stickAngle > PRM_GROUND_JUMP_RIGHT_FORWARD_STICK_RANGE_MIN and stickAngle < PRM_GROUND_JUMP_RIGHT_FORWARD_STICK_RANGE_MAX then
        SetVariable("Selector_GroundJumpType", SELECTOR_GROUND_JUMP_TYPE_RIGHT_FORWARD)
    elseif stickAngle > PRM_GROUND_JUMP_RIGHT_STICK_RANGE_MIN and stickAngle < PRM_GROUND_JUMP_RIGHT_STICK_RANGE_MAX then
        SetVariable("Selector_GroundJumpType", SELECTOR_GROUND_JUMP_TYPE_RIGHTSIDE)
    elseif stickAngle > PRM_GROUND_JUMP_RIGHT_BACKWARD_STICK_RANGE_MIN and stickAngle < PRM_GROUND_JUMP_RIGHT_BACKWARD_STICK_RANGE_MAX then
        SetVariable("Selector_GroundJumpType", SELECTOR_GROUND_JUMP_TYPE_RIGHT_BACKWARD)
    elseif stickAngle > PRM_GROUND_JUMP_LEFT_BACKWARD_STICK_RANGE_MIN and stickAngle < PRM_GROUND_JUMP_LEFT_BACKWARD_STICK_RANGE_MAX then
        SetVariable("Selector_GroundJumpType", SELECTOR_GROUND_JUMP_TYPE_LEFT_BACKWARD)
    elseif stickAngle > PRM_GROUND_JUMP_LEFT_STICK_RANGE_MIN and stickAngle < PRM_GROUND_JUMP_LEFT_STICK_RANGE_MAX then
        SetVariable("Selector_GroundJumpType", SELECTOR_GROUND_JUMP_TYPE_LEFTSIDE)
    elseif stickAngle > PRM_GROUND_JUMP_LEFT_FORWARD_STICK_RANGE_MIN and stickAngle < PRM_GROUND_JUMP_LEFT_FORWARD_STICK_RANGE_MAX then
        SetVariable("Selector_GroundJumpType", SELECTOR_GROUND_JUMP_TYPE_LEFT_FORWARD)
    else
        SetVariable("Selector_GroundJumpType", SELECTOR_GROUND_JUMP_TYPE_BACKWARD)
    end
    
end

function _GroundQuickTurn(current_hkb_state)
    local turnAngle = hkbGetVariable("TurnAngle")
    local twistAngle = -hkbGetVariable("TwistLowerRootAngle")
    local smallTurnAngle = 120
    local smallTwistAngle = 120
    local currentStyle = GetStyleType(current_hkb_state)
    local currentState = GetStateType(current_hkb_state)
    if currentStyle == STYLE_TYPE_STAND then
        if currentState == STATE_TYPE_STANDBY_ATK_HOLD or currentState == STATE_TYPE_ACTION_ATK_HOLD or currentState == STATE_TYPE_REACTION_ATK_HOLD then
            if turnAngle > 0 or twistAngle > 0 then
                if smallTurnAngle < math.abs(turnAngle) or smallTwistAngle < math.abs(twistAngle) then
                    FireEvent("W_GroundSpecialAttackHoldQuickTurnRight180")
                else
                    FireEvent("W_GroundSpecialAttackHoldQuickTurnRight90")
                end
            elseif smallTurnAngle < math.abs(turnAngle) or smallTwistAngle < math.abs(twistAngle) then
                FireEvent("W_GroundSpecialAttackHoldQuickTurnLeft180")
            else
                FireEvent("W_GroundSpecialAttackHoldQuickTurnLeft90")
            end
        elseif turnAngle > 0 or twistAngle > 0 then
            if smallTurnAngle < math.abs(turnAngle) or smallTwistAngle < math.abs(twistAngle) then
                FireEvent("W_StandQuickTurnRight180")
            else
                FireEvent("W_StandQuickTurnRight90")
            end
        elseif smallTurnAngle < math.abs(turnAngle) or smallTwistAngle < math.abs(twistAngle) then
            FireEvent("W_StandQuickTurnLeft180")
        else
            FireEvent("W_StandQuickTurnLeft90")
        end
    elseif currentStyle == STYLE_TYPE_CROUCH then
        if turnAngle > 0 or twistAngle > 0 then
            if smallTurnAngle < math.abs(turnAngle) or smallTwistAngle < math.abs(twistAngle) then
                FireEvent("W_CrouchQuickTurnRight180")
            else
                FireEvent("W_CrouchQuickTurnRight90")
            end
        elseif smallTurnAngle < math.abs(turnAngle) or smallTwistAngle < math.abs(twistAngle) then
            FireEvent("W_CrouchQuickTurnLeft180")
        else
            FireEvent("W_CrouchQuickTurnLeft90")
        end
    elseif currentStyle == STYLE_TYPE_GROUND_GUARD then
        if turnAngle > 0 or twistAngle > 0 then
            if smallTurnAngle < math.abs(turnAngle) or smallTwistAngle < math.abs(twistAngle) then
                FireEvent("W_DeflectGuardQuickTurnRight180")
            else
                FireEvent("W_DeflectGuardQuickTurnRight90")
            end
        elseif smallTurnAngle < math.abs(turnAngle) or smallTwistAngle < math.abs(twistAngle) then
            FireEvent("W_DeflectGuardQuickTurnLeft180")
        else
            FireEvent("W_DeflectGuardQuickTurnLeft90")
        end
    end
    
end

function _execDamageStep()
    if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_HIT_JUMP_CANCEL) == TRUE then
        FireEvent("W_StandStepFromDamage")
        return TRUE
    elseif env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_DOWN_JUMP_CANCEL) == TRUE then
        local angle = nil
        local stickLevel = hkbGetVariable("MoveSpeedLevel")
        if env(IsLocked) == TRUE then
            angle = hkbGetVariable("MoveAngle")
        else
            angle = hkbGetVariable("TurnAngle")
        end
        _set4DirJumpDir(angle, stickLevel)
        _set4DirJumpTilt(angle)
        FireEvent("W_StandStepFromDown")
        return TRUE
    end
    return FALSE
    
end

function GetWireMoveStartIndex(current_hkb_state)
    if current_hkb_state == HKB_STATE_GROUND_WIRE_SHOOT or current_hkb_state == HKB_STATE_AIR_WIRE_MOVE_READY or current_hkb_state == HKB_STATE_SWIM_WIRE_MOVE_READY then
        return hkbGetVariable("WireMoveStartIndex")
    else
        local angle = hkbGetVariable("WireDramaticAngle")
        if angle > 50 then
            return WIRE_MOVE_START_INDEX_VERTICAL
        elseif angle > 15 then
            return WIRE_MOVE_START_INDEX_UPSLOPE
        else
            return WIRE_MOVE_START_INDEX_HORIZONTAL
        end
    end
    
end

function _SetStepAngle(stickAngle, stickLevel)
    if stickLevel <= 0 then
        SetVariable("Selector_GroundJumpType", SELECTOR_GROUND_JUMP_TYPE_VERTICAL)
    elseif math.abs(stickAngle) < 45 then
        SetVariable("Selector_GroundJumpType", SELECTOR_GROUND_JUMP_TYPE_FORWARD)
    elseif math.abs(stickAngle) > 135 then
        SetVariable("Selector_GroundJumpType", SELECTOR_GROUND_JUMP_TYPE_BACKWARD)
    elseif stickAngle < 0 then
        SetVariable("Selector_GroundJumpType", SELECTOR_GROUND_JUMP_TYPE_LEFTSIDE)
    else
        SetVariable("Selector_GroundJumpType", SELECTOR_GROUND_JUMP_TYPE_RIGHTSIDE)
    end
    
end

function _setPositioningJumpTilt(angle)
    local jumpType = hkbGetVariable("Selector_GroundJumpType")
    if jumpType == SELECTOR_GROUND_JUMP_TYPE_VERTICAL then
    elseif jumpType == SELECTOR_GROUND_JUMP_TYPE_FORWARD_LOCKON then
    elseif jumpType == SELECTOR_GROUND_JUMP_TYPE_FORWARD then
        act(TurnToDirection, angle - PRM_GROUND_JUMP_ANGLE_CENTER_F)
    elseif jumpType == SELECTOR_GROUND_JUMP_TYPE_BACKWARD then
        if angle > 0 then
            act(TurnToDirection, angle - PRM_GROUND_JUMP_ANGLE_CENTER_B)
        else
            act(TurnToDirection, angle + PRM_GROUND_JUMP_ANGLE_CENTER_B)
        end
    elseif jumpType == SELECTOR_GROUND_JUMP_TYPE_LEFTSIDE then
        act(TurnToDirection, angle - PRM_GROUND_JUMP_ANGLE_CENTER_L)
    elseif jumpType == SELECTOR_GROUND_JUMP_TYPE_RIGHTSIDE then
        act(TurnToDirection, angle - PRM_GROUND_JUMP_ANGLE_CENTER_R)
    elseif jumpType == SELECTOR_GROUND_JUMP_TYPE_LEFT_FORWARD then
        act(TurnToDirection, angle - PRM_GROUND_JUMP_ANGLE_CENTER_F_L)
    elseif jumpType == SELECTOR_GROUND_JUMP_TYPE_RIGHT_FORWARD then
        act(TurnToDirection, angle - PRM_GROUND_JUMP_ANGLE_CENTER_F_R)
    elseif jumpType == SELECTOR_GROUND_JUMP_TYPE_LEFT_BACKWARD then
        act(TurnToDirection, angle - PRM_GROUND_JUMP_ANGLE_CENTER_B_L)
    elseif jumpType == SELECTOR_GROUND_JUMP_TYPE_RIGHT_BACKWARD then
        act(TurnToDirection, angle - PRM_GROUND_JUMP_ANGLE_CENTER_B_R)
    end
    
end

function _set4DirJumpDir(angle, stickLevel)
    if PRM_4DIR_JUMP_STICK_RANGE_F_MIN < angle and angle < PRM_4DIR_JUMP_STICK_RANGE_F_MAX then
        if stickLevel <= 0 then
            SetVariable("Selector_GroundJumpType", SELECTOR_GROUND_JUMP_TYPE_VERTICAL)
        else
            SetVariable("Selector_GroundJumpType", SELECTOR_GROUND_JUMP_TYPE_FORWARD)
        end
    elseif angle > PRM_4DIR_JUMP_STICK_RANGE_L_MIN and angle < PRM_4DIR_JUMP_STICK_RANGE_L_MAX then
        SetVariable("Selector_GroundJumpType", SELECTOR_GROUND_JUMP_TYPE_LEFTSIDE)
    elseif angle >= PRM_4DIR_JUMP_STICK_RANGE_R_MIN and angle < PRM_4DIR_JUMP_STICK_RANGE_R_MAX then
        SetVariable("Selector_GroundJumpType", SELECTOR_GROUND_JUMP_TYPE_RIGHTSIDE)
    else
        SetVariable("Selector_GroundJumpType", SELECTOR_GROUND_JUMP_TYPE_BACKWARD)
    end
    
end

function _set4DirJumpTilt(angle)
    local jumpDir = hkbGetVariable("Selector_GroundJumpType")
    if jumpDir == SELECTOR_GROUND_JUMP_TYPE_VERTICAL then
    elseif jumpDir == SELECTOR_GROUND_JUMP_TYPE_FORWARD then
        act(TurnToDirection, angle - PRM_4DIR_JUMP_ANGLE_CENTER_F)
    elseif jumpDir == SELECTOR_GROUND_JUMP_TYPE_BACKWARD then
        if angle > 0 then
            act(TurnToDirection, angle - PRM_4DIR_JUMP_ANGLE_CENTER_B)
        else
            act(TurnToDirection, angle + PRM_4DIR_JUMP_ANGLE_CENTER_B)
        end
    elseif jumpDir == SELECTOR_GROUND_JUMP_TYPE_LEFTSIDE then
        act(TurnToDirection, angle - PRM_4DIR_JUMP_ANGLE_CENTER_L)
    elseif jumpDir == SELECTOR_GROUND_JUMP_TYPE_RIGHTSIDE then
        act(TurnToDirection, angle - PRM_4DIR_JUMP_ANGLE_CENTER_R)
    end
    
end

function _set2DirStepDir(angle, stickLevel)
    if PRM_2DIR_STEP_STICK_RANGE_F_MIN < angle and angle < PRM_2DIR_STEP_STICK_RANGE_F_MAX then
        if angle == 0 and stickLevel <= 0 then
            SetVariable("Selector_GroundJumpType", SELECTOR_GROUND_JUMP_TYPE_VERTICAL)
        else
            SetVariable("Selector_GroundJumpType", SELECTOR_GROUND_JUMP_TYPE_FORWARD)
        end
    else
        SetVariable("Selector_GroundJumpType", SELECTOR_GROUND_JUMP_TYPE_BACKWARD)
    end
    
end

function _set4DirStepDir(angle, stickLevel)
    if PRM_4DIR_STEP_STICK_RANGE_F_MIN < angle and angle < PRM_4DIR_STEP_STICK_RANGE_F_MAX then
        if stickLevel <= 0 then
            SetVariable("Selector_GroundJumpType", SELECTOR_GROUND_JUMP_TYPE_VERTICAL)
        else
            SetVariable("Selector_GroundJumpType", SELECTOR_GROUND_JUMP_TYPE_FORWARD)
        end
    elseif angle > PRM_4DIR_STEP_STICK_RANGE_L_MIN and angle < PRM_4DIR_STEP_STICK_RANGE_L_MAX then
        SetVariable("Selector_GroundJumpType", SELECTOR_GROUND_JUMP_TYPE_LEFTSIDE)
    elseif angle >= PRM_4DIR_STEP_STICK_RANGE_R_MIN and angle < PRM_4DIR_STEP_STICK_RANGE_R_MAX then
        SetVariable("Selector_GroundJumpType", SELECTOR_GROUND_JUMP_TYPE_RIGHTSIDE)
    else
        SetVariable("Selector_GroundJumpType", SELECTOR_GROUND_JUMP_TYPE_BACKWARD)
    end
    
end

function _set4DirStepTilt(angle)
    local jumpDir = hkbGetVariable("Selector_GroundJumpType")
    if jumpDir == SELECTOR_GROUND_JUMP_TYPE_VERTICAL then
    elseif jumpDir == SELECTOR_GROUND_JUMP_TYPE_FORWARD then
        if angle > PRM_4DIR_STEP_NO_TILT_STICK_RANGE_F_MIN and angle < PRM_4DIR_STEP_NO_TILT_STICK_RANGE_F_MAX then
        else
            act(TurnToDirection, angle - PRM_4DIR_STEP_ANGLE_CENTER_F)
        end
    elseif jumpDir == SELECTOR_GROUND_JUMP_TYPE_BACKWARD then
        if angle > 0 then
            act(TurnToDirection, angle - PRM_4DIR_STEP_ANGLE_CENTER_B)
        else
            act(TurnToDirection, angle + PRM_4DIR_STEP_ANGLE_CENTER_B)
        end
    elseif jumpDir == SELECTOR_GROUND_JUMP_TYPE_LEFTSIDE then
        act(TurnToDirection, angle - PRM_4DIR_STEP_ANGLE_CENTER_L)
    elseif jumpDir == SELECTOR_GROUND_JUMP_TYPE_RIGHTSIDE then
        act(TurnToDirection, angle - PRM_4DIR_STEP_ANGLE_CENTER_R)
    end
    
end

function _set8DirStepDir(stickAngle, stickLevel)
    if stickLevel <= 0 then
        SetVariable("Selector_GroundJumpType", SELECTOR_GROUND_JUMP_TYPE_VERTICAL)
    elseif stickAngle >= PRM_GROUND_JUMP_FORWARD_STICK_RANGE_MIN and stickAngle <= PRM_GROUND_JUMP_FORWARD_STICK_RANGE_MAX then
        SetVariable("Selector_GroundJumpType", SELECTOR_GROUND_JUMP_TYPE_FORWARD)
    elseif stickAngle > PRM_GROUND_JUMP_RIGHT_FORWARD_STICK_RANGE_MIN and stickAngle < PRM_GROUND_JUMP_RIGHT_FORWARD_STICK_RANGE_MAX then
        SetVariable("Selector_GroundJumpType", SELECTOR_GROUND_JUMP_TYPE_RIGHT_FORWARD)
    elseif stickAngle > PRM_GROUND_JUMP_RIGHT_STICK_RANGE_MIN and stickAngle < PRM_GROUND_JUMP_RIGHT_STICK_RANGE_MAX then
        SetVariable("Selector_GroundJumpType", SELECTOR_GROUND_JUMP_TYPE_RIGHTSIDE)
    elseif stickAngle > PRM_GROUND_JUMP_RIGHT_BACKWARD_STICK_RANGE_MIN and stickAngle < PRM_GROUND_JUMP_RIGHT_BACKWARD_STICK_RANGE_MAX then
        SetVariable("Selector_GroundJumpType", SELECTOR_GROUND_JUMP_TYPE_RIGHT_BACKWARD)
    elseif stickAngle > PRM_GROUND_JUMP_LEFT_BACKWARD_STICK_RANGE_MIN and stickAngle < PRM_GROUND_JUMP_LEFT_BACKWARD_STICK_RANGE_MAX then
        SetVariable("Selector_GroundJumpType", SELECTOR_GROUND_JUMP_TYPE_LEFT_BACKWARD)
    elseif stickAngle > PRM_GROUND_JUMP_LEFT_STICK_RANGE_MIN and stickAngle < PRM_GROUND_JUMP_LEFT_STICK_RANGE_MAX then
        SetVariable("Selector_GroundJumpType", SELECTOR_GROUND_JUMP_TYPE_LEFTSIDE)
    elseif stickAngle > PRM_GROUND_JUMP_LEFT_FORWARD_STICK_RANGE_MIN and stickAngle < PRM_GROUND_JUMP_LEFT_FORWARD_STICK_RANGE_MAX then
        SetVariable("Selector_GroundJumpType", SELECTOR_GROUND_JUMP_TYPE_LEFT_FORWARD)
    else
        SetVariable("Selector_GroundJumpType", SELECTOR_GROUND_JUMP_TYPE_BACKWARD)
    end
    
end

function _set8DirStepTilt(angle)
    local jumpType = hkbGetVariable("Selector_GroundJumpType")
    if jumpType == SELECTOR_GROUND_JUMP_TYPE_VERTICAL then
    elseif jumpType == SELECTOR_GROUND_JUMP_TYPE_FORWARD_LOCKON then
    elseif jumpType == SELECTOR_GROUND_JUMP_TYPE_FORWARD then
    elseif jumpType == SELECTOR_GROUND_JUMP_TYPE_BACKWARD then
        if angle > 0 then
            act(TurnToDirection, angle - PRM_GROUND_STEP_ANGLE_CENTER_B)
        else
            act(TurnToDirection, angle + PRM_GROUND_STEP_ANGLE_CENTER_B)
        end
    elseif jumpType == SELECTOR_GROUND_JUMP_TYPE_LEFTSIDE then
        act(TurnToDirection, angle - PRM_GROUND_STEP_ANGLE_CENTER_L)
    elseif jumpType == SELECTOR_GROUND_JUMP_TYPE_RIGHTSIDE then
        act(TurnToDirection, angle - PRM_GROUND_STEP_ANGLE_CENTER_R)
    elseif jumpType == SELECTOR_GROUND_JUMP_TYPE_LEFT_FORWARD then
        act(TurnToDirection, angle - PRM_GROUND_STEP_ANGLE_CENTER_F_L)
    elseif jumpType == SELECTOR_GROUND_JUMP_TYPE_RIGHT_FORWARD then
        act(TurnToDirection, angle - PRM_GROUND_STEP_ANGLE_CENTER_F_R)
    elseif jumpType == SELECTOR_GROUND_JUMP_TYPE_LEFT_BACKWARD then
        act(TurnToDirection, angle - PRM_GROUND_STEP_ANGLE_CENTER_B_L)
    elseif jumpType == SELECTOR_GROUND_JUMP_TYPE_RIGHT_BACKWARD then
        act(TurnToDirection, angle - PRM_GROUND_STEP_ANGLE_CENTER_B_R)
    end
    
end

function _fireGroundStep(current_hkb_state)
    g_enableTransitSprint = TRUE
    local stickAngle = 0
    local stickLevel = 0
    if env(IsLocked) == TRUE then
        if current_hkb_state == HKB_STATE_SPRINT_JUMP_START then
            stickAngle = hkbGetVariable("MoveAngle")
            stickLevel = hkbGetVariable("MoveSpeedLevel")
        else
            act(TurnToLockonTargetImmediately)
            stickAngle = hkbGetVariable("KickAngle")
            stickLevel = hkbGetVariable("KickStickLevel")
        end
    else
        stickAngle = 0
        stickLevel = hkbGetVariable("MoveSpeedLevel")
    end
    _set4DirStepDir(stickAngle, stickLevel)
    _set4DirStepTilt(stickAngle)
    FireEvent("W_GroundStep")
    
end

function _StartAutoAim()
    g_autoAimTime = 0
    g_autoAimFlag = TRUE
    
end

function _UpdateAutoAim()
    local upper_limit = 0.1666666716337204
    if upper_limit > g_autoAimTime then
        if env(IsLocked) == FALSE then
            act(SetAutoCaptureTarget)
        end
        g_autoAimTime = g_autoAimTime + env(GetDT) * 0.0010000000474974513
    else
    end
    
end

function _StopAutoAim()
    g_autoAimFlag = FALSE
    g_autoAimTime = 1
    act(ClearAutoCaptureTarget)
    
end

function _UpdateThrowAnimSelector()
    if env(IsThrowPosRealign) == TRUE then
        local animId = env(GetThrowAnimID)
        local animCategory = 0
        SetVariable("Selector_ThrowAnimCategory", animCategory)
        SetVariable("Selector_ThrowAnimId", animId)
    end
    
end

local g_wallAlignOffset = 0
local g_masterAngleDelta = 0

function _UpdateFallProtection(current_hkb_state)
    if env(IsDebugDash) == TRUE then
        return
    end
    local currentStyle = g_paramHkbState[current_hkb_state][PARAM_HKB_STATE__STYLE_TYPE]
    local currentState = g_paramHkbState[current_hkb_state][PARAM_HKB_STATE__STATE_TYPE]
    if currentStyle == STYLE_TYPE_COVER or currentStyle == STYLE_TYPE_COVER_LOOK or currentStyle == STYLE_TYPE_HANG or currentStyle == STYLE_TYPE_WIRE_FALL or currentStyle == STYLE_TYPE_CLING or currentStyle == STYLE_TYPE_SWIM or currentStyle == STYLE_TYPE_DIVE or currentStyle == STYLE_TYPE_AGING_FALL then
        return
    end
    if current_hkb_state == HKB_STATE_GROUND_WIRE_MOVE_READY or current_hkb_state == HKB_STATE_SPRINT_WIRE_MOVE_READY then
        return
    end
    if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_DISABLE_FALL_PROTECT) == TRUE then
        return
    end
    if g_paramHkbState[current_hkb_state][PARAM_HKB_STATE__ENABLE_FALL_PROTECT_WALL_STRONG] == TRUE and env(IsSpEffectBehaviorRefID, SP_EF_REF_DISABLE_FALL_PROTECT_WALL_STRONG) == FALSE then
        act(FallPreventionAssist, 0)
    end
    if g_paramHkbState[current_hkb_state][PARAM_HKB_STATE__ENABLE_FALL_PROTECT_WALL_WEAK] == TRUE and env(IsSpEffectBehaviorRefID, SP_EF_REF_DISABLE_FALL_PROTECT_WALL_WEAK) == FALSE then
        act(FallPreventionAssist, 1)
    else
        act(DisableFloorAdhesionDuringMove)
    end
    
end

function _FireSpAttackCombo(current_hkb_state)
    local spAtkNum = env(GetEquipWeaponSpecialCategoryNumber, HAND_RIGHT)
    local enableCombo = FALSE
    local enableAction = env(IsUserJumpRequest, ACTION_ARM_SPECIAL_ATTACK)
    local spAtkType = env(GetEquipWeaponSpecialCategoryNumber, HAND_RIGHT)
    if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_SP_ATK_COMBO) == TRUE and g_beforeSpAttackNum == spAtkNum then
        enableCombo = TRUE
    end
    g_beforeSpAttackNum = spAtkNum
    if enableCombo == FALSE then
        return FALSE
    end
    if spAtkType == SP_ATK_TYPE_104 and (current_hkb_state == HKB_STATE_GROUND_SPACIAL_ATTACK_HOLD_ACTION or current_hkb_state == HKB_STATE_GROUND_SPACIAL_ATTACK_HOLD_ACTION_NO_RESOURCE) then
        if spAtkType == SP_ATK_TYPE_104 and enableAction == FALSE then
            FireEvent("W_GroundSpacialAttackVariationCombo2NoResource")
        else
            FireEvent("W_GroundSpacialAttackVariationCombo2")
        end
    end
    if current_hkb_state == HKB_STATE_GROUND_SPECIAL_ATTACK_COMBO_1 or current_hkb_state == HKB_STATE_GROUND_SPECIAL_ATTACK_COMBO_1_RELEASE or current_hkb_state == HKB_STATE_LAND_AIR_SPECIAL_ATTACK or current_hkb_state == HKB_STATE_LAND_AIR_SPECIAL_ATTACK_START or current_hkb_state == HKB_STATE_LAND_AIR_SPECIAL_ATTACK_LOOP or current_hkb_state == HKB_STATE_SPRINT_SPECIAL_ATTACK or current_hkb_state == HKB_STATE_SPRINT_SPECIAL_ATTACK_RELEASE or current_hkb_state == HKB_STATE_LAND_GROUND_SPECIAL_ATTACK_JUMP_START or current_hkb_state == HKB_STATE_LAND_GROUND_SPECIAL_ATTACK_JUMP_FALL_LOOP then
        if env(GetEquipWeaponSpecialCategoryNumber, HAND_RIGHT) == SP_ATK_TYPE_102 and env(IsSpEffectBehaviorRefID, SP_EF_REF_WEP_SP_ATK_UNLOCK_102_COMBO) == FALSE then
            return FALSE
        elseif env(GetEquipWeaponSpecialCategoryNumber, HAND_RIGHT) == SP_ATK_TYPE_107 and env(IsSpEffectBehaviorRefID, SP_EF_REF_WEP_SP_ATK_UNLOCK_107_COMBO) == FALSE then
            FireEvent("W_GroundSpecialAttackCombo2Finish")
        elseif env(GetEquipWeaponSpecialCategoryNumber, HAND_RIGHT) == SP_ATK_TYPE_108 and env(IsSpEffectBehaviorRefID, SP_EF_REF_WEP_SP_ATK_UNLOCK_108_FINISH) == FALSE then
            FireEvent("W_GroundSpecialAttackCombo2Finish")
        else
            FireEvent("W_GroundSpecialAttackCombo2")
        end
    elseif current_hkb_state == HKB_STATE_GROUND_SPECIAL_ATTACK_COMBO_2 then
        if env(GetEquipWeaponSpecialCategoryNumber, HAND_RIGHT) == SP_ATK_TYPE_105 and env(IsSpEffectBehaviorRefID, SP_EF_REF_WEP_SP_ATK_UNLOCK_105_COMBO) == FALSE then
            FireEvent("W_GroundSpacialAttackVariationCombo3")
        elseif env(GetEquipWeaponSpecialCategoryNumber, HAND_RIGHT) == SP_ATK_TYPE_107 and env(IsSpEffectBehaviorRefID, SP_EF_REF_WEP_SP_ATK_UNLOCK_107_COMBO) == FALSE then
            return FALSE
        elseif env(GetEquipWeaponSpecialCategoryNumber, HAND_RIGHT) == SP_ATK_TYPE_108 and env(IsSpEffectBehaviorRefID, SP_EF_REF_WEP_SP_ATK_UNLOCK_108_FINISH) == FALSE then
            return FALSE
        else
            FireEvent("W_GroundSpecialAttackCombo3")
        end
    elseif current_hkb_state == HKB_STATE_GROUND_SPACIAL_ATTACK_HOLD_END then
        FireEvent("W_GroundSpecialAttackCombo1")
    elseif current_hkb_state == HKB_STATE_GROUND_SPECIAL_ATTACK_COMBO_3 then
        FireEvent("W_GroundSpecialAttackCombo4")
    elseif current_hkb_state == HKB_STATE_GROUND_SPECIAL_ATTACK_COMBO_4 then
        FireEvent("W_GroundSpecialAttackCombo5")
    end
    return TRUE
    
end

function _LandFreeFall(current_hkb_state, fallState)
    if _IsCrouchFall(current_hkb_state, fallState) == TRUE then
        FireEventNoReset("W_LandCrouchFreeFall")
    else
        FireEventNoReset("W_LandFreeFall")
    end
    return
    
end

function _IsCrouchFall(current_hkb_state, fallState)
    if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_CROUCH) == TRUE or current_hkb_state == HKB_STATE_SELF_CROUCH_FREE_FALL_START or current_hkb_state == HKB_STATE_CROUCH_FREE_FALL or current_hkb_state == HKB_STATE_GROUND_JUMP_LAND_READY and fallState == HKB_STATE_SELF_CROUCH_FREE_FALL_START then
        return TRUE
    end
    return FALSE
    
end

function ExtractOffset(value, smallDigit, bigDidit)
    if bigDidit < smallDigit or value < 0 or smallDigit <= 0 or bigDidit <= 0 then
        return -1
    end
    return (value % 10 ^ bigDidit - value % 10 ^ (smallDigit - 1)) / 10 ^ (smallDigit - 1)
    
end

g_ValidateAddReactionTable = {[BEH_ADD_R_SUB_WEAPON_EXPAND] = function (current_hkb_state)
    local currentStyle = g_paramHkbState[current_hkb_state][PARAM_HKB_STATE__STYLE_TYPE]
    local currentState = g_paramHkbState[current_hkb_state][PARAM_HKB_STATE__STATE_TYPE]
    if g_EndSubWeaponChange == TRUE and ((currentStyle ~= STYLE_TYPE_STAND or env(IsStayState) ~= TRUE and env(IsMoveCancelPossible) ~= TRUE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_CAMO_STANDBY_STATE) ~= TRUE) and current_hkb_state ~= HKB_STATE_STAND_IDLE and current_hkb_state ~= HKB_STATE_SUB_WEAPON_EXPAND and current_hkb_state ~= HKB_STATE_SUB_WEAPON_EXPAND_MOVE and current_hkb_state ~= HKB_STATE_SUB_WEAPON_EXPAND_2 and current_hkb_state ~= HKB_STATE_SUB_WEAPON_EXPAND_2_MOVE and current_hkb_state ~= HKB_STATE_SUB_WEAPON_EXPAND_3 and current_hkb_state ~= HKB_STATE_SUB_WEAPON_EXPAND_3_MOVE or currentStyle == STYLE_TYPE_STAND and env(IsSpEffectBehaviorRefID, SP_EF_REF_IN_WATERSIDE_AREA) == TRUE) and (currentStyle ~= STYLE_TYPE_CROUCH or GetLocomotionType() == LOCOMOTION_TYPE_MOVE or env(IsStayState) ~= TRUE and (env(IsMoveCancelPossible) ~= TRUE or hkbGetVariable("MoveSpeedLevel") ~= 0)) and current_hkb_state ~= HKB_STATE_CROUCH_IDLE and current_hkb_state ~= HKB_STATE_CROUCH_SUB_WEAPON_EXPAND_1 and current_hkb_state ~= HKB_STATE_CROUCH_SUB_WEAPON_EXPAND_2 and current_hkb_state ~= HKB_STATE_CROUCH_SUB_WEAPON_EXPAND_3 then
        return TRUE
    end
    return FALSE
    
end, [BEH_ADD_R_NIGHTVISION_START] = function (current_hkb_state)
    if env(ActionUnlocked, ACTION_UNLOCK_TYPE_NIGHTVISION) == TRUE and env(GetMapViewType) == MAP_VISIBILITY_TYPE_PICHDARK and env(IsSpEffectBehaviorRefID, SP_EF_REF_ACTIVE_NIGHTVISON) == FALSE then
        return TRUE
    end
    return FALSE
    
end, [BEH_ADD_R_NON_COMBAT_AREA_ENTER] = function (current_hkb_state)
    local currentState = g_paramHkbState[current_hkb_state][PARAM_HKB_STATE__STATE_TYPE]
    if currentState == STATE_TYPE_REACTION_MAP_ENTER and env(IsSpEffectBehaviorRefID, SP_EF_REF_IN_NON_COMBAT_AREA) == TRUE and env(GetWeaponSwitchState) ~= ARM_STYLE_SAFE and env(IsDebugDash) == FALSE then
        return TRUE
    end
    return FALSE
    
end, [BEH_ADD_R_NON_COMBAT_AREA_LEAVE] = function (current_hkb_state)
    local currentState = g_paramHkbState[current_hkb_state][PARAM_HKB_STATE__STATE_TYPE]
    if currentState == STATE_TYPE_REACTION_MAP_ENTER and env(IsSpEffectBehaviorRefID, SP_EF_REF_IN_NON_COMBAT_AREA) == FALSE and env(GetWeaponSwitchState) == ARM_STYLE_SAFE then
        return TRUE
    end
    return FALSE
    
end, [BEH_ADD_R_NIGHTVISION_END] = function (current_hkb_state)
    if env(GetMapViewType) ~= MAP_VISIBILITY_TYPE_PICHDARK and env(IsSpEffectBehaviorRefID, SP_EF_REF_ACTIVE_NIGHTVISON) == TRUE then
        return TRUE
    end
    return FALSE
    
end, [BEH_ADD_R_HIT_DAMAGE] = function (current_hkb_state)
    local damageType = env(GetReceivedDamageType)
    local damageLevel = env(GetDamageLevel)
    local damageElement = env(GetSpecialAttribute)
    if (damageElement ~= DAMAGE_ELEMENT_LIGHTNING and damageElement ~= DAMAGE_ELEMENT_BLUE_LIGHTNING or currentStyle ~= STYLE_TYPE_FREE_FALL and currentStyle ~= STYLE_TYPE_WIRE_FALL) and damageLevel == DAMAGE_LEVEL_MINIMUM and (damageType == DAMAGE_TYPE_WEAK_POINT or damageType == DAMAGE_TYPE_DAMAGEBREAK or damageType == DAMAGE_TYPE_BACK or damageType == 99999) and (env(HasThrowRequest) ~= TRUE or env(IsThrowPosRealign) ~= FALSE or env(IsNormalDmgPassThroughDuringThrow) ~= FALSE) and env(GetSpecialAttribute) ~= DAMAGE_ELEMENT_FIRE then
        return TRUE
    end
    return FALSE
    
end, [BEH_ADD_R_SWIM_HIT_DAMAGE] = function (current_hkb_state)
    local damageType = env(GetReceivedDamageType)
    local damageLevel = env(GetDamageLevel)
    if damageLevel == DAMAGE_LEVEL_MINIMUM and (damageType == DAMAGE_TYPE_DEATH_RECOVER or damageType == DAMAGE_TYPE_WEAK_POINT or damageType == DAMAGE_TYPE_BACK or damageType == 99999) and (env(HasThrowRequest) ~= TRUE or env(IsThrowPosRealign) ~= FALSE or env(IsNormalDmgPassThroughDuringThrow) ~= FALSE) and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_NO_DAMAGE_ANIM) == FALSE then
        return TRUE
    end
    return FALSE
    
end, [BEH_ADD_R_GUARD_DAMAGE] = function (current_hkb_state)
    local damageType = env(GetReceivedDamageType)
    local damageLevel = env(GetDamageLevel)
    local damageElement = env(GetSpecialAttribute)
    local currentStyle = g_paramHkbState[current_hkb_state][PARAM_HKB_STATE__STYLE_TYPE]
    local currentState = g_paramHkbState[current_hkb_state][PARAM_HKB_STATE__STATE_TYPE]
    if (damageType == DAMAGE_TYPE_GUARD or damageType == DAMAGE_TYPE_GUARDBREAK or damageType == DAMAGE_TYPE_GUARDATTACKER_STAMZERO) and (currentState ~= STATE_TYPE_STANDBY_SUB_GUARD and currentState ~= STATE_TYPE_ACTION_SUB_GUARD and currentState ~= STATE_TYPE_REACTION_SUB_GUARD and (damageElement ~= DAMAGE_ELEMENT_LIGHTNING and damageElement ~= DAMAGE_ELEMENT_BLUE_LIGHTNING or currentStyle ~= STYLE_TYPE_FREE_FALL and currentStyle ~= STYLE_TYPE_WIRE_FALL) and (damageLevel == DAMAGE_LEVEL_MINIMUM or (damageLevel == DAMAGE_LEVEL_SMALL or damageLevel == DAMAGE_LEVEL_MIDDLE or damageLevel == DAMAGE_LEVEL_LARGE or damageLevel == DAMAGE_LEVEL_PUSH) and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_GUARD_LEVEL_EXCHANGE_MINIMUM) == TRUE) or (currentState == STATE_TYPE_STANDBY_SUB_GUARD or currentState == STATE_TYPE_ACTION_SUB_GUARD or currentState == STATE_TYPE_REACTION_SUB_GUARD) and damageElement ~= DAMAGE_ELEMENT_LIGHTNING and damageElement ~= DAMAGE_ELEMENT_BLUE_LIGHTNING and (env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_JUST_DEFLECT) == TRUE or currentStyle ~= STYLE_TYPE_FREE_FALL and (damageLevel == DAMAGE_LEVEL_MINIMUM or damageLevel == DAMAGE_LEVEL_SMALL or (damageLevel == DAMAGE_LEVEL_MIDDLE or damageLevel == DAMAGE_LEVEL_LARGE or damageLevel == DAMAGE_LEVEL_PUSH) and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_GUARD_LEVEL_EXCHANGE_MINIMUM) == TRUE) or (damageLevel == DAMAGE_LEVEL_MIDDLE or damageLevel == DAMAGE_LEVEL_LARGE) and env(IsSpEffectBehaviorRefID, 900) == TRUE or currentStyle == STYLE_TYPE_FREE_FALL and (damageLevel == DAMAGE_LEVEL_MINIMUM or damageLevel == DAMAGE_LEVEL_SMALL or damageLevel == DAMAGE_LEVEL_MIDDLE or damageLevel == DAMAGE_LEVEL_LARGE or damageLevel == DAMAGE_LEVEL_PUSH or damageLevel == DAMAGE_LEVEL_FLING))) and (env(HasThrowRequest) ~= TRUE or env(IsThrowPosRealign) ~= FALSE or env(IsNormalDmgPassThroughDuringThrow) ~= FALSE) then
        return TRUE
    end
    return FALSE
    
end, [BEH_ADD_R_BREAK_DAMAGE] = function (current_hkb_state)
    local damageType = env(GetReceivedDamageType)
    local easyDeflectedDir = env(GetGuardBounceBehavior)
    local hardDeflectedDir = env(GetJustGuardBounceBehavior)
    if ((damageType == DAMAGE_TYPE_GUARDED or damageType == DAMAGE_TYPE_GUARDED_LEFT or damageType == DAMAGE_TYPE_DEF_REAPEL_STAM_DAMAGE_BREAK) and (hardDeflectedDir == DEFLECTED_REACTION_TYPE_LEFT or hardDeflectedDir == DEFLECTED_REACTION_TYPE_RIGHT or hardDeflectedDir == DEFLECTED_REACTION_TYPE_ADD) or (damageType == DAMAGE_TYPE_GUARDED_NO_DEFLECT_RIGHT or damageType == DAMAGE_TYPE_GUARDED_NO_DEFLECT_LEFT) and (easyDeflectedDir == DEFLECTED_REACTION_TYPE_LEFT or easyDeflectedDir == DEFLECTED_REACTION_TYPE_RIGHT or hardDeflectedDir == DEFLECTED_REACTION_TYPE_ADD)) and (env(HasThrowRequest) ~= TRUE or env(IsThrowPosRealign) ~= FALSE or env(IsNormalDmgPassThroughDuringThrow) ~= FALSE) then
        return TRUE
    end
    return FALSE
    
end, [BEH_ADD_R_SPECIAL_DAMAGE] = function (current_hkb_state)
    local damageType = env(GetReceivedDamageType)
    local damageLevel = env(GetDamageLevel)
    local currentState = g_paramHkbState[current_hkb_state][PARAM_HKB_STATE__STATE_TYPE]
    if (env(GetSpecialAttribute) ~= DAMAGE_ELEMENT_NONE and damageLevel ~= DAMAGE_LEVEL_NONE or env(IsSpEffectBehaviorRefID, SP_EF_REF_FIRE_ADD_DAMAGE_BURN) == TRUE and currentState ~= STATE_TYPE_REACTION_DEATH and currentState ~= STATE_TYPE_REACTION_DEATH_START and currentState ~= STATE_TYPE_REACTION_DEATH_LOOP and currentState ~= STATE_TYPE_REACTION_DEATH_REVIVAL_STAY_LOOP and currentState ~= STATE_TYPE_REACTION_THROW_DEATH_START and currentState ~= STATE_TYPE_REACTION_THROW_DEATH_LOOP and currentState ~= STATE_TYPE_REACTION_THROW_DEATH_REVIVAL_STAY_LOOP) and (damageType == DAMAGE_TYPE_WEAK_POINT or damageType == DAMAGE_TYPE_BACK or damageType == 99999) and (env(HasThrowRequest) ~= TRUE or env(IsThrowPosRealign) ~= FALSE or env(IsNormalDmgPassThroughDuringThrow) ~= FALSE) then
        return TRUE
    end
    return FALSE
    
end, [BEH_ADD_R_ADD_ACTION_INPUT_RESEND] = function (current_hkb_state)
    if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_RESEND) == TRUE and (env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_JUMP) == TRUE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_JUMP_CANCEL) == FALSE or env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_USE_ITEM) == TRUE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_USE_ITEM_CANCEL) == FALSE or env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_CROUCH) == TRUE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_CROUCH_CANCEL) == FALSE or env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_ATTACK) == TRUE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_ATTACK_CANCEL) == FALSE or env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_GUARD) == TRUE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_GUARD_CANCEL) == FALSE or env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_SUB_ATTACK) == TRUE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_SUB_ATTACK_CANCEL) == FALSE or env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_WIRE_SHOOT) == TRUE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_WIRE_SHOOT_CANCEL) == FALSE or env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_WALL_HANG) == TRUE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_WALL_HANG_CANCEL) == FALSE or env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_KICK) == TRUE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_KICK_CANCEL) == FALSE or env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_SUB_WEAPON_CHANGE) == TRUE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_SUB_WEAPON_CHANGE_CANCEL) == FALSE) then
        return TRUE
    end
    return FALSE
    
end, [BEH_ADD_R_BARE_HAND_RIGHT_START] = function (current_hkb_state)
    if (env(ActionUnlocked, ACTION_UNLOCK_TYPE_MAIN_WEAPONE) == FALSE or env(GetWeaponSwitchState) == ARM_STYLE_SAFE) and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_DISABLE_ADD_FINGER_RIGHT) == FALSE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ADD_FINGER_RIGHT_ACTIVE) == FALSE then
        return TRUE
    end
    return FALSE
    
end, [BEH_ADD_R_BARE_HAND_RIGHT_END] = function (current_hkb_state)
    local currentStyle = g_paramHkbState[current_hkb_state][PARAM_HKB_STATE__STYLE_TYPE]
    if (env(GetWeaponSwitchState) ~= ARM_STYLE_SAFE and env(ActionUnlocked, ACTION_UNLOCK_TYPE_MAIN_WEAPONE) == TRUE or currentStyle == STYLE_TYPE_HANG or env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_DISABLE_ADD_FINGER_RIGHT) == TRUE) and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ADD_FINGER_RIGHT_ACTIVE) == TRUE then
        return TRUE
    end
    return FALSE
    
end}

g_ValidateAddActionTable = {}

function _Validate(current_hkb_state, array_behavior)
    if array_behavior ~= nil then
        for f58_local3, f58_local4 in pairs(array_behavior) do
            if f58_local4 < 100 then
                if _ValidateReaction(current_hkb_state, f58_local4) == TRUE then
                    return f58_local4
                end
            elseif _ValidateAction(current_hkb_state, f58_local4) == TRUE then
                return f58_local4
            end
        end
    end
    return BEH_NONE
    
end

function _ValidateReaction(current_hkb_state, reaction)
    local currentState = g_paramHkbState[current_hkb_state][PARAM_HKB_STATE__STATE_TYPE]
    local validateFunc = g_ValidateReactionTable[reaction]
    if validateFunc ~= nil and validateFunc(current_hkb_state, currentState) == TRUE then
        return TRUE
    end
    return FALSE
    
end

function _ValidateAction(current_hkb_state, action)
    local validateFunc = g_ValidateActionTable[action]
    if validateFunc ~= nil and validateFunc(current_hkb_state) == TRUE then
        return TRUE
    end
    return FALSE
    
end

g_behaviorValidateOrderAddAction = {}
g_behaviorValidateOrderAddReaction = {{BEH_ADD_R_BARE_HAND_RIGHT_START, g_ValidateAddReactionTable[BEH_ADD_R_BARE_HAND_RIGHT_START]}, {BEH_ADD_R_BARE_HAND_RIGHT_END, g_ValidateAddReactionTable[BEH_ADD_R_BARE_HAND_RIGHT_END]}, {BEH_ADD_R_HIT_DAMAGE, g_ValidateAddReactionTable[BEH_ADD_R_HIT_DAMAGE]}, {BEH_ADD_R_SWIM_HIT_DAMAGE, g_ValidateAddReactionTable[BEH_ADD_R_SWIM_HIT_DAMAGE]}, {BEH_ADD_R_GUARD_DAMAGE, g_ValidateAddReactionTable[BEH_ADD_R_GUARD_DAMAGE]}, {BEH_ADD_R_BREAK_DAMAGE, g_ValidateAddReactionTable[BEH_ADD_R_BREAK_DAMAGE]}, {BEH_ADD_R_SPECIAL_DAMAGE, g_ValidateAddReactionTable[BEH_ADD_R_SPECIAL_DAMAGE]}, {BEH_ADD_R_SUB_WEAPON_EXPAND, g_ValidateAddReactionTable[BEH_ADD_R_SUB_WEAPON_EXPAND]}, {BEH_ADD_R_NIGHTVISION_START, g_ValidateAddReactionTable[BEH_ADD_R_NIGHTVISION_START]}, {BEH_ADD_R_NIGHTVISION_END, g_ValidateAddReactionTable[BEH_ADD_R_NIGHTVISION_END]}, {BEH_ADD_R_ADD_ACTION_INPUT_RESEND, g_ValidateAddReactionTable[BEH_ADD_R_ADD_ACTION_INPUT_RESEND]}, {BEH_ADD_R_NON_COMBAT_AREA_ENTER, g_ValidateAddReactionTable[BEH_ADD_R_NON_COMBAT_AREA_ENTER]}, {BEH_ADD_R_NON_COMBAT_AREA_LEAVE, g_ValidateAddReactionTable[BEH_ADD_R_NON_COMBAT_AREA_LEAVE]}}
g_addBehaviorTable = {[BEH_ADD_R_SUB_WEAPON_EXPAND] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, [BEH_ADD_R_NIGHTVISION_START] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0}, [BEH_ADD_R_NIGHTVISION_END] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0}, [BEH_ADD_R_HIT_DAMAGE] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1}, [BEH_ADD_R_SWIM_HIT_DAMAGE] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0}, [BEH_ADD_R_GUARD_DAMAGE] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0}, [BEH_ADD_R_BREAK_DAMAGE] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, [BEH_ADD_R_SPECIAL_DAMAGE] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, [BEH_ADD_R_ADD_ACTION_INPUT_RESEND] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, [BEH_ADD_R_BARE_HAND_RIGHT_START] = {1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, [BEH_ADD_R_BARE_HAND_RIGHT_END] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, [BEH_ADD_R_NON_COMBAT_AREA_ENTER] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, [BEH_ADD_R_NON_COMBAT_AREA_LEAVE] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}}

g_ValidateReactionTable = {[BEH_R_THROW_DEATH] = function (current_hkb_state, currentState)
    if env(IsThrowSelfDeath) == TRUE and currentState ~= STATE_TYPE_REACTION_DEATH and currentState ~= STATE_TYPE_REACTION_DEATH_START and currentState ~= STATE_TYPE_REACTION_DEATH_LOOP and currentState ~= STATE_TYPE_REACTION_DEATH_REVIVAL_STAY_LOOP and currentState ~= STATE_TYPE_REACTION_THROW_DEATH_START and currentState ~= STATE_TYPE_REACTION_THROW_DEATH_LOOP and currentState ~= STATE_TYPE_REACTION_THROW_DEATH_REVIVAL_STAY_LOOP then
        return TRUE
    end
    return FALSE
    
end, [BEH_R_THROW_KILL] = function (current_hkb_state, currentState)
    if currentState ~= STATE_TYPE_ACTION_THROW_ATK_KILL and env(IsOpponentDeadFromThrow) == TRUE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_THROW_KILL) == TRUE then
        return TRUE
    end
    return FALSE
    
end, [BEH_R_THROW_ESCAPE] = function (current_hkb_state, currentState)
    if currentState ~= STATE_TYPE_REACTION_THROW_ESCAPE and env(IsThrowSuccess) == TRUE then
        return TRUE
    end
    return FALSE
    
end, [BEH_R_DEATH] = function (current_hkb_state, currentState)
    local damageType = env(GetReceivedDamageType)
    if env(IsThrown) == FALSE and currentState ~= STATE_TYPE_REACTION_DEATH and currentState ~= STATE_TYPE_REACTION_DEATH_START and currentState ~= STATE_TYPE_REACTION_DEATH_LOOP and currentState ~= STATE_TYPE_REACTION_DEATH_REVIVAL_STAY_LOOP and currentState ~= STATE_TYPE_REACTION_THROW_DEATH_START and currentState ~= STATE_TYPE_REACTION_THROW_DEATH_LOOP and currentState ~= STATE_TYPE_REACTION_THROW_DEATH_REVIVAL_STAY_LOOP and (damageType == DAMAGE_TYPE_DEATH or damageType == DAMAGE_TYPE_DEATH_AIR or damageType == DAMAGE_TYPE_DEATH_IDLE or damageType == DAMAGE_TYPE_LAND_DEAD or env(GetHP) <= 0) and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_NO_DAMAGE_ANIM) == FALSE or damageType == DAMAGE_TYPE_DEATH_FALLING or damageType == DAMAGE_TYPE_FALL_DEAD_RETURN or damageType == DAMAGE_TYPE_LAND_DEAD_RETURN or damageType == DAMAGE_TYPE_FORCE_DEATH then
        return TRUE
    end
    return FALSE
    
end, [BEH_R_SPECIAL_DAMAGE] = function (current_hkb_state, currentState)
    local damageType = env(GetReceivedDamageType)
    if env(IsThrown) == FALSE and currentState ~= STATE_TYPE_REACTION_DEATH and currentState ~= STATE_TYPE_REACTION_DEATH_START and currentState ~= STATE_TYPE_REACTION_DEATH_LOOP and currentState ~= STATE_TYPE_REACTION_DEATH_REVIVAL_STAY_LOOP and currentState ~= STATE_TYPE_REACTION_THROW_DEATH_START and currentState ~= STATE_TYPE_REACTION_THROW_DEATH_LOOP and currentState ~= STATE_TYPE_REACTION_THROW_DEATH_REVIVAL_STAY_LOOP and damageType ~= DAMAGE_TYPE_DEATH and damageType ~= DAMAGE_TYPE_DEATH_AIR and damageType ~= DAMAGE_TYPE_DEATH_IDLE and (env(GetBehaviorID, BEHAVIOR_IDENTIFICATION_VALUE_SXL_BLAST) == TRUE or env(GetBehaviorID, BEHAVIOR_IDENTIFICATION_VALUE_STORM_BACK_JUMP) == TRUE or env(IsSpEffectBehaviorRefID, SP_EF_REF_ENABLE_INSANE) == TRUE or env(IsSpEffectBehaviorRefID, SP_EF_REF_ENABLE_ELECTRIC_SHOCK) == TRUE or env(IsSpEffectBehaviorRefID, SP_EF_REF_ENABLE_ELECTRIC_SHOCK_WEAK) == TRUE) and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_NO_DAMAGE_ANIM) == FALSE then
        return TRUE
    end
    return FALSE
    
end, [BEH_R_AGING_DAMAGE] = function (current_hkb_state, currentState)
    local damageType = env(GetReceivedDamageType)
    if env("特殊効果発動中か_Behavior参照ID_寿命延長を厳密に取得", SP_EF_REF_AGING) == TRUE and g_forceCrouch == FALSE and env(IsThrown) == FALSE and current_hkb_state ~= HKB_STATE_LAND_DEAD_RETURN_START and current_hkb_state ~= HKB_STATE_FALL_DEAD_RETURN_START and currentState ~= STATE_TYPE_EVENT and currentState ~= STATE_TYPE_EVENT_ENABLE_ACTION_BUTTON and currentState ~= STATE_TYPE_REACTION_DEATH_START and currentState ~= STATE_TYPE_REACTION_DEATH and currentState ~= STATE_TYPE_REACTION_DEATH_START and currentState ~= STATE_TYPE_REACTION_DEATH_LOOP and currentState ~= STATE_TYPE_REACTION_DEATH_REVIVAL_STAY_LOOP and currentState ~= STATE_TYPE_REACTION_THROW_DEATH_START and currentState ~= STATE_TYPE_REACTION_THROW_DEATH_LOOP and currentState ~= STATE_TYPE_REACTION_THROW_DEATH_REVIVAL_STAY_LOOP and damageType ~= DAMAGE_TYPE_DEATH and damageType ~= DAMAGE_TYPE_DEATH_AIR and damageType ~= DAMAGE_TYPE_DEATH_IDLE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_NO_DAMAGE_ANIM) == FALSE then
        return TRUE
    end
    return FALSE
    
end, [BEH_R_CURE_AGING] = function (current_hkb_state, currentState)
    local damageType = env(GetReceivedDamageType)
    if env("特殊効果発動中か_Behavior参照ID_寿命延長を厳密に取得", SP_EF_REF_AGING) == FALSE and env(IsThrowPosRealign) == FALSE and (env(IsStayState) == TRUE or env(IsMoveCancelPossible) == TRUE or env(ActionRequest, ACTION_ARM_ATTACK) == TRUE or env(ActionRequest, ACTION_ARM_SUB_ATTACK) == TRUE or env(ActionRequest, ACTION_ARM_GUARD) == TRUE or env(ActionRequest, ACTION_ARM_WIRE_SHOOT) == TRUE or env(ActionRequest, ACTION_ARM_JUMP) == TRUE or env(ActionRequest, ACTION_ARM_SP_MOVE) == TRUE or env(ActionRequest, ACTION_ARM_USE_ITEM) == TRUE or env(ActionRequest, ACTION_ARM_CHANGE_WEAPON_L) == TRUE or env(ActionRequest, ACTION_ARM_WALL_HANG) == TRUE or env(ActionRequest, ACTION_ARM_BACKSTEP) == TRUE or env(ActionRequest, ACTION_ARM_ROLLING) == TRUE or env(ActionRequest, ACTION_ARM_CROUCH) == TRUE or env(ActionRequest, ACTION_ARM_SHINOBI_WEP_ACTION) == TRUE or env(ActionRequest, ACTION_ARM_EAVESDROP) == TRUE or env(ActionRequest, ACTION_ARM_SPECIAL_ATTACK) == TRUE) then
        return TRUE
    end
    return FALSE
    
end, [BEH_R_HIT_DAMAGE] = function (current_hkb_state, currentState)
    local damageType = env(GetReceivedDamageType)
    local damageLevel = env(GetDamageLevel)
    local damageElement = env(GetSpecialAttribute)
    local currentStyle = g_paramHkbState[current_hkb_state][PARAM_HKB_STATE__STYLE_TYPE]
    if (damageType == DAMAGE_TYPE_DEATH_RECOVER or damageType == DAMAGE_TYPE_WEAK_POINT or damageType == DAMAGE_TYPE_BACK or damageType == 99999 or damageType == DAMAGE_TYPE_DAMAGEBREAK and current_hkb_state == HKB_STATE_STAND_DAMAGE_BREAK or (damageType == DAMAGE_TYPE_GUARD or damageType == DAMAGE_TYPE_GUARDATTACKER_STAMZERO) and (currentState == STATE_TYPE_STANDBY_SUB_GUARD or currentState == STATE_TYPE_ACTION_SUB_GUARD or currentState == STATE_TYPE_REACTION_SUB_GUARD) and (damageElement == DAMAGE_ELEMENT_LIGHTNING or damageElement == DAMAGE_ELEMENT_BLUE_LIGHTNING)) and ((damageElement == DAMAGE_ELEMENT_LIGHTNING or damageElement == DAMAGE_ELEMENT_BLUE_LIGHTNING) and (currentStyle == STYLE_TYPE_FREE_FALL or currentStyle == STYLE_TYPE_WIRE_FALL) and currentState ~= STATE_TYPE_REACTION_DEATH or damageLevel ~= DAMAGE_LEVEL_NONE and damageLevel ~= DAMAGE_LEVEL_MINIMUM or damageLevel == DAMAGE_LEVEL_NONE and env(GetBehaviorID, BEHAVIOR_IDENTIFICATION_VALUE_BLINDING) == TRUE) and (env(HasThrowRequest) ~= TRUE or env(IsThrowPosRealign) ~= FALSE or env(IsNormalDmgPassThroughDuringThrow) ~= FALSE) and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_NO_DAMAGE_ANIM) == FALSE then
        return TRUE
    end
    return FALSE
    
end, [BEH_R_SWIM_HIT_DAMAGE] = function (current_hkb_state, currentState)
    local damageType = env(GetReceivedDamageType)
    local damageLevel = env(GetDamageLevel)
    if damageLevel ~= 0 and damageLevel ~= DAMAGE_LEVEL_MINIMUM and (damageType == DAMAGE_TYPE_DEATH_RECOVER or damageType == DAMAGE_TYPE_WEAK_POINT or damageType == DAMAGE_TYPE_BACK or damageType == 99999 or damageType == DAMAGE_TYPE_DAMAGEBREAK and current_hkb_state == HKB_STATE_STAND_DAMAGE_BREAK) and (env(HasThrowRequest) ~= TRUE or env(IsThrowPosRealign) ~= FALSE or env(IsNormalDmgPassThroughDuringThrow) ~= FALSE) and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_NO_DAMAGE_ANIM) == FALSE then
        return TRUE
    end
    return FALSE
    
end, [BEH_R_GUARD_DAMAGE] = function (current_hkb_state, currentState)
    local damageType = env(GetReceivedDamageType)
    local damageLevel = env(GetDamageLevel)
    local damageElement = env(GetSpecialAttribute)
    local currentStyle = g_paramHkbState[current_hkb_state][PARAM_HKB_STATE__STYLE_TYPE]
    if (damageType == DAMAGE_TYPE_GUARD or damageType == DAMAGE_TYPE_GUARDATTACKER_STAMZERO) and (currentState ~= STATE_TYPE_STANDBY_SUB_GUARD and currentState ~= STATE_TYPE_ACTION_SUB_GUARD and currentState ~= STATE_TYPE_REACTION_SUB_GUARD and ((damageElement == DAMAGE_ELEMENT_LIGHTNING or damageElement == DAMAGE_ELEMENT_BLUE_LIGHTNING) and (currentStyle == STYLE_TYPE_FREE_FALL or currentStyle == STYLE_TYPE_WIRE_FALL) or env(GetGuardLevelAction) > 0) and (g_AddElectroCharge == TRUE or damageLevel ~= DAMAGE_LEVEL_SMALL and damageLevel ~= DAMAGE_LEVEL_MIDDLE and damageLevel ~= DAMAGE_LEVEL_LARGE and damageLevel ~= DAMAGE_LEVEL_PUSH or env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_GUARD_LEVEL_EXCHANGE_MINIMUM) ~= TRUE or (damageElement == DAMAGE_ELEMENT_LIGHTNING or damageElement == DAMAGE_ELEMENT_BLUE_LIGHTNING) and (currentStyle == STYLE_TYPE_FREE_FALL or currentStyle == STYLE_TYPE_WIRE_FALL)) or (currentState == STATE_TYPE_STANDBY_SUB_GUARD or currentState == STATE_TYPE_ACTION_SUB_GUARD or currentState == STATE_TYPE_REACTION_SUB_GUARD) and damageElement ~= DAMAGE_ELEMENT_LIGHTNING and damageElement ~= DAMAGE_ELEMENT_BLUE_LIGHTNING and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_JUST_DEFLECT) == FALSE and (currentStyle ~= STYLE_TYPE_FREE_FALL and damageLevel ~= DAMAGE_LEVEL_MINIMUM and damageLevel ~= DAMAGE_LEVEL_SMALL and (damageLevel ~= DAMAGE_LEVEL_MIDDLE and damageLevel ~= DAMAGE_LEVEL_LARGE and damageLevel ~= DAMAGE_LEVEL_PUSH or env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_GUARD_LEVEL_EXCHANGE_MINIMUM) ~= TRUE) and (damageLevel ~= DAMAGE_LEVEL_MIDDLE and damageLevel ~= DAMAGE_LEVEL_LARGE or env(IsSpEffectBehaviorRefID, 900) ~= TRUE) or currentStyle == STYLE_TYPE_FREE_FALL and damageLevel ~= DAMAGE_LEVEL_MINIMUM and damageLevel ~= DAMAGE_LEVEL_SMALL and damageLevel ~= DAMAGE_LEVEL_MIDDLE and damageLevel ~= DAMAGE_LEVEL_LARGE and damageLevel ~= DAMAGE_LEVEL_PUSH and damageLevel ~= DAMAGE_LEVEL_FLING)) and (env(HasThrowRequest) ~= TRUE or env(IsThrowPosRealign) ~= FALSE or env(IsNormalDmgPassThroughDuringThrow) ~= FALSE) and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_NO_DAMAGE_ANIM) == FALSE then
        return TRUE
    end
    return FALSE
    
end, [BEH_R_SWIM_GUARD_DAMAGE] = function (current_hkb_state, currentState)
    local damageType = env(GetReceivedDamageType)
    local damageLevel = env(GetDamageLevel)
    if (damageType == DAMAGE_TYPE_GUARD or damageType == DAMAGE_TYPE_GUARDATTACKER_STAMZERO) and (env(GetGuardLevelAction) > 0 or damageLevel == DAMAGE_LEVEL_MINIMUM) and (env(HasThrowRequest) ~= TRUE or env(IsThrowPosRealign) ~= FALSE or env(IsNormalDmgPassThroughDuringThrow) ~= FALSE) and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_NO_DAMAGE_ANIM) == FALSE then
        return TRUE
    end
    return FALSE
    
end, [BEH_R_BREAK_DAMAGE] = function (current_hkb_state, currentState)
    local damageType = env(GetReceivedDamageType)
    local damageLevel = env(GetDamageLevel)
    local easyDeflectedDir = env(GetGuardBounceBehavior)
    local hardDeflectedDir = env(GetJustGuardBounceBehavior)
    if damageLevel ~= DAMAGE_LEVEL_MINIMUM and (damageType == DAMAGE_TYPE_GUARDBREAK or damageType == DAMAGE_TYPE_GUARDBREAK_BLAST or damageType == DAMAGE_TYPE_GUARDBREAK_FLING or damageType == DAMAGE_TYPE_DAMAGEBREAK and env(IsDamageMotionOff) == FALSE or (damageType == DAMAGE_TYPE_GUARDED or damageType == DAMAGE_TYPE_GUARDED_LEFT or damageType == DAMAGE_TYPE_DEF_REAPEL_STAM_DAMAGE_BREAK) and (hardDeflectedDir == DEFLECTED_REACTION_TYPE_LEFT or hardDeflectedDir == DEFLECTED_REACTION_TYPE_RIGHT) and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_DISABLE_DEFLECTED_FROM_ENCHANT) == FALSE or (damageType == DAMAGE_TYPE_GUARDED_NO_DEFLECT_RIGHT or damageType == DAMAGE_TYPE_GUARDED_NO_DEFLECT_LEFT) and (easyDeflectedDir == DEFLECTED_REACTION_TYPE_LEFT or easyDeflectedDir == DEFLECTED_REACTION_TYPE_RIGHT) and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_DISABLE_DEFLECTED_FROM_ENCHANT) == FALSE or damageType == DAMAGE_TYPE_WALL_LEFT or damageType == DAMAGE_TYPE_WALL_RIGHT or damageType == DAMAGE_TYPE_PARRY or damageType == DAMAGE_TYPE_DEF_CONTACT_PARRY or damageType == DAMAGE_TYPE_DEF_CONTACT_PARRY_STAMZERO) and (env(HasThrowRequest) ~= TRUE or env(IsThrowPosRealign) ~= FALSE or env(IsNormalDmgPassThroughDuringThrow) ~= FALSE) and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_NO_DAMAGE_ANIM) == FALSE then
        return TRUE
    end
    return FALSE
    
end, [BEH_R_AIR_BREAK_DAMAGE] = function (current_hkb_state, currentState)
    local damageType = env(GetReceivedDamageType)
    if (damageType == DAMAGE_TYPE_GUARDBREAK or damageType == DAMAGE_TYPE_GUARDBREAK_BLAST or damageType == DAMAGE_TYPE_GUARDBREAK_FLING or damageType == DAMAGE_TYPE_DAMAGEBREAK and env(IsDamageMotionOff) == FALSE) and (env(HasThrowRequest) ~= TRUE or env(IsThrowPosRealign) ~= FALSE or env(IsNormalDmgPassThroughDuringThrow) ~= FALSE) and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_NO_DAMAGE_ANIM) == FALSE then
        return TRUE
    end
    return FALSE
    
end, [BEH_R_FALL] = function (current_hkb_state, currentState)
    if env(IsFalling) == TRUE and g_beforeFireLand == -1 and (env("特殊効果発動中か_Behavior参照ID_寿命延長を厳密に取得", SP_EF_REF_AGING) == FALSE or env("特殊効果発動中か_Behavior参照ID_寿命延長を厳密に取得", SP_EF_REF_AGING) == TRUE and currentState ~= STATE_TYPE_REACTION_DEATH and currentState ~= STATE_TYPE_REACTION_DEATH_START and currentState ~= STATE_TYPE_REACTION_DEATH_LOOP and currentState ~= STATE_TYPE_REACTION_DEATH_REVIVAL_STAY_LOOP and currentState ~= STATE_TYPE_REACTION_THROW_DEATH_START and currentState ~= STATE_TYPE_REACTION_THROW_DEATH_LOOP and currentState ~= STATE_TYPE_REACTION_THROW_DEATH_REVIVAL_STAY_LOOP and (GetLocomotionType() ~= LOCOMOTION_TYPE_MOVE and GetLocomotionType() ~= LOCOMOTION_TYPE_SWIM_MOVE or not (env(GetFallHeight) < 30))) then
        return TRUE
    end
    return FALSE
    
end, [BEH_R_LAND] = function (current_hkb_state, currentState)
    if env(IsLanding) == TRUE and env(GetVerticalSpeed) <= 0 and env(IsThrowPosRealign) == FALSE and env(IsThrowActive) == FALSE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_NO_LAND_ANIM) == FALSE and env(GetDT) ~= 0 and (env(IsTrulyLanding) == TRUE or env(IsDebugDash) == TRUE) then
        return TRUE
    end
    return FALSE
    
end, [BEH_R_LAND_WIRE] = function (current_hkb_state, currentState)
    if env(IsLanding) == TRUE and env(GetVerticalSpeed) <= 0 and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_NO_LAND_ANIM) == FALSE and (env(IsTrulyLanding) == TRUE or env(IsDebugDash) == TRUE) then
        return TRUE
    end
    return FALSE
    
end, [BEH_R_LAND_READY] = function (current_hkb_state, currentState)
    if env(IsTrulyLanding) == TRUE and env(GetVerticalSpeed) <= LAND_READY_ENABLE_FALL_SPEED and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_NO_LAND_ANIM) == FALSE and (hkbGetVariable("Selector_GroundJumpType") == SELECTOR_GROUND_JUMP_TYPE_VERTICAL or hkbGetVariable("Selector_GroundJumpType") == SELECTOR_GROUND_JUMP_TYPE_FORWARD) and (current_hkb_state == HKB_STATE_GROUND_JUMP_START or current_hkb_state == HKB_STATE_GROUND_JUMP_FALL or current_hkb_state == HKB_STATE_WALL_JUMP_START or current_hkb_state == HKB_STATE_WALL_JUMP_FALL or current_hkb_state == HKB_STATE_SPRINT_JUMP_START or current_hkb_state == HKB_STATE_SELF_FALL_START or current_hkb_state == HKB_STATE_FREE_FALL or current_hkb_state == HKB_STATE_SELF_CROUCH_FREE_FALL_START or current_hkb_state == HKB_STATE_CROUCH_FREE_FALL) then
        return TRUE
    end
    return FALSE
    
end, [BEH_R_LAND_WIRE_READY] = function (current_hkb_state, currentState)
    if env(IsTrulyLanding) == TRUE and env(GetVerticalSpeed) <= LAND_WIRE_READY_ENABLE_FALL_SPEED and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_NO_LAND_ANIM) == FALSE and (current_hkb_state == HKB_STATE_WIRE_MOVE or current_hkb_state == HKB_STATE_GROUND_WIRE_MOVE_START or current_hkb_state == HKB_STATE_SPRINT_WIRE_MOVE_START or current_hkb_state == HKB_STATE_AIR_WIRE_MOVE_START or current_hkb_state == HKB_STATE_AIR_BREAK_FALL_WIRE_MOVE_START or current_hkb_state == HKB_STATE_WIRE_MOVE_WIRE_MOVE_START or current_hkb_state == HKB_STATE_WIRE_MOVE_WIRE_2_MOVE_START) then
        return TRUE
    end
    return FALSE
    
end, [BEH_R_LAND_WATER] = function (current_hkb_state, currentState)
    if env(IsLanding) == TRUE and env(IsSwimContact) == TRUE and env(GetVerticalSpeed) <= 0 and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_NO_LAND_ANIM) == FALSE and (env(IsTrulyLanding) == TRUE or env(IsDebugDash) == TRUE) then
        return TRUE
    end
    return FALSE
    
end, [BEH_R_STAND_MOVE_TO_SWIM] = function (current_hkb_state, currentState)
    if env(IsDebugDash) == FALSE and env(IsSwimContact) == TRUE and (env("特殊効果発動中か_Behavior参照ID_寿命延長を厳密に取得", SP_EF_REF_AGING) == FALSE or env("特殊効果発動中か_Behavior参照ID_寿命延長を厳密に取得", SP_EF_REF_AGING) == TRUE and currentState ~= STATE_TYPE_REACTION_DEATH and currentState ~= STATE_TYPE_REACTION_DEATH_START and currentState ~= STATE_TYPE_REACTION_DEATH_LOOP and currentState ~= STATE_TYPE_REACTION_DEATH_REVIVAL_STAY_LOOP and currentState ~= STATE_TYPE_REACTION_THROW_DEATH_START and currentState ~= STATE_TYPE_REACTION_THROW_DEATH_LOOP and currentState ~= STATE_TYPE_REACTION_THROW_DEATH_REVIVAL_STAY_LOOP) then
        return TRUE
    end
    return FALSE
    
end, [BEH_R_SWIM_TO_STAND_MOVE] = function (current_hkb_state, currentState)
    if env(IsSwimContact) == FALSE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_DIVE_MOVE_DIRECTION_U) == FALSE then
        return TRUE
    end
    return FALSE
    
end, [BEH_R_DIVE_TO_SWIM] = function (current_hkb_state, currentState)
    if env(IsDiveToSwimAllowed) == TRUE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_DIVE_TO_SWIM) == TRUE then
        return TRUE
    end
    return FALSE
    
end, [BEH_R_ENEMY_JUMP] = function (current_hkb_state, currentState)
    if env(IsSwingHitTarget) == TRUE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_KICK_ENEMY_JUMP) == TRUE then
        return TRUE
    end
    return FALSE
    
end, [BEH_R_SUB_WEAPON_EXPAND] = function (current_hkb_state, currentState)
    if g_EndSubWeaponChange == TRUE and currentStyle ~= STYLE_TYPE_SWIM and currentStyle ~= STYLE_TYPE_DIVE and (env(IsStayState) == TRUE or env(IsMoveCancelPossible) == TRUE or env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_CAMO_STANDBY_STATE) == TRUE or current_hkb_state == HKB_STATE_STAND_IDLE or current_hkb_state == HKB_STATE_SUB_WEAPON_EXPAND or current_hkb_state == HKB_STATE_SUB_WEAPON_EXPAND_MOVE or current_hkb_state == HKB_STATE_SUB_WEAPON_EXPAND_2 or current_hkb_state == HKB_STATE_SUB_WEAPON_EXPAND_2_MOVE or current_hkb_state == HKB_STATE_SUB_WEAPON_EXPAND_3 or current_hkb_state == HKB_STATE_SUB_WEAPON_EXPAND_3_MOVE or current_hkb_state == HKB_STATE_CROUCH_IDLE or current_hkb_state == HKB_STATE_CROUCH_SUB_WEAPON_EXPAND_1 or current_hkb_state == HKB_STATE_CROUCH_SUB_WEAPON_EXPAND_2 or current_hkb_state == HKB_STATE_CROUCH_SUB_WEAPON_EXPAND_3) and env(IsSpEffectBehaviorRefID, SP_EF_REF_IN_WATERSIDE_AREA) == FALSE then
        return TRUE
    end
    return FALSE
    
end, [BEH_R_GROUND_SP_ATTACK_HIT_JUMP] = function (current_hkb_state, currentState)
    if env(IsSwingHitTarget) == TRUE and g_enableSpAttaclkJump == TRUE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_SP_ATK_HIT_JUMP) == TRUE then
        return TRUE
    end
    return FALSE
    
end, [BEH_R_NPC_TALK_START] = function (current_hkb_state, currentState)
    local ezsRefId = env(GetTalkEzStateRefID)
    if (ezsRefId == EZ_STATE_REF_RCV_NPC_TALK_START or ezsRefId == EZ_STATE_REF_RCV_NPC_TALK_ENGRAVER_START or ezsRefId == EZ_STATE_REF_RCV_NPC_TALK_711310 or ezsRefId == EZ_STATE_REF_RCV_NPC_TALK_711315 or ezsRefId == EZ_STATE_REF_RCV_EAVESDROP_START) and (env(IsStayState) == TRUE or env(IsMoveCancelPossible) == TRUE or env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_CAMO_EVENT_STANDBY_STATE) == TRUE) then
        return TRUE
    end
    return FALSE
    
end, [BEH_R_NPC_TALK_END] = function (current_hkb_state, currentState)
    local ezsRefId = env(GetTalkEzStateRefID)
    if (currentState == STATE_TYPE_EVENT_NPC_TALK_LOOP or currentState == STATE_TYPE_EVENT_NPC_TALK_REACTION or currentState == STATE_TYPE_EVENT_EAVESDROP_LOOP) and (current_hkb_state ~= HKB_STATE_EVENT711200 and current_hkb_state ~= HKB_STATE_EVENT711210 and current_hkb_state ~= HKB_STATE_EVENT711201 and current_hkb_state ~= HKB_STATE_EVENT711211 and current_hkb_state ~= HKB_STATE_EVENT711202 and current_hkb_state ~= HKB_STATE_EVENT711212 and current_hkb_state ~= HKB_STATE_EVENT711400 or env(IsAnimEnd, 0) == TRUE) and ezsRefId == EZ_STATE_REF_RCV_NONE then
        return TRUE
    end
    return FALSE
    
end, [BEH_R_NPC_TALK_ACTION] = function (current_hkb_state, currentState)
    local ezsRefId = env(GetTalkEzStateRefID)
    if ezsRefId == EZ_STATE_REF_RCV_NPC_TALK_711300 and (env(IsStayState) == TRUE or env(IsMoveCancelPossible) == TRUE) then
        return TRUE
    end
    return FALSE
    
end, [BEH_R_NPC_TALK_REACTION] = function (current_hkb_state, currentState)
    local tpRefId = env(GetTalkParamBehaviorRefID)
    local ezsRefId = env(GetTalkEzStateRefID)
    if (currentState == STATE_TYPE_EVENT_NPC_TALK_LOOP or currentState == STATE_TYPE_EVENT_NPC_TALK_REACTION) and ((current_hkb_state == HKB_STATE_EVENT711310 or current_hkb_state == HKB_STATE_EVENT711311) and tpRefId == TALK_PARAM_REF_RCV_711320 or (current_hkb_state == HKB_STATE_EVENT711310 or current_hkb_state == HKB_STATE_EVENT711311 or current_hkb_state == HKB_STATE_EVENT711320 or current_hkb_state == HKB_STATE_EVENT711321) and tpRefId == TALK_PARAM_REF_RCV_711330 or (current_hkb_state == HKB_STATE_EVENT711330 or current_hkb_state == HKB_STATE_EVENT711331) and ezsRefId == EZ_STATE_REF_RCV_NPC_TALK_711333 or current_hkb_state ~= HKB_STATE_EVENT711400 and tpRefId == TALK_PARAM_REF_RCV_711400 or (tpRefId == TALK_PARAM_REF_RCV_NONE or tpRefId == TALK_PARAM_REF_RCV_LOOP or tpRefId == TALK_PARAM_REF_RCV_DEFAULT) and currentState == STATE_TYPE_EVENT_NPC_TALK_REACTION) then
        return TRUE
    end
    return FALSE
    
end, [BEH_R_DOCKING_BREAK] = function (current_hkb_state, currentState)
    if env(IsDockingEdgeInvalid) == TRUE and env(IsThrown) == FALSE then
        return TRUE
    end
    return FALSE
    
end, [BEH_R_FORCE_CROUCH_END] = function (current_hkb_state, currentState)
    if g_forceCrouch == FALSE and env(IsSpEffectBehaviorRefID, SP_EF_REF_IN_WATERSIDE_AREA) == TRUE then
        return TRUE
    end
    return FALSE
    
end, [BEH_R_NON_COMBAT_AREA_ENTER] = function (current_hkb_state, currentState)
    if env(IsSpEffectBehaviorRefID, SP_EF_REF_IN_NON_COMBAT_AREA) == TRUE and env(GetWeaponSwitchState) ~= ARM_STYLE_SAFE and (env(IsMoveCancelPossible) == TRUE or env(IsStayState) == TRUE or env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_CAMO_STANDBY_STATE) == TRUE) and (current_hkb_state ~= HKB_STATE_STAND_MOVE_START and current_hkb_state ~= HKB_STATE_STAND_MOVE_START_FROM_FREE_FALL and current_hkb_state ~= HKB_STATE_STAND_MOVE_START_FROM_FREE_FALL_SHOR_TSTIFF and current_hkb_state ~= HKB_STATE_STAND_MOVE_START_FROM_LAND_GROUND_POSITIONING_JUMP and current_hkb_state ~= HKB_STATE_STAND_QUICK_TURN_MOVE_START_LEFT_180 and current_hkb_state ~= HKB_STATE_STAND_QUICK_TURN_MOVE_START_RIGHT_180 and current_hkb_state ~= HKB_STATE_STAND_MOVE_START_FROM_SPRINT and current_hkb_state ~= HKB_STATE_STAND_MOVE_LOOP and current_hkb_state ~= HKB_STATE_STAND_MOVE_LOOP_FROM_SPRINT and current_hkb_state ~= HKB_STATE_STAND_MOVE_QUICK_TURN_LEFT_180 and current_hkb_state ~= HKB_STATE_STAND_MOVE_QUICK_TURN_RIGHT_180 or env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_NON_COMBAT_TRANSITION) == TRUE) and env(IsDebugDash) == FALSE then
        return TRUE
    end
    return FALSE
    
end, [BEH_R_NON_COMBAT_AREA_LEAVE] = function (current_hkb_state, currentState)
    if env(IsSpEffectBehaviorRefID, SP_EF_REF_IN_NON_COMBAT_AREA) == FALSE and env(GetWeaponSwitchState) == ARM_STYLE_SAFE and (env(IsMoveCancelPossible) == TRUE or env(IsStayState) == TRUE or env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_CAMO_STANDBY_STATE) == TRUE) and (current_hkb_state ~= HKB_STATE_STAND_MOVE_START and current_hkb_state ~= HKB_STATE_STAND_MOVE_START_FROM_FREE_FALL and current_hkb_state ~= HKB_STATE_STAND_MOVE_START_FROM_FREE_FALL_SHOR_TSTIFF and current_hkb_state ~= HKB_STATE_STAND_MOVE_START_FROM_LAND_GROUND_POSITIONING_JUMP and current_hkb_state ~= HKB_STATE_STAND_QUICK_TURN_MOVE_START_LEFT_180 and current_hkb_state ~= HKB_STATE_STAND_QUICK_TURN_MOVE_START_RIGHT_180 and current_hkb_state ~= HKB_STATE_STAND_MOVE_START_FROM_SPRINT and current_hkb_state ~= HKB_STATE_STAND_MOVE_LOOP and current_hkb_state ~= HKB_STATE_STAND_MOVE_LOOP_FROM_SPRINT and current_hkb_state ~= HKB_STATE_STAND_MOVE_QUICK_TURN_LEFT_180 and current_hkb_state ~= HKB_STATE_STAND_MOVE_QUICK_TURN_RIGHT_180 or env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_NON_COMBAT_TRANSITION) == TRUE) then
        return TRUE
    end
    return FALSE
    
end, [BEH_R_TELESCOPE_END] = function (current_hkb_state, currentState)
    if env(IsSpEffectBehaviorRefID, SP_EF_REF_ACTIVE_TELESCOPE) == TRUE and (env(IsSpEffectBehaviorRefID, SP_EF_REF_DISABLE_USE_ITEM_REQUEST) == TRUE or env(IsSpEffectBehaviorRefID, SP_EF_REF_DISABLE_ALL_INPUT) == TRUE) then
        return TRUE
    end
    return FALSE
    
end}

g_ValidateActionTable = {[BEH_A_GROUND_MOVE_START] = function (current_hkb_state)
    if (env(IsStayState) == TRUE or env(IsMoveCancelPossible) == TRUE or env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ITEM_USE_MOVE) == TRUE) and (GetLocomotionType() ~= LOCOMOTION_TYPE_MOVE or env(IsMoveCancelPossible) == TRUE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ITEM_USE_MOVE) == TRUE) and hkbGetVariable("MoveSpeedLevel") > 0 then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_GROUND_MOVE_STOP] = function (current_hkb_state)
    if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_SPRINT_TO_STANDMOVE_INITIAL_END) == TRUE or env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_SPRINT_TO_STANDMOVE_SATELLITE_END) == TRUE then
        return TRUE
    end
    local angle = 0
    if env(IsLocked) == TRUE then
        angle = hkbGetVariable("MoveAngle")
    else
        angle = hkbGetVariable("TurnAngle")
    end
    local isLockonSprint = FALSE
    if env(IsLocked) == TRUE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_SPRINT_QUICK_TURN) == TRUE then
        isLockonSprint = TRUE
    end
    if current_hkb_state == HKB_STATE_SPRINT_START_FROM_STEP then
        angle = hkbGetVariable("TurnAngle")
    end
    if GetLocomotionType() == LOCOMOTION_TYPE_MOVE and (env(IsStayState) == TRUE or env(IsMoveCancelPossible) == TRUE or env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ITEM_USE_MOVE) == TRUE or env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_CAMO_STANDBY_STATE) == TRUE or isLockonSprint == TRUE) and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_STOPING_WALK) == FALSE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_STOPING_RUN) == FALSE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_STOPING_SPRINT) == FALSE and (env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_MOVING_SPRINT) == TRUE and (env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_DISABLE_SPRINT_STOP) == FALSE or isLockonSprint == TRUE) and (0 >= hkbGetVariable("MoveSpeedLevel") or env(ActionDuration, ACTION_ARM_SP_MOVE) <= 0 or math.abs(angle) >= SPRINT_BRAKE_ANGLE and isLockonSprint == TRUE or env(IsSpEffectBehaviorRefID, SP_EF_REF_IN_SWAMP_AREA) == TRUE or env(IsSpEffectBehaviorRefID, SP_EF_REF_IN_WATERSIDE_AREA) == TRUE) or env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_MOVING_SPRINT) == FALSE and 0 >= hkbGetVariable("MoveSpeedLevel")) then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_GROUND_MOVE_SPEED_CHANGE] = function (current_hkb_state)
    if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_MOVE_SPEED_CHANGE_CANCEL) == TRUE and hkbGetVariable("MoveSpeedIndex") ~= g_beforeMoveSpeedIndex and hkbGetVariable("MoveSpeedLevel") > 0 then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_DOCKING_MOVE_START] = function (current_hkb_state)
    local stickAngle = hkbGetVariable("DockingStickAngle")
    if (env(IsStayState) == TRUE or env(IsMoveCancelPossible) == TRUE) and GetLocomotionType() ~= LOCOMOTION_TYPE_MOVE and DOCKING_MOVE_INPUT_ANGLE_MIN < math.abs(stickAngle) and math.abs(stickAngle) < DOCKING_MOVE_INPUT_ANGLE_MAX and hkbGetVariable("MoveSpeedLevel") > 0 and (env(IsObstacleAtDockingStart) == FALSE and stickAngle >= -180 and stickAngle <= 0 or env(IsObstacleAtDockingEnd) == FALSE and stickAngle > 0 and stickAngle <= 180) then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_DOCKING_MOVE_STOP] = function (current_hkb_state)
    local stickAngle = hkbGetVariable("DockingStickAngle")
    if (env(IsStayState) == TRUE or env(IsMoveCancelPossible) == TRUE) and GetLocomotionType() == LOCOMOTION_TYPE_MOVE and (env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_DISABLE_DOCKING_MOVE_STOP) == FALSE or env(IsObstacleAtDockingStart) == TRUE and hkbGetVariable("Selector_DockingMoveDir") == SELECTOR_DOCKING_MOVE_DIR_L or env(IsObstacleAtDockingEnd) == TRUE and hkbGetVariable("Selector_DockingMoveDir") == SELECTOR_DOCKING_MOVE_DIR_R) and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_STOPING_WALK) == FALSE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_STOPING_RUN) == FALSE and (hkbGetVariable("MoveSpeedLevel") <= 0 or hkbGetVariable("Selector_DockingMoveDir") == SELECTOR_DOCKING_MOVE_DIR_R and stickAngle >= -180 and stickAngle <= 0 or hkbGetVariable("Selector_DockingMoveDir") == SELECTOR_DOCKING_MOVE_DIR_L and stickAngle >= 0 and stickAngle <= 180 or env(IsOnEdgeOfDockingTarget) == 1 and stickAngle >= -180 and stickAngle <= 0 or env(IsOnEdgeOfDockingTarget) == 2 and stickAngle > 0 and stickAngle <= 180 or env(IsObstacleAtDockingStart) == TRUE and stickAngle >= -180 and stickAngle <= 0 or env(IsObstacleAtDockingEnd) == TRUE and stickAngle > 0 and stickAngle <= 180) then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_SWIM_MOVE_START] = function (current_hkb_state)
    if (env(IsStayState) == TRUE or env(IsMoveCancelPossible) == TRUE or env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ITEM_USE_MOVE) == TRUE) and (GetLocomotionType() ~= LOCOMOTION_TYPE_SWIM_MOVE or env(IsMoveCancelPossible) == TRUE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ITEM_USE_MOVE) == TRUE) and hkbGetVariable("MoveSpeedLevel") > 0 then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_SWIM_MOVE_STOP] = function (current_hkb_state)
    if GetLocomotionType() == LOCOMOTION_TYPE_SWIM_MOVE and (env(IsStayState) == TRUE or env(IsMoveCancelPossible) == TRUE or env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ITEM_USE_MOVE) == TRUE) and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_SWIMSTOPING_WALK) == FALSE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_SWIMSTOPING_RUN) == FALSE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_SWIMSTOPING_SPRINT) == FALSE and (env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_SWIMMING_SPRINT) == TRUE and (env(ActionDuration, ACTION_ARM_SP_MOVE) <= 0 or math.abs(hkbGetVariable("TurnAngle")) >= SPRINT_BRAKE_ANGLE) or env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_SWIMMING_SPRINT) == FALSE and 0 >= hkbGetVariable("MoveSpeedLevel")) then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_DIVE_MOVE_START] = function (current_hkb_state)
    if (env(IsStayState) == TRUE or env(IsMoveCancelPossible) == TRUE or env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ITEM_USE_MOVE) == TRUE) and (GetLocomotionType() ~= LOCOMOTION_TYPE_SWIM_MOVE or env(IsMoveCancelPossible) == TRUE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ITEM_USE_MOVE) == TRUE) and hkbGetVariable("MoveSpeedLevel") > 0 then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_DIVE_MOVE_STOP] = function (current_hkb_state)
    if GetLocomotionType() == LOCOMOTION_TYPE_SWIM_MOVE and (env(IsStayState) == TRUE or env(IsMoveCancelPossible) == TRUE) and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_SWIMSTOPING_WALK) == FALSE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_SWIMSTOPING_RUN) == FALSE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_SWIMSTOPING_SPRINT) == FALSE and (env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_SWIMMING_SPRINT) == TRUE and (env(ActionDuration, ACTION_ARM_SP_MOVE) <= 0 or math.abs(hkbGetVariable("TurnAngle")) >= SPRINT_BRAKE_ANGLE) or env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_SWIMMING_SPRINT) == FALSE and 0 >= hkbGetVariable("MoveSpeedLevel")) then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_DIVE_MOVE_UP_START] = function (current_hkb_state)
    if env(ActionRequest, ACTION_ARM_SWIM_UP) == TRUE or env(ActionDuration, ACTION_ARM_SWIM_UP) > 0 and env(IsMoveCancelPossible) == TRUE then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_DIVE_MOVE_UP_STOP] = function (current_hkb_state)
    if current_hkb_state ~= HKB_STATE_DIVE_KICK_MOVE_UP_1 and current_hkb_state ~= HKB_STATE_DIVE_KICK_MOVE_UP_2 and current_hkb_state ~= HKB_STATE_SWIM_TO_DIVE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_DIVE_MOVE_DIRECTION_U) == TRUE and env(ActionDuration, ACTION_ARM_SWIM_UP) <= 0 then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_DIVE_MOVE_DOWN_START] = function (current_hkb_state)
    if (env(ActionRequest, ACTION_ARM_SWIM_DOWN) == TRUE or env(ActionDuration, ACTION_ARM_SWIM_DOWN) > 0 and (env(IsMoveCancelPossible) == TRUE or env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_DIVE_MOVE_DOWN_LOOP) == TRUE or env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_DIVE_MOVE_VERTICAL_START) == TRUE)) and env(IsTrulyLanding) == FALSE then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_DIVE_MOVE_DOWN_STOP] = function (current_hkb_state)
    if current_hkb_state ~= HKB_STATE_DIVE_KICK_MOVE_DOWN_1 and current_hkb_state ~= HKB_STATE_DIVE_KICK_MOVE_DOWN_2 and current_hkb_state ~= HKB_STATE_DIVE_TO_SWIM and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_DIVE_MOVE_DIRECTION_D) == TRUE and (env(ActionDuration, ACTION_ARM_SWIM_DOWN) <= 0 or env(IsTrulyLanding) == TRUE) then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_KICK_MOVE] = function (current_hkb_state)
    local stickLevel = hkbGetVariable("MoveSpeedLevel")
    if stickLevel > 0 and env(ActionRequest, ACTION_ARM_SWIM_ACCELERATION) == TRUE and (env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_DOLPHIN_JUMP) == FALSE or env(IsDiveToSwimAllowed) == TRUE) then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_SWIM_BACK_STEP] = function (current_hkb_state)
    local stickLevel = hkbGetVariable("MoveSpeedLevel")
    if stickLevel <= 0 and env(ActionRequest, ACTION_ARM_SWIM_ACCELERATION) == TRUE and (env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_DOLPHIN_JUMP) == FALSE or env(IsDiveToSwimAllowed) == TRUE) then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_SWIM_JUMP] = function (current_hkb_state)
    if (env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_JUMP) == TRUE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_JUMP_CANCEL) == TRUE or env(ActionRequest, ACTION_ARM_JUMP) == TRUE) and (env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_DOLPHIN_JUMP) == FALSE or env(IsDiveToSwimAllowed) == TRUE) then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_GROUND_QUICK_TURN] = function (current_hkb_state)
    local turnAngle = hkbGetVariable("TurnAngle")
    local twistAngle = hkbGetVariable("TwistLowerRootAngle")
    local currentState = g_paramHkbState[current_hkb_state][PARAM_HKB_STATE__STATE_TYPE]
    if (env(IsStayState) == TRUE or env(IsMoveCancelPossible) == TRUE or env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_DEFLECT_GUARD_QUIC_TURN) == TRUE) and GetLocomotionType() == LOCOMOTION_TYPE_IDLE and math.abs(turnAngle) > 60 and currentState ~= STATE_TYPE_STANDBY_SUB_GUARD and currentState ~= STATE_TYPE_ACTION_SUB_GUARD and currentState ~= STATE_TYPE_REACTION_SUB_GUARD then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_QUICK_TURN_MOVE_START] = function (current_hkb_state)
    local twistAngle = hkbGetVariable("TwistLowerRootAngle")
    local stickLevel = hkbGetVariable("MoveSpeedLevel")
    local currentState = g_paramHkbState[current_hkb_state][PARAM_HKB_STATE__STATE_TYPE]
    if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_GROUND_QUICK_TURN) == FALSE and (env(IsStayState) == TRUE or env(IsMoveCancelPossible) == TRUE) and stickLevel > 0 and math.abs(twistAngle) > 135 and currentState ~= STATE_TYPE_STANDBY_SUB_GUARD and currentState ~= STATE_TYPE_ACTION_SUB_GUARD and currentState ~= STATE_TYPE_REACTION_SUB_GUARD and currentState ~= STATE_TYPE_STANDBY_ATK_HOLD and currentState ~= STATE_TYPE_ACTION_ATK_HOLD and currentState ~= STATE_TYPE_REACTION_ATK_HOLD then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_STAND_MOVE_QUICK_TURN] = function (current_hkb_state)
    local turnAngle = hkbGetVariable("TurnAngle")
    if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_GROUND_QUICK_TURN) == FALSE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_GROUND_QUICK_TURN) == TRUE and math.abs(turnAngle) > 135 then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_SWIM_QUICK_TURN] = function (current_hkb_state)
    local turnAngle = hkbGetVariable("TurnAngle")
    local stickLevel = hkbGetVariable("MoveSpeedLevel")
    if ((env(IsStayState) == TRUE or env(IsMoveCancelPossible) == TRUE) and stickLevel > 0 or env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_DEFLECT_GUARD_QUIC_TURN) == TRUE) and math.abs(turnAngle) > 150 then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_KICK_MOVE_BRAKE] = function (current_hkb_state)
    local turnAngle = hkbGetVariable("TurnAngle")
    local stickLevel = hkbGetVariable("MoveSpeedLevel")
    if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_DIVE_MOVE_DIRECTION_U) == FALSE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_DIVE_MOVE_DIRECTION_D) == FALSE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_DIVE_KICK_BRAKE) == TRUE and (stickLevel == 0 or math.abs(turnAngle) >= 60) then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_DIVE_KICK_MOVE_UP] = function (current_hkb_state)
    if env(ActionDuration, ACTION_ARM_SWIM_UP) > 0 and env(ActionRequest, ACTION_ARM_SWIM_ACCELERATION) == TRUE then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_DIVE_KICK_MOVE_DOWN] = function (current_hkb_state)
    if env(ActionDuration, ACTION_ARM_SWIM_DOWN) > 0 and env(ActionRequest, ACTION_ARM_SWIM_ACCELERATION) == TRUE and env(IsTrulyLanding) == FALSE then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_DIVE_KICK_MOVE_UP_BRAKE] = function (current_hkb_state)
    if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_DIVE_MOVE_DIRECTION_U) == TRUE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_DIVE_KICK_BRAKE) == TRUE and env(ActionDuration, ACTION_ARM_SWIM_UP) <= 0 then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_DIVE_KICK_MOVE_DOWN_BRAKE] = function (current_hkb_state)
    if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_DIVE_MOVE_DIRECTION_D) == TRUE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_DIVE_KICK_BRAKE) == TRUE and (env(ActionDuration, ACTION_ARM_SWIM_DOWN) <= 0 or env(IsTrulyLanding) == TRUE) then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_DIVE_ATTACK] = function (current_hkb_state)
    if _EnableMainWeaponAction() == TRUE and env(ActionRequest, ACTION_ARM_ATTACK) == TRUE then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_DIVE_RELEASE_ATTACK] = function (current_hkb_state)
    if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_GROUND_RELEASE_ATTACK_CANCEL) == TRUE and env(ActionDuration, ACTION_ARM_ATTACK) <= 0 then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_DIVE_DEFLECT_GUARD_START] = function (current_hkb_state)
    if env(ActionDuration, ACTION_ARM_GUARD) > 0 and (env(ActionRequest, ACTION_ARM_GUARD) == TRUE or env(IsSpEffectBehaviorRefID, SP_EF_REF_ENABLE_PRESS_DEFLECT_GUARD) == TRUE) and _EnableMainWeaponAction() == TRUE then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_DIVE_DEFLECT_GUARD_END] = function (current_hkb_state)
    if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_CANCEL_DEFLECT_GUARD_END) == TRUE and env(ActionDuration, ACTION_ARM_GUARD) <= 0 then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_WALL_JUMP] = function (current_hkb_state)
    if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_WALL_JUMP_CANCEL) == TRUE and env(IsWallJumpContact) == TRUE and env(GetFallHeight) <= WALL_JUMP_ENABLE_FALL_HEIGHT and (env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_WALL_JUMP) == TRUE or env(ActionRequest, ACTION_ARM_JUMP) == TRUE) and (g_wallJumpCount < WALL_JUMP_COUNT_MAX or env(IsSpEffectBehaviorRefID, SP_EF_REF_ENABLE_BOUNCE_WALL_JUMP) == TRUE) and env(GetVerticalSpeed) < 0 and (env(GetWeaponSwitchState) == ARM_STYLE_SAFE and env(IsSpEffectBehaviorRefID, SP_EF_REF_IN_NON_COMBAT_AREA) == TRUE or env(GetWeaponSwitchState) ~= ARM_STYLE_SAFE and env(IsSpEffectBehaviorRefID, SP_EF_REF_IN_NON_COMBAT_AREA) == FALSE) then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_AIR_STORM_JUMP] = function (current_hkb_state)
    if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_STORM_JUMP) == TRUE and (env(IsSpEffectBehaviorRefID, SP_EF_REF_IN_STORM_JUMP_AREA) == TRUE or env(IsSpEffectBehaviorRefID, SP_EF_REF_IN_STORM_JUMP_WEAK_AREA) == TRUE) then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_AIR_ATTACK] = function (current_hkb_state)
    if _EnableMainWeaponAction() == TRUE and (env(ActionRequest, ACTION_ARM_ATTACK) == TRUE or env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_ATTACK) == TRUE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_ATTACK_CANCEL) == TRUE) then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_AIR_SP_ATTACK] = function (current_hkb_state)
    local attackCount = env(ActionDuration, ACTION_ARM_ATTACK)
    local guardCount = env(ActionDuration, ACTION_ARM_GUARD)
    if (env(ActionRequest, ACTION_ARM_ATTACK) == TRUE or env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_SPACIAL_ATTACK) == TRUE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_SPACIAL_ATTACK_CANCEL) == TRUE or env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_PRESS_SP_ATTACK) == TRUE and attackCount <= 200 and attackCount > 0 and attackCount <= guardCount) and guardCount > 0 and _EnableMainWeaponAction() == TRUE and env(IsSpEffectBehaviorRefID, SP_EF_REF_ELECTRO_CHARGE) == FALSE and env(IsSpEffectBehaviorRefID, SP_EF_REF_WEAK_ELECTRO_CHARGE) == FALSE and env(GetEquipWeaponSpecialCategoryNumber, HAND_RIGHT) ~= SP_ATK_TYPE_NONE then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_AIR_SP_ATTACK_RELEASE] = function (current_hkb_state)
    if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_SP_ATK_RELEASE) == TRUE and (_isNonCombatMode() == TRUE and spAtkType ~= SP_ATK_TYPE_104 or env(ActionDuration, ACTION_ARM_ATTACK) <= 0) then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_AIR_SP_ATTACK_GUARD_RELEASE] = function (current_hkb_state)
    if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_SP_ATK_HOLD_RELEASE) == TRUE and env(GetEquipWeaponSpecialCategoryNumber, HAND_RIGHT) == SP_ATK_TYPE_104 and (_isNonCombatMode() == TRUE or env(ActionDuration, ACTION_ARM_GUARD) <= 0) then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_AIR_DEFLECT_START] = function (current_hkb_state)
    if env(ActionUnlocked, ACTION_UNLOCK_TYPE_AIR_DEFLECT_GUARD) == TRUE and _EnableMainWeaponAction() == TRUE and (env(ActionRequest, ACTION_ARM_GUARD) == TRUE or env(IsSpEffectBehaviorRefID, SP_EF_REF_ENABLE_PRESS_DEFLECT_GUARD) == TRUE or env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_GUARD) == TRUE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_GUARD_CANCEL) == TRUE) and env(ActionDuration, ACTION_ARM_GUARD) > 0 then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_AIR_DEFLECT_END] = function (current_hkb_state)
    if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_CANCEL_DEFLECT_GUARD_END) == TRUE and (_isNonCombatMode() == TRUE or env(ActionDuration, ACTION_ARM_GUARD) <= 0) then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_AIR_SUB_ATTACK_KAWARIMI] = function (current_hkb_state)
    local subWeaponCategory = env(GetEquipWeaponCategory, HAND_LEFT)
    if _EnableSubWeaponAction() == TRUE and subWeaponCategory == WEP_MOTION_CATEGORY_074 and (env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_DAMAGE_AFTER_KAWARIMI) == TRUE or env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_DAMAGE_BUFF_KAWARIMI) == TRUE and (env(IsSpEffectBehaviorRefID, SP_EF_REF_POISON) == TRUE or env(IsSpEffectBehaviorRefID, SP_EF_REF_BURN) == TRUE)) and env(IsSpEffectBehaviorRefID, SP_EF_REF_WEP_DISABLE_DAMAGE_AFTER_SUB_ATTACK) == FALSE and (env(ActionRequest, ACTION_ARM_SUB_ATTACK) == TRUE or env(ActionRequest, ACTION_ARM_SHINOBI_WEP_ACTION) == TRUE) then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_AIR_SUB_ATTACK] = function (current_hkb_state)
    local subWeaponCategory = env(GetEquipWeaponCategory, HAND_LEFT)
    if _EnableSubWeaponAction() == TRUE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_DAMAGE_AFTER_KAWARIMI) == FALSE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_DAMAGE_BUFF_KAWARIMI) == FALSE and (env(ActionRequest, ACTION_ARM_SUB_ATTACK) == TRUE or env(ActionRequest, ACTION_ARM_SHINOBI_WEP_ACTION) == TRUE or subWeaponCategory == WEP_MOTION_CATEGORY_076 and env(IsSpEffectBehaviorRefID, SP_EF_REF_ENABLE_PRESS_SUB_ATTACK) == TRUE and (env(ActionDuration, ACTION_ARM_SUB_ATTACK) > 0 or env(ActionDuration, ACTION_ARM_SHINOBI_WEP_ACTION) > 0)) then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_AIR_SUB_ATTACK_RELEASE] = function (current_hkb_state)
    local subWeaponCategory = env(GetEquipWeaponCategory, HAND_LEFT)
    if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_SUB_ATTACK_RELEASE) == TRUE and (subWeaponCategory == WEP_MOTION_CATEGORY_076 and _isNonCombatMode() == TRUE or env(ActionDuration, ACTION_ARM_SUB_ATTACK) <= 0 and env(ActionDuration, ACTION_ARM_SHINOBI_WEP_ACTION) <= 0) then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_AIR_SUB_GUARD_RELEASE_CONNECT] = function (current_hkb_state)
    if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_SUB_GUARD_RELEASE_CONNECT) == TRUE and (env(ActionRequest, ACTION_ARM_ATTACK) == TRUE or env(ActionRequest, ACTION_ARM_GUARD) == TRUE or env(ActionRequest, ACTION_ARM_JUMP) == TRUE or env(ActionRequest, ACTION_ARM_SP_MOVE) == TRUE or env(ActionRequest, ACTION_ARM_BACKSTEP) == TRUE or env(ActionRequest, ACTION_ARM_ROLLING) == TRUE or env(ActionRequest, ACTION_ARM_CROUCH) == TRUE or env(ActionRequest, ACTION_ARM_USE_ITEM) == TRUE or env(ActionRequest, ACTION_ARM_WALL_HANG) == TRUE or env(ActionRequest, ACTION_ARM_CHANGE_WEAPON_L) == TRUE or g_forceCrouch == FALSE and env(ActionRequest, ACTION_ARM_WIRE_SHOOT) == TRUE and env(ActionUnlocked, ACTION_UNLOCK_TYPE_SUB_WEAPONE) == TRUE and env(IsWirePossible) == TRUE) then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_COVER_END_CONNECT] = function (current_hkb_state)
    local itemAnimeType = env(GetItemAnimType)
    if env(ActionRequest, ACTION_ARM_ATTACK) == TRUE or env(ActionRequest, ACTION_ARM_GUARD) == TRUE or env(ActionRequest, ACTION_ARM_JUMP) == TRUE or env(ActionRequest, ACTION_ARM_SP_MOVE) == TRUE or env(ActionRequest, ACTION_ARM_CROUCH) == TRUE or env(ActionRequest, ACTION_ARM_WIRE_SHOOT) == TRUE and env(ActionUnlocked, ACTION_UNLOCK_TYPE_SUB_WEAPONE) == TRUE and env(IsWirePossible) == TRUE or env(ActionRequest, ACTION_ARM_SHINOBI_WEP_ACTION) == TRUE and (env(GetEquipWeaponCategory, HAND_LEFT) ~= WEP_MOTION_CATEGORY_079 or g_paramHkbState[current_hkb_state][PARAM_HKB_STATE__STYLE_TYPE] ~= STYLE_TYPE_COVER_LOOK) then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_HANG_END_CONNECT] = function (current_hkb_state)
    local itemAnimeType = env(GetItemAnimType)
    if env(ActionRequest, ACTION_ARM_GUARD) == TRUE or env(ActionRequest, ACTION_ARM_JUMP) == TRUE or env(ActionRequest, ACTION_ARM_CROUCH) == TRUE or env(ActionRequest, ACTION_ARM_WIRE_SHOOT) == TRUE and env(ActionUnlocked, ACTION_UNLOCK_TYPE_SUB_WEAPONE) == TRUE and env(IsWirePossible) == TRUE or env(ActionRequest, ACTION_ARM_SHINOBI_WEP_ACTION) == TRUE and env(GetEquipWeaponCategory, HAND_LEFT) ~= WEP_MOTION_CATEGORY_079 then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_SPRINT] = function (current_hkb_state)
    if g_forceCrouch == FALSE and _hasSprint() == TRUE and _EnableMainWeaponAction() == TRUE and (g_enableTransitSprint == TRUE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_TRANSITION_SPRINT) == TRUE or (env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ITEM_USE_MOVE) == FALSE or env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_CAMO_STANDBY_STATE) == TRUE) and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_DISABLE_PRESS_STEP) == FALSE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_MOVING_RUN) == TRUE) and env(IsSpEffectBehaviorRefID, SP_EF_REF_IN_SWAMP_AREA) == FALSE and env(IsSpEffectBehaviorRefID, SP_EF_REF_IN_WATERSIDE_AREA) == FALSE then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_SPRINT_QUICK_TURN] = function (current_hkb_state)
    local currentStyle = g_paramHkbState[current_hkb_state][PARAM_HKB_STATE__STYLE_TYPE]
    local angle = 0
    if env(IsLocked) == TRUE then
        angle = hkbGetVariable("MoveAngle")
    else
        angle = hkbGetVariable("TurnAngle")
    end
    if current_hkb_state == HKB_STATE_SPRINT_START_FROM_STEP then
        angle = hkbGetVariable("TurnAngle")
    end
    if (currentStyle == STYLE_TYPE_SPRINT or (current_hkb_state == HKB_STATE_SPRINT_STOP_READY or current_hkb_state == HKB_STATE_SPRINT_STOP_QUICK_TURN_FRONT or current_hkb_state == HKB_STATE_SPRINT_STOP_QUICK_TURN_LEFT or current_hkb_state == HKB_STATE_SPRINT_STOP_QUICK_TURN_RIGHT or current_hkb_state == HKB_STATE_SPRINT_STOP_QUICK_TURN_LEFT_BACK or current_hkb_state == HKB_STATE_SPRINT_STOP_QUICK_TURN_RIGHT_BACK or current_hkb_state == HKB_STATE_GROUND_STEP or current_hkb_state == HKB_STATE_SPRINT_START_FROM_STEP) and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_SPRINT_QUICK_TURN) == TRUE) and env(IsLocked) == FALSE and math.abs(angle) > SPRINT_BRAKE_ANGLE and env(IsSpEffectBehaviorRefID, SP_EF_REF_IN_WATERSIDE_AREA) == FALSE then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_AIR_KICK] = function (current_hkb_state)
    if (env(ActionRequest, ACTION_ARM_JUMP) == TRUE or env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_JUMP) == TRUE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_JUMP_CANCEL) == TRUE) and env(IsSpEffectBehaviorRefID, SP_EF_REF_DISABLE_AIR_KICK) == FALSE then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_GROUND_STEP] = function (current_hkb_state)
    if (env(ActionRequest, ACTION_ARM_SP_MOVE) == TRUE or env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_KICK) == TRUE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_KICK_CANCEL) == TRUE or env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_PRESS_STEP) == TRUE and env(ActionDuration, ACTION_ARM_SP_MOVE) > 0) and _EnableMainWeaponAction() == TRUE and g_forceCrouch == FALSE and env(IsSpEffectBehaviorRefID, SP_EF_REF_IN_WATERSIDE_AREA) == FALSE and (current_hkb_state ~= HKB_STATE_STAND_STEP_FROM_DAMAGE and current_hkb_state ~= HKB_STATE_STAND_STEP_FROM_DOWN or env(IsSpEffectBehaviorRefID, SP_EF_REF_ITEM_USE_PRIORITIZE) == FALSE) then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_GROUND_JUMP] = function (current_hkb_state)
    if g_forceCrouch == FALSE and (env(ActionRequest, ACTION_ARM_JUMP) == TRUE or env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_JUMP) == TRUE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_JUMP_CANCEL) == TRUE) and (env(GetWeaponSwitchState) == ARM_STYLE_SAFE and env(IsSpEffectBehaviorRefID, SP_EF_REF_IN_NON_COMBAT_AREA) == TRUE or env(GetWeaponSwitchState) ~= ARM_STYLE_SAFE and env(IsSpEffectBehaviorRefID, SP_EF_REF_IN_NON_COMBAT_AREA) == FALSE) and (current_hkb_state ~= HKB_STATE_STAND_STEP_FROM_DAMAGE and current_hkb_state ~= HKB_STATE_STAND_STEP_FROM_DOWN or env(IsSpEffectBehaviorRefID, SP_EF_REF_ITEM_USE_PRIORITIZE) == FALSE) then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_AIR_WIRE_SHOOT] = function (current_hkb_state)
    if (env(ActionRequest, ACTION_ARM_WIRE_SHOOT) == TRUE or env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_WIRE_SHOOT) == TRUE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_WIRE_SHOOT_CANCEL) == TRUE) and env(ActionUnlocked, ACTION_UNLOCK_TYPE_SUB_WEAPONE) == TRUE and env(IsWirePossible) == TRUE then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_DEFLECT_GUARD_START] = function (current_hkb_state)
    local currentState = g_paramHkbState[current_hkb_state][PARAM_HKB_STATE__STATE_TYPE]
    if (env(ActionDuration, ACTION_ARM_GUARD) > 0 and (env(ActionRequest, ACTION_ARM_GUARD) == TRUE or env(IsSpEffectBehaviorRefID, SP_EF_REF_ENABLE_PRESS_DEFLECT_GUARD) == TRUE) or env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_GUARD) == TRUE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_GUARD_CANCEL) == TRUE or env(ActionRequest, ACTION_ARM_GUARD) == TRUE and env(GetEquipWeaponCategory, HAND_LEFT) == WEP_MOTION_CATEGORY_076 and (currentState == STATE_TYPE_STANDBY_SUB_GUARD or currentState == STATE_TYPE_ACTION_SUB_GUARD or currentState == STATE_TYPE_REACTION_SUB_GUARD) and env(IsSpEffectBehaviorRefID, SP_EF_REF_WEP_DISABLE_SUB_GUARD_ACTION) == FALSE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_TRANSITION_SUB_GUARD_ACTION) == TRUE) and _EnableMainWeaponAction() == TRUE and env(IsSpEffectBehaviorRefID, SP_EF_REF_IN_WATERSIDE_AREA) == FALSE and g_forceCrouch == FALSE then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_DEFLECT_GUARD_CONTINUE] = function (current_hkb_state)
    if _EnableMainWeaponAction() == TRUE and env(ActionRequest, ACTION_ARM_GUARD) == TRUE and env(IsSpEffectBehaviorRefID, SP_EF_REF_IN_WATERSIDE_AREA) == FALSE and g_forceCrouch == FALSE then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_DEFLECT_GUARD_END] = function (current_hkb_state)
    if (env(IsStayState) == TRUE or env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_CANCEL_DEFLECT_GUARD_END) == TRUE) and (_isNonCombatMode() == TRUE or env(ActionDuration, ACTION_ARM_GUARD) <= 0 or env(IsSpEffectBehaviorRefID, SP_EF_REF_IN_WATERSIDE_AREA) == TRUE) then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_GROUND_ATTACK] = function (current_hkb_state)
    if (env(ActionRequest, ACTION_ARM_ATTACK) == TRUE or env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_ATTACK) == TRUE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_ATTACK_CANCEL) == TRUE) and _EnableMainWeaponAction() == TRUE and (env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_CANCEL_SP_ATTACK_108_COMBO_3) == FALSE or env(GetEquipWeaponSpecialCategoryNumber, HAND_RIGHT) == SP_ATK_TYPE_108 and env(IsSpEffectBehaviorRefID, SP_EF_REF_WEP_SP_ATK_UNLOCK_108_FINISH) == TRUE) and (env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_CANCEL_SUB_ATTACK_075_DIRAVE_ATTACK) == FALSE or env(IsSpEffectBehaviorRefID, SP_EF_REF_WEP_DISABLE_DERIVE_SUB_ATTACK_COMBO) == FALSE) and (env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_CANCEL_SP_ATTACK_102_COMBO_2) == FALSE or env(GetEquipWeaponSpecialCategoryNumber, HAND_RIGHT) == SP_ATK_TYPE_102 and env(IsSpEffectBehaviorRefID, SP_EF_REF_WEP_SP_ATK_UNLOCK_102_COMBO) == TRUE) and (env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_CANCEL_SP_ATTACK_107_COMBO_3) == FALSE or env(GetEquipWeaponSpecialCategoryNumber, HAND_RIGHT) == SP_ATK_TYPE_107 and env(IsSpEffectBehaviorRefID, SP_EF_REF_WEP_SP_ATK_UNLOCK_107_COMBO) == TRUE) and (env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_CANCEL_SUB_ATTACK_073_DIRAVE_ATTACK) == FALSE or env(ActionUnlocked, ACTION_UNLOCK_TYPE_SUB_ATTACK_DIRAVE_ATTACK_2) == TRUE) and (env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_CANCEL_SUB_ATTACK_076_DIRAVE_ATTACK) == FALSE or env(ActionUnlocked, ACTION_UNLOCK_TYPE_SUB_ATTACK_SHOT_ATTACK) == TRUE) and (env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_CANCEL_SUB_ATTACK_079_DIRAVE_ATTACK) == FALSE or env(ActionUnlocked, ACTION_UNLOCK_TYPE_SUB_ATTACK_SHOT_ATTACK) == TRUE) then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_GROUND_RELEASE_ATTACK] = function (current_hkb_state)
    if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_GROUND_RELEASE_ATTACK_CANCEL) == TRUE and (env(ActionDuration, ACTION_ARM_ATTACK) <= 0 or env(IsSpEffectBehaviorRefID, SP_EF_REF_IN_WATERSIDE_AREA) == TRUE) then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_GROUND_SP_ATTACK] = function (current_hkb_state)
    local attackCount = env(ActionDuration, ACTION_ARM_ATTACK)
    local guardCount = env(ActionDuration, ACTION_ARM_GUARD)
    if (env(ActionRequest, ACTION_ARM_ATTACK) == TRUE and guardCount > 0 or env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_SPACIAL_ATTACK) == TRUE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_SPACIAL_ATTACK_CANCEL) == TRUE or env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_PRESS_SP_ATTACK) == TRUE and attackCount <= 200 and attackCount > 0 and guardCount > 0 and attackCount <= guardCount) and _EnableMainWeaponAction() == TRUE and env(GetEquipWeaponSpecialCategoryNumber, HAND_RIGHT) ~= SP_ATK_TYPE_NONE and (env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_CANCEL_SP_ATTACK_108_COMBO_3) == FALSE or env(GetEquipWeaponSpecialCategoryNumber, HAND_RIGHT) == SP_ATK_TYPE_108 and env(IsSpEffectBehaviorRefID, SP_EF_REF_WEP_SP_ATK_UNLOCK_108_FINISH) == TRUE) and (env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_CANCEL_SP_ATTACK_102_COMBO_2) == FALSE or env(GetEquipWeaponSpecialCategoryNumber, HAND_RIGHT) == SP_ATK_TYPE_102 and env(IsSpEffectBehaviorRefID, SP_EF_REF_WEP_SP_ATK_UNLOCK_102_COMBO) == TRUE) and (env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_CANCEL_SP_ATTACK_107_COMBO_3) == FALSE or env(GetEquipWeaponSpecialCategoryNumber, HAND_RIGHT) == SP_ATK_TYPE_107 and env(IsSpEffectBehaviorRefID, SP_EF_REF_WEP_SP_ATK_UNLOCK_107_COMBO) == TRUE) then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_GROUND_SP_ATTACK_RELEASE] = function (current_hkb_state)
    local spAtkType = env(GetEquipWeaponSpecialCategoryNumber, HAND_RIGHT)
    if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_SP_ATK_RELEASE) == TRUE and (_isNonCombatMode() == TRUE and spAtkType ~= SP_ATK_TYPE_104 or env(ActionDuration, ACTION_ARM_ATTACK) <= 0 or spAtkType == SP_ATK_TYPE_106 and env(IsSpEffectBehaviorRefID, SP_EF_REF_WEP_SP_ATK_UNLOCK_106_CHARGE) == FALSE or spAtkType == SP_ATK_TYPE_108 and env(IsSpEffectBehaviorRefID, SP_EF_REF_WEP_SP_ATK_UNLOCK_108_FINISH) == FALSE or env(IsSpEffectBehaviorRefID, SP_EF_REF_IN_WATERSIDE_AREA) == TRUE) then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_GROUND_SP_ATTACK_GUARD_RELEASE] = function (current_hkb_state)
    if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_SP_ATK_HOLD_RELEASE) == TRUE and env(GetEquipWeaponSpecialCategoryNumber, HAND_RIGHT) == SP_ATK_TYPE_104 and (_isNonCombatMode() == TRUE or env(ActionDuration, ACTION_ARM_ATTACK) <= 0 or env(ActionDuration, ACTION_ARM_GUARD) <= 0 or env(IsSpEffectBehaviorRefID, SP_EF_REF_IN_WATERSIDE_AREA) == TRUE) then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_GROUND_SUB_ATTACK_KAWARIMI] = function (current_hkb_state)
    local subWeaponCategory = env(GetEquipWeaponCategory, HAND_LEFT)
    if _EnableSubWeaponAction() == TRUE and g_forceCrouch == FALSE and subWeaponCategory == WEP_MOTION_CATEGORY_074 and (env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_DAMAGE_AFTER_KAWARIMI) == TRUE or env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_DAMAGE_BUFF_KAWARIMI) == TRUE and (env(IsSpEffectBehaviorRefID, SP_EF_REF_POISON) == TRUE or env(IsSpEffectBehaviorRefID, SP_EF_REF_BURN) == TRUE)) and env(IsSpEffectBehaviorRefID, SP_EF_REF_WEP_DISABLE_DAMAGE_AFTER_SUB_ATTACK) == FALSE and (env(ActionRequest, ACTION_ARM_SUB_ATTACK) == TRUE or env(ActionRequest, ACTION_ARM_SHINOBI_WEP_ACTION) == TRUE or env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_SUB_ATTACK) == TRUE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_SUB_ATTACK_CANCEL) == TRUE) and env(IsSpEffectBehaviorRefID, SP_EF_REF_IN_WATERSIDE_AREA) == FALSE then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_GROUND_SUB_ATTACK] = function (current_hkb_state)
    local subWeaponCategory = env(GetEquipWeaponCategory, HAND_LEFT)
    if (env(ActionRequest, ACTION_ARM_SUB_ATTACK) == TRUE or env(ActionRequest, ACTION_ARM_SHINOBI_WEP_ACTION) == TRUE or env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_SUB_ATTACK) == TRUE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_SUB_ATTACK_CANCEL) == TRUE or subWeaponCategory == WEP_MOTION_CATEGORY_076 and (env(ActionDuration, ACTION_ARM_SUB_ATTACK) > 0 or env(ActionDuration, ACTION_ARM_SHINOBI_WEP_ACTION) > 0) and env(IsSpEffectBehaviorRefID, SP_EF_REF_ENABLE_PRESS_SUB_ATTACK) == TRUE or subWeaponCategory == WEP_MOTION_CATEGORY_072 and (env(ActionDuration, ACTION_ARM_SUB_ATTACK) > 0 or env(ActionDuration, ACTION_ARM_SHINOBI_WEP_ACTION) > 0) and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_TRANSITION_SUB_ATTACK_HOLD) == TRUE and env(IsSpEffectBehaviorRefID, SP_EF_REF_WEP_ENABLE_SUB_ATTACK_HOLD) == TRUE or env(IsUserJumpRequest, ACTION_ARM_SHINOBI_WEP_ACTION) == FALSE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_SUB_ATTACK_USE_CHECK) == TRUE) and (env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_CANCEL_FLAMETHROWER) == FALSE or subWeaponCategory == WEP_MOTION_CATEGORY_072 and env(IsSpEffectBehaviorRefID, SP_EF_REF_WEP_ENABLE_SUB_ATTACK_HOLD) == TRUE) and env(IsSpEffectBehaviorRefID, SP_EF_REF_IN_WATERSIDE_AREA) == FALSE and env(ActionRequest, ACTION_ARM_CHANGE_WEAPON_L) == FALSE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_DAMAGE_AFTER_KAWARIMI) == FALSE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_DAMAGE_BUFF_KAWARIMI) == FALSE and _EnableSubWeaponAction() == TRUE then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_GROUND_SUB_ATTACK_RELEASE] = function (current_hkb_state)
    local subWeaponCategory = env(GetEquipWeaponCategory, HAND_LEFT)
    if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_SUB_ATTACK_RELEASE) == TRUE and ((subWeaponCategory == WEP_MOTION_CATEGORY_076 or subWeaponCategory == WEP_MOTION_CATEGORY_072) and (_isNonCombatMode() == TRUE or env(IsSpEffectBehaviorRefID, SP_EF_REF_IN_WATERSIDE_AREA) == TRUE) or env(IsSpEffectBehaviorRefID, SP_EF_REF_WEP_FORCE_SUB_ATTACK_RELEASE) == TRUE or env(ActionDuration, ACTION_ARM_SUB_ATTACK) <= 0 or env(ActionDuration, ACTION_ARM_SHINOBI_WEP_ACTION) <= 0 or _isNonCombatMode() == TRUE or env(IsSpEffectBehaviorRefID, SP_EF_REF_IN_WATERSIDE_AREA) == TRUE) then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_GROUND_SUB_GUARD_RELEASE_CONNECT] = function (current_hkb_state)
    local currentState = g_paramHkbState[current_hkb_state][PARAM_HKB_STATE__STATE_TYPE]
    if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_SUB_GUARD_RELEASE_CONNECT) == TRUE and (env(ActionRequest, ACTION_ARM_JUMP) == TRUE or env(ActionRequest, ACTION_ARM_SP_MOVE) == TRUE or env(ActionRequest, ACTION_ARM_CROUCH) == TRUE or env(ActionRequest, ACTION_ARM_USE_ITEM) == TRUE or env(ActionRequest, ACTION_ARM_CHANGE_WEAPON_L) == TRUE or g_forceCrouch == FALSE and env(ActionRequest, ACTION_ARM_WIRE_SHOOT) == TRUE and env(ActionUnlocked, ACTION_UNLOCK_TYPE_SUB_WEAPONE) == TRUE and env(IsWirePossible) == TRUE or env(ActionRequest, ACTION_ARM_GUARD) == TRUE and (currentState ~= STATE_TYPE_STANDBY_SUB_GUARD and currentState ~= STATE_TYPE_ACTION_SUB_GUARD and currentState ~= STATE_TYPE_REACTION_SUB_GUARD or env(GetEquipWeaponCategory, HAND_LEFT) ~= WEP_MOTION_CATEGORY_076 or env(IsSpEffectBehaviorRefID, SP_EF_REF_WEP_DISABLE_SUB_GUARD_ACTION) == TRUE) or env(ActionRequest, ACTION_ARM_ATTACK) == TRUE and (currentState ~= STATE_TYPE_STANDBY_SUB_GUARD and currentState ~= STATE_TYPE_ACTION_SUB_GUARD and currentState ~= STATE_TYPE_REACTION_SUB_GUARD or env(GetEquipWeaponCategory, HAND_LEFT) ~= WEP_MOTION_CATEGORY_076 or env(ActionUnlocked, ACTION_UNLOCK_TYPE_SUB_ATTACK_SHOT_ATTACK) == FALSE)) then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_ITEM_USE] = function (current_hkb_state)
    if env(IsDebugDash) == FALSE and (env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_USE_ITEM) == TRUE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_USE_ITEM_CANCEL) == TRUE or env(ActionRequest, ACTION_ARM_USE_ITEM) == TRUE) and (env(GetWeaponSwitchState) == ARM_STYLE_SAFE and env(IsSpEffectBehaviorRefID, SP_EF_REF_IN_NON_COMBAT_AREA) == TRUE or env(GetWeaponSwitchState) ~= ARM_STYLE_SAFE and env(IsSpEffectBehaviorRefID, SP_EF_REF_IN_NON_COMBAT_AREA) == FALSE) then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_AGING_ITEM_USE] = function (current_hkb_state)
    if env(IsDebugDash) == FALSE and (env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_USE_ITEM) == TRUE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_USE_ITEM_CANCEL) == TRUE or env(ActionRequest, ACTION_ARM_USE_ITEM) == TRUE) then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_GROUND_WIRE_SHOOT] = function (current_hkb_state)
    if (env(ActionRequest, ACTION_ARM_WIRE_SHOOT) == TRUE or env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_WIRE_SHOOT) == TRUE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_WIRE_SHOOT_CANCEL) == TRUE) and env(ActionUnlocked, ACTION_UNLOCK_TYPE_SUB_WEAPONE) == TRUE and env(IsWirePossible) == TRUE and g_forceCrouch == FALSE then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_CROUCH_START] = function (current_hkb_state)
    if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_CROUCH) == TRUE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_CROUCH_CANCEL) == TRUE or env(ActionRequest, ACTION_ARM_CROUCH) == TRUE and env(IsSpEffectBehaviorRefID, SP_EF_REF_IN_WATERSIDE_AREA) == FALSE then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_CROUCH_END] = function (current_hkb_state)
    if env(ActionRequest, ACTION_ARM_CROUCH) == TRUE and g_forceCrouch == FALSE then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_COVER_START] = function (current_hkb_state)
    local currentState = g_paramHkbState[current_hkb_state][PARAM_HKB_STATE__STATE_TYPE]
    local stickLevel = hkbGetVariable("MoveSpeedLevel")
    if env(IsDebugDash) == FALSE and g_forceCrouch == FALSE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_DISABLE_COVER_START) == FALSE and env(IsWallHangPossible) == TRUE and (env(ActionRequest, ACTION_ARM_WALL_HANG) == TRUE or env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_WALL_HANG) == TRUE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_WALL_HANG_CANCEL) == TRUE) and currentState ~= STATE_TYPE_STANDBY_SUB_GUARD then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_COVER_END] = function (current_hkb_state)
    local stickLevel = hkbGetVariable("MoveSpeedLevel")
    local stickAngle = hkbGetVariable("DockingStickAngle")
    if env(ActionRequest, ACTION_ARM_WALL_HANG) == TRUE then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_COVER_LOOK_START] = function (current_hkb_state)
    local stickLevel = hkbGetVariable("MoveSpeedLevel")
    local stickAngle = hkbGetVariable("DockingStickAngle")
    local edgeType = env(GetDockingEdgeRequest)
    local isEdgeEnd = env(IsOnEdgeOfDockingTarget)
    if stickLevel > 0 and (env(IsStayState) == TRUE or env(IsMoveCancelPossible) == TRUE) and (isEdgeEnd == DOCKING_TGT_END_TYPE_LEFT and env(IsObstacleAtDockingStart) == FALSE and stickAngle >= -180 and stickAngle <= 0 and (edgeType == COVER_EDGE_TYPE_FREE_LOOK or edgeType == COVER_EDGE_TYPE_LEFT_LOOK_ONLY or edgeType == COVER_EDGE_TYPE_PEAK_MOVE_FREE_LOOK or edgeType == COVER_EDGE_TYPE_PEAK_MOVE_LEFT_LOOK_ONLY) or isEdgeEnd == DOCKING_TGT_END_TYPE_RIGHT and env(IsObstacleAtDockingEnd) == FALSE and stickAngle >= 0 and stickAngle <= 180 and (edgeType == COVER_EDGE_TYPE_FREE_LOOK or edgeType == COVER_EDGE_TYPE_RIGHT_LOOK_ONLY or edgeType == COVER_EDGE_TYPE_PEAK_MOVE_FREE_LOOK or edgeType == COVER_EDGE_TYPE_PEAK_MOVE_RIGHT_LOOK_ONLY)) then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_COVER_LOOK_END] = function (current_hkb_state)
    local stickLevel = hkbGetVariable("MoveSpeedLevel")
    local stickAngle = hkbGetVariable("DockingStickAngle")
    local coverLookDir = hkbGetVariable("Selector_CoverLookDir")
    if (env(IsStayState) == TRUE or env(IsMoveCancelPossible) == TRUE) and stickLevel > 0 and (coverLookDir == SELECTOR_COVER_LOOK_DIR_L and stickAngle >= 0 and stickAngle <= 180 or coverLookDir == SELECTOR_COVER_LOOK_DIR_R and stickAngle >= -180 and stickAngle <= 0) then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_GROUND_HANG_START] = function (current_hkb_state)
    local currentState = g_paramHkbState[current_hkb_state][PARAM_HKB_STATE__STATE_TYPE]
    local stickLevel = hkbGetVariable("MoveSpeedLevel")
    if env(IsDebugDash) == FALSE and env(IsWallHangGroundPossible) == TRUE and (env(ActionRequest, ACTION_ARM_WALL_HANG) == TRUE or env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_WALL_HANG) == TRUE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_WALL_HANG_CANCEL) == TRUE) and currentState ~= STATE_TYPE_STANDBY_SUB_GUARD then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_AIR_HANG_START] = function (current_hkb_state)
    if env(IsDebugDash) == FALSE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_AIR_HANG_GRAB) == TRUE and env(IsWallHangAirPossible) ~= FALSE or env(IsDebugDash) == FALSE and (env(IsStayState) == TRUE or env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_AIR_HANG) == TRUE) and env(IsWallHangAirPossible) ~= FALSE and env(ActionDuration, ACTION_ARM_WALL_HANG) > 0 then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_AIR_HANG_GRAB_START] = function (current_hkb_state)
    if env(IsDebugDash) == FALSE and (env(IsStayState) == TRUE or env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_AIR_HANG) == TRUE) and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_AIR_HANG_GRAB) == FALSE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_AIR_HANG_GRAB_ENDING) == FALSE and env(ActionDuration, ACTION_ARM_WALL_HANG) > 0 then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_AIR_HANG_GRAB_END] = function (current_hkb_state)
    if env(IsDebugDash) == FALSE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_AIR_HANG_GRAB_END) == TRUE and env(ActionDuration, ACTION_ARM_WALL_HANG) <= 0 then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_HANG_CLIMB] = function (current_hkb_state)
    if env(ActionRequest, ACTION_ARM_WALL_HANG) == TRUE or env(ActionRequest, ACTION_ARM_JUMP) == TRUE then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_HANG_FALL] = function (current_hkb_state)
    if env(ActionRequest, ACTION_ARM_SP_MOVE) == TRUE then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_HANG_CORNER_MOVE] = function (current_hkb_state)
    local stickLevel = hkbGetVariable("MoveSpeedLevel")
    local stickAngle = hkbGetVariable("DockingStickAngle")
    if (env(IsStayState) == TRUE or env(IsMoveCancelPossible) == TRUE) and stickLevel > 0 and (stickAngle >= 0 and stickAngle <= 180 and (env(IsHangRightOutterCornerPossible) == TRUE or env(IsHangRightInnerCornerPossible) == TRUE) or stickAngle >= -180 and stickAngle <= 0 and (env(IsHangLeftOutterCornerPossible) == TRUE or env(IsHangLeftInnerCornerPossible) == TRUE)) then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_SWIM_TO_DIVE] = function (current_hkb_state)
    if env(ActionRequest, ACTION_ARM_SWIM_DOWN) == TRUE and env(IsDiveAllowed) == TRUE and env(ActionUnlocked, ACTION_UNLOCK_TYPE_DIVE) == TRUE and env(IsDebugDash) == FALSE then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_AGING_GROUND_MOVE_START] = function (current_hkb_state)
    if (env(IsStayState) == TRUE or env(IsMoveCancelPossible) == TRUE) and GetLocomotionType() ~= LOCOMOTION_TYPE_MOVE and hkbGetVariable("MoveSpeedLevel") > 0 then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_AGING_GROUND_MOVE_STOP] = function (current_hkb_state)
    if GetLocomotionType() == LOCOMOTION_TYPE_MOVE and (env(IsStayState) == TRUE or env(IsMoveCancelPossible) == TRUE) and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_STOPING_WALK) == FALSE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_STOPING_RUN) == FALSE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_STOPING_SPRINT) == FALSE and hkbGetVariable("MoveSpeedLevel") <= 0 or env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_MOVING_SPRINT) == TRUE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_DISABLE_SPRINT_STOP) == FALSE and (env(ActionDuration, ACTION_ARM_SP_MOVE) <= 0 or hkbGetVariable("MoveSpeedLevel") <= 0 or env(IsSpEffectBehaviorRefID, SP_EF_REF_IN_SWAMP_AREA) == TRUE or env(IsSpEffectBehaviorRefID, SP_EF_REF_IN_WATERSIDE_AREA) == TRUE) then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_AGING_SPRINT] = function (current_hkb_state)
    if _hasSprint() == TRUE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_MOVING_SPRINT) == FALSE and GetLocomotionType() == LOCOMOTION_TYPE_MOVE and g_forceCrouch == FALSE then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_AGING_GROUND_JUMP] = function (current_hkb_state)
    if env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_JUMP) == TRUE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_JUMP_CANCEL) == TRUE or env(ActionRequest, ACTION_ARM_JUMP) == TRUE then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_AGING_ATTACK] = function (current_hkb_state)
    if env(ActionRequest, ACTION_ARM_ATTACK) == TRUE and env(IsSpEffectBehaviorRefID, SP_EF_REF_IN_WATERSIDE_AREA) == FALSE then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_AGING_ACTION] = function (current_hkb_state)
    if (env(ActionRequest, ACTION_ARM_ROLLING) == TRUE or env(ActionRequest, ACTION_ARM_BACKSTEP) == TRUE or env(ActionRequest, ACTION_ARM_WIRE_SHOOT) == TRUE or env(ActionRequest, ACTION_ARM_SUB_ATTACK) == TRUE or env(ActionRequest, ACTION_ARM_SHINOBI_WEP_ACTION) == TRUE or env(ActionRequest, ACTION_ARM_GUARD) == TRUE) and env(IsSpEffectBehaviorRefID, SP_EF_REF_IN_WATERSIDE_AREA) == FALSE then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_ADD_SUB_WEAPON_CHANGE] = function (current_hkb_state)
    local nextSubWeaponCategory = env(GetNextWeaponType, HAND_LEFT)
    if IsNodeActive("AddSubWeaponChange_CMSG") == FALSE and g_EndSubWeaponChange == FALSE and _EnableSubWeaponAction() and (env(ActionRequest, ACTION_ARM_CHANGE_WEAPON_L) == TRUE or env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_SUB_WEAPON_CHANGE) == TRUE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_ADD_ACTION_INPUT_SUB_WEAPON_CHANGE_CANCEL) == TRUE) and (nextSubWeaponCategory == WEP_MOTION_CATEGORY_070 or nextSubWeaponCategory == WEP_MOTION_CATEGORY_071 or nextSubWeaponCategory == WEP_MOTION_CATEGORY_072 or nextSubWeaponCategory == WEP_MOTION_CATEGORY_073 or nextSubWeaponCategory == WEP_MOTION_CATEGORY_074 or nextSubWeaponCategory == WEP_MOTION_CATEGORY_075 or nextSubWeaponCategory == WEP_MOTION_CATEGORY_076 or nextSubWeaponCategory == WEP_MOTION_CATEGORY_077 or nextSubWeaponCategory == WEP_MOTION_CATEGORY_078 or nextSubWeaponCategory == WEP_MOTION_CATEGORY_079) and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_DISABLE_SUB_WEAPON_CHANGE) == FALSE and env(IsSpEffectBehaviorRefID, SP_EF_REF_TAE_ENABLE_SUB_GUARD_RELEASE_CONNECT) == FALSE and (env(GetWeaponSwitchState) == ARM_STYLE_SAFE and env(IsSpEffectBehaviorRefID, SP_EF_REF_IN_NON_COMBAT_AREA) == TRUE or env(GetWeaponSwitchState) ~= ARM_STYLE_SAFE and env(IsSpEffectBehaviorRefID, SP_EF_REF_IN_NON_COMBAT_AREA) == FALSE) then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_ADD_ACTION_INPUT_JUMP] = function (current_hkb_state)
    if env(ActionRequest, ACTION_ARM_JUMP) == TRUE then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_ADD_ACTION_INPUT_KICK] = function (current_hkb_state)
    if env(ActionRequest, ACTION_ARM_SP_MOVE) == TRUE then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_ADD_ACTION_INPUT_USE_ITEM] = function (current_hkb_state)
    if env(ActionRequest, ACTION_ARM_USE_ITEM) == TRUE then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_ADD_ACTION_INPUT_CROUCH] = function (current_hkb_state)
    if env(ActionRequest, ACTION_ARM_CROUCH) == TRUE then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_ADD_ACTION_INPUT_WIRE_SHOOT] = function (current_hkb_state)
    if env(ActionRequest, ACTION_ARM_WIRE_SHOOT) == TRUE then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_ADD_ACTION_INPUT_SUB_ATTACK] = function (current_hkb_state)
    if env(ActionRequest, ACTION_ARM_SHINOBI_WEP_ACTION) == TRUE then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_DEBUG_MOVE_STYLE_AUTO_RESET] = function (current_hkb_state)
    if env(IsDebugDash) == TRUE then
        return TRUE
    end
    return FALSE
    
end, [BEH_A_DEBUG_MOVE_STYLE_SHIFT] = function (current_hkb_state)
    if env(IsDebugDash) == TRUE and env(ActionRequest, ACTION_ARM_EAVESDROP) == TRUE then
        return TRUE
    end
    return FALSE
    
end}

g_behaviorValidateOrder = {{BEH_R_THROW_DEATH, g_ValidateReactionTable[BEH_R_THROW_DEATH]}, {BEH_R_DEATH, g_ValidateReactionTable[BEH_R_DEATH]}, {BEH_R_THROW_ESCAPE, g_ValidateReactionTable[BEH_R_THROW_ESCAPE]}, {BEH_R_SPECIAL_DAMAGE, g_ValidateReactionTable[BEH_R_SPECIAL_DAMAGE]}, {BEH_R_AGING_DAMAGE, g_ValidateReactionTable[BEH_R_AGING_DAMAGE]}, {BEH_R_HIT_DAMAGE, g_ValidateReactionTable[BEH_R_HIT_DAMAGE]}, {BEH_R_SWIM_HIT_DAMAGE, g_ValidateReactionTable[BEH_R_SWIM_HIT_DAMAGE]}, {BEH_R_BREAK_DAMAGE, g_ValidateReactionTable[BEH_R_BREAK_DAMAGE]}, {BEH_R_AIR_BREAK_DAMAGE, g_ValidateReactionTable[BEH_R_AIR_BREAK_DAMAGE]}, {BEH_R_GUARD_DAMAGE, g_ValidateReactionTable[BEH_R_GUARD_DAMAGE]}, {BEH_R_SWIM_GUARD_DAMAGE, g_ValidateReactionTable[BEH_R_SWIM_GUARD_DAMAGE]}, {BEH_R_FALL, g_ValidateReactionTable[BEH_R_FALL]}, {BEH_R_NPC_TALK_START, g_ValidateReactionTable[BEH_R_NPC_TALK_START]}, {BEH_R_NPC_TALK_END, g_ValidateReactionTable[BEH_R_NPC_TALK_END]}, {BEH_R_NPC_TALK_REACTION, g_ValidateReactionTable[BEH_R_NPC_TALK_REACTION]}, {BEH_R_NPC_TALK_ACTION, g_ValidateReactionTable[BEH_R_NPC_TALK_ACTION]}, {BEH_R_ENEMY_JUMP, g_ValidateReactionTable[BEH_R_ENEMY_JUMP]}, {BEH_R_GROUND_SP_ATTACK_HIT_JUMP, g_ValidateReactionTable[BEH_R_GROUND_SP_ATTACK_HIT_JUMP]}, {BEH_R_LAND_WATER, g_ValidateReactionTable[BEH_R_LAND_WATER]}, {BEH_R_LAND, g_ValidateReactionTable[BEH_R_LAND]}, {BEH_R_LAND_WIRE, g_ValidateReactionTable[BEH_R_LAND_WIRE]}, {BEH_R_THROW_KILL, g_ValidateReactionTable[BEH_R_THROW_KILL]}, {BEH_R_STAND_MOVE_TO_SWIM, g_ValidateReactionTable[BEH_R_STAND_MOVE_TO_SWIM]}, {BEH_R_SWIM_TO_STAND_MOVE, g_ValidateReactionTable[BEH_R_SWIM_TO_STAND_MOVE]}, {BEH_R_DIVE_TO_SWIM, g_ValidateReactionTable[BEH_R_DIVE_TO_SWIM]}, {BEH_R_DOCKING_BREAK, g_ValidateReactionTable[BEH_R_DOCKING_BREAK]}, {BEH_R_FORCE_CROUCH_END, g_ValidateReactionTable[BEH_R_FORCE_CROUCH_END]}, {BEH_R_SUB_WEAPON_EXPAND, g_ValidateReactionTable[BEH_R_SUB_WEAPON_EXPAND]}, {BEH_R_CURE_AGING, g_ValidateReactionTable[BEH_R_CURE_AGING]}, {BEH_A_DEBUG_MOVE_STYLE_SHIFT, g_ValidateActionTable[BEH_A_DEBUG_MOVE_STYLE_SHIFT]}, {BEH_A_GROUND_SUB_GUARD_RELEASE_CONNECT, g_ValidateActionTable[BEH_A_GROUND_SUB_GUARD_RELEASE_CONNECT]}, {BEH_A_HANG_END_CONNECT, g_ValidateActionTable[BEH_A_HANG_END_CONNECT]}, {BEH_A_COVER_END_CONNECT, g_ValidateActionTable[BEH_A_COVER_END_CONNECT]}, {BEH_A_ITEM_USE, g_ValidateActionTable[BEH_A_ITEM_USE]}, {BEH_A_GROUND_JUMP, g_ValidateActionTable[BEH_A_GROUND_JUMP]}, {BEH_A_WALL_JUMP, g_ValidateActionTable[BEH_A_WALL_JUMP]}, {BEH_A_AIR_KICK, g_ValidateActionTable[BEH_A_AIR_KICK]}, {BEH_A_ADD_ACTION_INPUT_JUMP, g_ValidateActionTable[BEH_A_ADD_ACTION_INPUT_JUMP]}, {BEH_A_ADD_ACTION_INPUT_KICK, g_ValidateActionTable[BEH_A_ADD_ACTION_INPUT_KICK]}, {BEH_A_GROUND_STEP, g_ValidateActionTable[BEH_A_GROUND_STEP]}, {BEH_A_AGING_ITEM_USE, g_ValidateActionTable[BEH_A_AGING_ITEM_USE]}, {BEH_A_ADD_ACTION_INPUT_USE_ITEM, g_ValidateActionTable[BEH_A_ADD_ACTION_INPUT_USE_ITEM]}, {BEH_A_ADD_SUB_WEAPON_CHANGE, g_ValidateActionTable[BEH_A_ADD_SUB_WEAPON_CHANGE]}, {BEH_A_GROUND_SP_ATTACK, g_ValidateActionTable[BEH_A_GROUND_SP_ATTACK]}, {BEH_A_GROUND_SP_ATTACK_RELEASE, g_ValidateActionTable[BEH_A_GROUND_SP_ATTACK_RELEASE]}, {BEH_A_GROUND_SP_ATTACK_GUARD_RELEASE, g_ValidateActionTable[BEH_A_GROUND_SP_ATTACK_GUARD_RELEASE]}, {BEH_A_GROUND_ATTACK, g_ValidateActionTable[BEH_A_GROUND_ATTACK]}, {BEH_A_GROUND_RELEASE_ATTACK, g_ValidateActionTable[BEH_A_GROUND_RELEASE_ATTACK]}, {BEH_A_GROUND_SUB_ATTACK, g_ValidateActionTable[BEH_A_GROUND_SUB_ATTACK]}, {BEH_A_GROUND_SUB_ATTACK_RELEASE, g_ValidateActionTable[BEH_A_GROUND_SUB_ATTACK_RELEASE]}, {BEH_A_GROUND_SUB_ATTACK_KAWARIMI, g_ValidateActionTable[BEH_A_GROUND_SUB_ATTACK_KAWARIMI]}, {BEH_A_DEFLECT_GUARD_CONTINUE, g_ValidateActionTable[BEH_A_DEFLECT_GUARD_CONTINUE]}, {BEH_A_DEFLECT_GUARD_START, g_ValidateActionTable[BEH_A_DEFLECT_GUARD_START]}, {BEH_A_DEFLECT_GUARD_END, g_ValidateActionTable[BEH_A_DEFLECT_GUARD_END]}, {BEH_A_GROUND_WIRE_SHOOT, g_ValidateActionTable[BEH_A_GROUND_WIRE_SHOOT]}, {BEH_R_NON_COMBAT_AREA_ENTER, g_ValidateReactionTable[BEH_R_NON_COMBAT_AREA_ENTER]}, {BEH_R_NON_COMBAT_AREA_LEAVE, g_ValidateReactionTable[BEH_R_NON_COMBAT_AREA_LEAVE]}, {BEH_R_TELESCOPE_END, g_ValidateReactionTable[BEH_R_TELESCOPE_END]}, {BEH_A_CROUCH_START, g_ValidateActionTable[BEH_A_CROUCH_START]}, {BEH_A_CROUCH_END, g_ValidateActionTable[BEH_A_CROUCH_END]}, {BEH_A_ADD_ACTION_INPUT_CROUCH, g_ValidateActionTable[BEH_A_ADD_ACTION_INPUT_CROUCH]}, {BEH_A_COVER_START, g_ValidateActionTable[BEH_A_COVER_START]}, {BEH_A_COVER_END, g_ValidateActionTable[BEH_A_COVER_END]}, {BEH_A_COVER_LOOK_START, g_ValidateActionTable[BEH_A_COVER_LOOK_START]}, {BEH_A_COVER_LOOK_END, g_ValidateActionTable[BEH_A_COVER_LOOK_END]}, {BEH_A_GROUND_HANG_START, g_ValidateActionTable[BEH_A_GROUND_HANG_START]}, {BEH_A_HANG_FALL, g_ValidateActionTable[BEH_A_HANG_FALL]}, {BEH_A_HANG_CLIMB, g_ValidateActionTable[BEH_A_HANG_CLIMB]}, {BEH_A_SWIM_TO_DIVE, g_ValidateActionTable[BEH_A_SWIM_TO_DIVE]}, {BEH_A_SWIM_JUMP, g_ValidateActionTable[BEH_A_SWIM_JUMP]}, {BEH_A_DIVE_ATTACK, g_ValidateActionTable[BEH_A_DIVE_ATTACK]}, {BEH_A_DIVE_RELEASE_ATTACK, g_ValidateActionTable[BEH_A_DIVE_RELEASE_ATTACK]}, {BEH_A_DIVE_DEFLECT_GUARD_START, g_ValidateActionTable[BEH_A_DIVE_DEFLECT_GUARD_START]}, {BEH_A_DIVE_DEFLECT_GUARD_END, g_ValidateActionTable[BEH_A_DIVE_DEFLECT_GUARD_END]}, {BEH_A_DIVE_KICK_MOVE_UP, g_ValidateActionTable[BEH_A_DIVE_KICK_MOVE_UP]}, {BEH_A_DIVE_KICK_MOVE_UP_BRAKE, g_ValidateActionTable[BEH_A_DIVE_KICK_MOVE_UP_BRAKE]}, {BEH_A_DIVE_KICK_MOVE_DOWN, g_ValidateActionTable[BEH_A_DIVE_KICK_MOVE_DOWN]}, {BEH_A_DIVE_KICK_MOVE_DOWN_BRAKE, g_ValidateActionTable[BEH_A_DIVE_KICK_MOVE_DOWN_BRAKE]}, {BEH_A_DIVE_MOVE_UP_START, g_ValidateActionTable[BEH_A_DIVE_MOVE_UP_START]}, {BEH_A_DIVE_MOVE_DOWN_START, g_ValidateActionTable[BEH_A_DIVE_MOVE_DOWN_START]}, {BEH_A_DIVE_MOVE_UP_STOP, g_ValidateActionTable[BEH_A_DIVE_MOVE_UP_STOP]}, {BEH_A_DIVE_MOVE_DOWN_STOP, g_ValidateActionTable[BEH_A_DIVE_MOVE_DOWN_STOP]}, {BEH_A_KICK_MOVE, g_ValidateActionTable[BEH_A_KICK_MOVE]}, {BEH_A_SWIM_BACK_STEP, g_ValidateActionTable[BEH_A_SWIM_BACK_STEP]}, {BEH_A_AIR_SUB_GUARD_RELEASE_CONNECT, g_ValidateActionTable[BEH_A_AIR_SUB_GUARD_RELEASE_CONNECT]}, {BEH_A_AIR_HANG_START, g_ValidateActionTable[BEH_A_AIR_HANG_START]}, {BEH_A_AIR_STORM_JUMP, g_ValidateActionTable[BEH_A_AIR_STORM_JUMP]}, {BEH_A_AIR_SP_ATTACK, g_ValidateActionTable[BEH_A_AIR_SP_ATTACK]}, {BEH_A_AIR_SP_ATTACK_RELEASE, g_ValidateActionTable[BEH_A_AIR_SP_ATTACK_RELEASE]}, {BEH_A_AIR_SP_ATTACK_GUARD_RELEASE, g_ValidateActionTable[BEH_A_AIR_SP_ATTACK_GUARD_RELEASE]}, {BEH_A_AIR_ATTACK, g_ValidateActionTable[BEH_A_AIR_ATTACK]}, {BEH_A_AIR_SUB_ATTACK, g_ValidateActionTable[BEH_A_AIR_SUB_ATTACK]}, {BEH_A_AIR_SUB_ATTACK_RELEASE, g_ValidateActionTable[BEH_A_AIR_SUB_ATTACK_RELEASE]}, {BEH_A_AIR_SUB_ATTACK_KAWARIMI, g_ValidateActionTable[BEH_A_AIR_SUB_ATTACK_KAWARIMI]}, {BEH_A_AIR_DEFLECT_START, g_ValidateActionTable[BEH_A_AIR_DEFLECT_START]}, {BEH_A_AIR_DEFLECT_END, g_ValidateActionTable[BEH_A_AIR_DEFLECT_END]}, {BEH_A_AIR_WIRE_SHOOT, g_ValidateActionTable[BEH_A_AIR_WIRE_SHOOT]}, {BEH_A_ADD_ACTION_INPUT_WIRE_SHOOT, g_ValidateActionTable[BEH_A_ADD_ACTION_INPUT_WIRE_SHOOT]}, {BEH_A_ADD_ACTION_INPUT_SUB_ATTACK, g_ValidateActionTable[BEH_A_ADD_ACTION_INPUT_SUB_ATTACK]}, {BEH_A_AIR_HANG_GRAB_START, g_ValidateActionTable[BEH_A_AIR_HANG_GRAB_START]}, {BEH_A_AIR_HANG_GRAB_END, g_ValidateActionTable[BEH_A_AIR_HANG_GRAB_END]}, {BEH_A_AGING_ATTACK, g_ValidateActionTable[BEH_A_AGING_ATTACK]}, {BEH_A_AGING_ACTION, g_ValidateActionTable[BEH_A_AGING_ACTION]}, {BEH_A_AGING_GROUND_JUMP, g_ValidateActionTable[BEH_A_AGING_GROUND_JUMP]}, {BEH_R_LAND_READY, g_ValidateReactionTable[BEH_R_LAND_READY]}, {BEH_R_LAND_WIRE_READY, g_ValidateReactionTable[BEH_R_LAND_WIRE_READY]}, {BEH_A_SPRINT_QUICK_TURN, g_ValidateActionTable[BEH_A_SPRINT_QUICK_TURN]}, {BEH_A_SPRINT, g_ValidateActionTable[BEH_A_SPRINT]}, {BEH_A_STAND_MOVE_QUICK_TURN, g_ValidateActionTable[BEH_A_STAND_MOVE_QUICK_TURN]}, {BEH_A_QUICK_TURN_MOVE_START, g_ValidateActionTable[BEH_A_QUICK_TURN_MOVE_START]}, {BEH_A_GROUND_MOVE_START, g_ValidateActionTable[BEH_A_GROUND_MOVE_START]}, {BEH_A_HANG_CORNER_MOVE, g_ValidateActionTable[BEH_A_HANG_CORNER_MOVE]}, {BEH_A_DOCKING_MOVE_START, g_ValidateActionTable[BEH_A_DOCKING_MOVE_START]}, {BEH_A_GROUND_MOVE_SPEED_CHANGE, g_ValidateActionTable[BEH_A_GROUND_MOVE_SPEED_CHANGE]}, {BEH_A_KICK_MOVE_BRAKE, g_ValidateActionTable[BEH_A_KICK_MOVE_BRAKE]}, {BEH_A_GROUND_QUICK_TURN, g_ValidateActionTable[BEH_A_GROUND_QUICK_TURN]}, {BEH_A_SWIM_QUICK_TURN, g_ValidateActionTable[BEH_A_SWIM_QUICK_TURN]}, {BEH_A_SWIM_MOVE_START, g_ValidateActionTable[BEH_A_SWIM_MOVE_START]}, {BEH_A_DIVE_MOVE_START, g_ValidateActionTable[BEH_A_DIVE_MOVE_START]}, {BEH_A_GROUND_MOVE_STOP, g_ValidateActionTable[BEH_A_GROUND_MOVE_STOP]}, {BEH_A_DOCKING_MOVE_STOP, g_ValidateActionTable[BEH_A_DOCKING_MOVE_STOP]}, {BEH_A_SWIM_MOVE_STOP, g_ValidateActionTable[BEH_A_SWIM_MOVE_STOP]}, {BEH_A_DIVE_MOVE_STOP, g_ValidateActionTable[BEH_A_DIVE_MOVE_STOP]}, {BEH_A_AGING_GROUND_MOVE_START, g_ValidateActionTable[BEH_A_AGING_GROUND_MOVE_START]}, {BEH_A_AGING_GROUND_MOVE_STOP, g_ValidateActionTable[BEH_A_AGING_GROUND_MOVE_STOP]}, {BEH_A_AGING_SPRINT, g_ValidateActionTable[BEH_A_AGING_SPRINT]}, {BEH_A_DEBUG_MOVE_STYLE_AUTO_RESET, g_ValidateActionTable[BEH_A_DEBUG_MOVE_STYLE_AUTO_RESET]}}
g_behaviorTable = {[BEH_R_THROW_DEATH] = {1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0}, [BEH_R_THROW_ESCAPE] = {1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0}, [BEH_R_DEATH] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0}, [BEH_R_SPECIAL_DAMAGE] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0}, [BEH_R_AGING_DAMAGE] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0}, [BEH_R_HIT_DAMAGE] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0}, [BEH_R_SWIM_HIT_DAMAGE] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0}, [BEH_R_BREAK_DAMAGE] = {1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0}, [BEH_R_AIR_BREAK_DAMAGE] = {0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0}, [BEH_R_GUARD_DAMAGE] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0}, [BEH_R_SWIM_GUARD_DAMAGE] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0}, [BEH_R_FALL] = {1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0}, [BEH_R_LAND] = {0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0}, [BEH_R_LAND_WIRE] = {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0}, [BEH_R_LAND_READY] = {0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0}, [BEH_R_LAND_WIRE_READY] = {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0}, [BEH_R_THROW_KILL] = {1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0}, [BEH_R_STAND_MOVE_TO_SWIM] = {1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0}, [BEH_R_SWIM_TO_STAND_MOVE] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0}, [BEH_R_LAND_WATER] = {0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0}, [BEH_R_DIVE_TO_SWIM] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0}, [BEH_R_ENEMY_JUMP] = {1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0}, [BEH_R_GROUND_SP_ATTACK_HIT_JUMP] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, [BEH_R_SUB_WEAPON_EXPAND] = {1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, [BEH_R_NPC_TALK_START] = {1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0}, [BEH_R_NPC_TALK_END] = {1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0}, [BEH_R_NPC_TALK_REACTION] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, [BEH_R_NPC_TALK_ACTION] = {1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0}, [BEH_R_DOCKING_BREAK] = {0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, [BEH_R_FORCE_CROUCH_END] = {0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, [BEH_R_NON_COMBAT_AREA_ENTER] = {1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0}, [BEH_R_NON_COMBAT_AREA_LEAVE] = {1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0}, [BEH_R_CURE_AGING] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0}, [BEH_R_TELESCOPE_END] = {1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, [BEH_A_CROUCH_START] = {1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0}, [BEH_A_CROUCH_END] = {0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, [BEH_A_COVER_START] = {1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, [BEH_A_COVER_END] = {0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, [BEH_A_COVER_END_CONNECT] = {0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, [BEH_A_COVER_LOOK_START] = {0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, [BEH_A_COVER_LOOK_END] = {0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, [BEH_A_GROUND_HANG_START] = {1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, [BEH_A_HANG_CLIMB] = {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, [BEH_A_HANG_FALL] = {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, [BEH_A_HANG_CORNER_MOVE] = {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, [BEH_A_HANG_END_CONNECT] = {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, [BEH_A_DEFLECT_GUARD_START] = {1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0}, [BEH_A_DEFLECT_GUARD_CONTINUE] = {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, [BEH_A_SPRINT] = {1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0}, [BEH_A_SPRINT_QUICK_TURN] = {1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0}, [BEH_A_GROUND_JUMP] = {1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0}, [BEH_A_GROUND_ATTACK] = {1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0}, [BEH_A_GROUND_STEP] = {1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0}, [BEH_A_GROUND_RELEASE_ATTACK] = {1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, [BEH_A_GROUND_SP_ATTACK] = {1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0}, [BEH_A_GROUND_SP_ATTACK_RELEASE] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, [BEH_A_GROUND_SP_ATTACK_GUARD_RELEASE] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, [BEH_A_GROUND_SUB_ATTACK] = {1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0}, [BEH_A_GROUND_SUB_ATTACK_KAWARIMI] = {1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0}, [BEH_A_GROUND_SUB_ATTACK_RELEASE] = {1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0}, [BEH_A_GROUND_WIRE_SHOOT] = {1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0}, [BEH_A_GROUND_SUB_GUARD_RELEASE_CONNECT] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, [BEH_A_AIR_SUB_GUARD_RELEASE_CONNECT] = {0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0}, [BEH_A_GROUND_QUICK_TURN] = {1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, [BEH_A_QUICK_TURN_MOVE_START] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, [BEH_A_STAND_MOVE_QUICK_TURN] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, [BEH_A_ITEM_USE] = {1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0}, [BEH_A_AGING_ITEM_USE] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0}, [BEH_A_GROUND_MOVE_START] = {1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, [BEH_A_DOCKING_MOVE_START] = {0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, [BEH_A_GROUND_MOVE_SPEED_CHANGE] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, [BEH_A_SWIM_MOVE_START] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0}, [BEH_A_DIVE_MOVE_START] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0}, [BEH_A_GROUND_MOVE_STOP] = {1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0}, [BEH_A_DOCKING_MOVE_STOP] = {0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, [BEH_A_SWIM_MOVE_STOP] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0}, [BEH_A_DIVE_MOVE_STOP] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0}, [BEH_A_DEFLECT_GUARD_END] = {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, [BEH_A_SWIM_JUMP] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0}, [BEH_A_SWIM_TO_DIVE] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0}, [BEH_A_DIVE_MOVE_UP_START] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0}, [BEH_A_DIVE_MOVE_DOWN_START] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0}, [BEH_A_DIVE_MOVE_UP_STOP] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0}, [BEH_A_DIVE_MOVE_DOWN_STOP] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0}, [BEH_A_KICK_MOVE] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0}, [BEH_A_SWIM_BACK_STEP] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0}, [BEH_A_SWIM_QUICK_TURN] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0}, [BEH_A_KICK_MOVE_BRAKE] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0}, [BEH_A_DIVE_KICK_MOVE_UP] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0}, [BEH_A_DIVE_KICK_MOVE_UP_BRAKE] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0}, [BEH_A_DIVE_KICK_MOVE_DOWN] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0}, [BEH_A_DIVE_KICK_MOVE_DOWN_BRAKE] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0}, [BEH_A_DIVE_ATTACK] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0}, [BEH_A_DIVE_RELEASE_ATTACK] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0}, [BEH_A_DIVE_DEFLECT_GUARD_START] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0}, [BEH_A_DIVE_DEFLECT_GUARD_END] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0}, [BEH_A_AIR_HANG_START] = {0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0}, [BEH_A_WALL_JUMP] = {0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0}, [BEH_A_AIR_STORM_JUMP] = {0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0}, [BEH_A_AIR_ATTACK] = {0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0}, [BEH_A_AIR_SP_ATTACK] = {0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0}, [BEH_A_AIR_SP_ATTACK_RELEASE] = {0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0}, [BEH_A_AIR_SP_ATTACK_GUARD_RELEASE] = {0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0}, [BEH_A_AIR_SUB_ATTACK] = {0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0}, [BEH_A_AIR_SUB_ATTACK_RELEASE] = {0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0}, [BEH_A_AIR_SUB_ATTACK_KAWARIMI] = {0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0}, [BEH_A_AIR_DEFLECT_START] = {0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0}, [BEH_A_AIR_DEFLECT_END] = {0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0}, [BEH_A_AIR_WIRE_SHOOT] = {0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0}, [BEH_A_AIR_KICK] = {0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0}, [BEH_A_AIR_HANG_GRAB_START] = {0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0}, [BEH_A_AIR_HANG_GRAB_END] = {0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0}, [BEH_A_AGING_GROUND_MOVE_START] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0}, [BEH_A_AGING_GROUND_MOVE_STOP] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0}, [BEH_A_AGING_SPRINT] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0}, [BEH_A_AGING_GROUND_JUMP] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0}, [BEH_A_AGING_ATTACK] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0}, [BEH_A_AGING_ACTION] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0}, [BEH_A_ADD_SUB_WEAPON_CHANGE] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0}, [BEH_A_ADD_ACTION_INPUT_JUMP] = {0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0}, [BEH_A_ADD_ACTION_INPUT_KICK] = {0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0}, [BEH_A_ADD_ACTION_INPUT_USE_ITEM] = {0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0}, [BEH_A_ADD_ACTION_INPUT_CROUCH] = {0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0}, [BEH_A_ADD_ACTION_INPUT_WIRE_SHOOT] = {0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0}, [BEH_A_ADD_ACTION_INPUT_SUB_ATTACK] = {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0}, [BEH_A_DEBUG_MOVE_STYLE_SHIFT] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0}, [BEH_A_DEBUG_MOVE_STYLE_AUTO_RESET] = {0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0}}
global = {}

function dummy()
    
end

global.__index = function (table, element)
    return dummy
    
end

setmetatable(_G, global)

